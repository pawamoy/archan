{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Archan","text":"<p>Analysis of your architecture strength based on DSM data.</p> <p>A Python module that analyzes your architecture strength based on Design Structure Matrix (DSM) data.</p> <p>Archan is a Python module that analyzes the strength of your project architecture according to some criteria described in \"The Protection of Information in Computer Systems\", written by Jerome H. Saltzer and Michael D. Schroeder.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Usable directly on the command-line.</li> <li>Support for plugins. See for example the Provider plugin in dependenpy.   You can also take a look at django-meerkat, a Django app using Archan.</li> <li>Configurable through command-line or configuration file (YAML format).</li> <li>Read DSM data on standard input.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>With <code>pip</code>:</p> <pre><code>pip install archan\n</code></pre> <p>With <code>pipx</code>:</p> <pre><code>python3.8 -m pip install --user pipx\npipx install archan\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Archan defines three main classes: Analyzer, Provider and Checker. A provider is an object that will produce data and return it in the form of a DSM (Design Structure Matrix). The checker is an object that will analyze this DSM according to some criteria, and return a status code saying if the criteria are verified or not. An analyzer is just a combination of providers and checkers to run a analysis test suite.</p>"},{"location":"#on-the-command-line","title":"On the command-line","text":"<p>Examples:</p> <pre><code>$ archan -h\nusage: archan [-c FILE] [-h] [-i FILE] [-l] [--no-color] [--no-config] [-v]\n\nAnalysis of your architecture strength based on DSM data\n\noptional arguments:\n    -c FILE, --config FILE  Configuration file to use.\n    -h, --help              Show this help message and exit.\n    -i FILE, --input FILE   Input file containing CSV data.\n    -l, --list-plugins      Show the available plugins. Default: false.\n    --no-color              Do not use colors. Default: false.\n    --no-config             Do not load configuration from file. Default: false.\n    -v, --version           Show the current version of the program and exit.\n</code></pre> <pre><code># See a list of all supported Archan plugins\narchan --list-plugins\n\n# Archan can locate the configuration file automatically (See the Configuration section)\narchan\n# or a specific configuration can be specified\narchan --config my_config.yml\n\n# Archan can load DSM data in CSV format such as the output from dependenpy (install separately)\ndependenpy pytest --format=csv --output pytest_dsm.csv\n\n# Read CSV data from file (No configuration)\narchan --no-config --input pytest_dsm.csv\n# or read CSV data from STDIN\ndependenpy pytest --format=csv | archan --no-config\n</code></pre>"},{"location":"#configuration","title":"Configuration","text":"<p>Archan applies the following methods to find the configuration file folder:</p> <ol> <li>read the contents of the file <code>.configconfig</code> in the current directory    to get the path to the configuration directory,</li> <li>use <code>config</code> folder in the current directory if it exists,</li> <li>use the current directory.</li> </ol> <p>It then searches for a configuration file named:</p> <ol> <li><code>archan.yml</code></li> <li><code>archan.yaml</code></li> <li><code>.archan.yml</code></li> <li><code>.archan.yaml</code></li> </ol> <p>Format of the configuration file is as follow:</p> <pre><code>analyzers: [list of strings and/or dict]\n  - identifier: [optional string]\n      name: [string]\n      description: [string]\n      providers: [string or list]\n        - provider.Name: [as string or dict]\n            provider_arguments: as key value pairs\n      checkers: [string or list]\n        - checker.Name: [as string or dict]\n            checker_arguments: as key value pairs\n</code></pre> <p>It means you can write:</p> <pre><code>analyzers:\n  # a first analyzer with one provider and several checker\n  - name: My first analyzer\n      description: Optional description\n      providers: just.UseThisProvider\n      checkers:\n        - and.ThisChecker\n        - and.ThisOtherChecker:\n            which: has\n            some: arguments\n  # a second analyzer with several providers and one checker\n  - name: My second analyzer\n      providers:\n        - use.ThisProvider\n      checkers: and.ThisChecker\n  # a third analyzer, using its name directly\n  - some.Analyzer\n</code></pre> <p>Every checker support an <code>ignore</code> argument, set to True or False (default). If set to True, the check will not make the test suit fail.</p> <p>You can reuse the same providers and checkers in different analyzers, they will be instantiated as different objects and won't interfere between each other.</p> <p>As an example, see Archan's own configuration file.</p> <p>To get the list of available plugins in your current environment, run <code>archan --list-plugins</code> or <code>archan -l</code>.</p>"},{"location":"#writing-a-plugin","title":"Writing a plugin","text":""},{"location":"#plugin-discovery","title":"Plugin discovery","text":"<p>You can write three types of plugins: analyzers, providers and checkers. Your plugin does not need to be in an installable package. All it needs to be summoned is to be available in your current Python path. However, if you want it to be automatically discovered by Archan, you will have to make it installable, through pip or simply <code>python setup.py install</code> command or equivalent.</p> <p>If you decide to write a Python package for your plugin, I recommend you to name it <code>archan-your-plugin</code> for consistency. If you plan to make it live along other code in an already existing package, just leave the name as it is.</p> <p>To make your plugin discoverable by Archan, use the <code>archan</code> entry point in your <code>setup.py</code>:</p> <pre><code>from setuptools import setup\n\nsetup(\n    ...,\n    'entry_points': {\n        'archan': [\n            'mypackage.MyPlugin = mypackage.mymodule:MyPlugin',\n        ]\n    }\n</code></pre> <p>If you build your package with Poetry, use this instead:</p> <pre><code>[tool.poetry.plugins.archan]\n\"mypackage.MyPlugin\" = \"mkdocstrings.plugin:MkdocstringsPlugin\"\n</code></pre> <p>The name of the entry point should by convention be composed of the name of your package in lower case, a dot, and the name of the Python class, though you can name it whatever you want. Remember that this name will be the one used in the configuration file.</p> <p>Also a good thing is to make the plugin importable thanks to its name only:</p> <pre><code>import mypackage.MyPlugin\n</code></pre> <p>But again, this is just a convention.</p>"},{"location":"#plugin-class","title":"Plugin class","text":"<p>You can write three types of plugins: analyzers, providers and checkers. For each of them, you have to inherit from its corresponding class:</p> <pre><code>from archan import Analyzer, Provider, Checker\n\nclass MyAnalyzer(Analyzer): ...\nclass MyProvider(Provider): ...\nclass MyChecker(Checker): ...\n</code></pre> <p>A provider or checker plugin must have the following class attributes:</p> <ul> <li>identifier: the identifier of the plugin. It must be the same name as in   your entry points, so that displaying its help tells how to summon it.</li> <li>name: the verbose name of the plugin.</li> <li>description: a description to explain what it does.</li> <li>(optional) arguments: a tuple/list of Argument instances. This one is only   used to display some help for the plugin. An argument is composed of a name,   a type, a description and a default value.</li> </ul> <pre><code>from archan import Provider, Argument\n\nclass MyProvider(Provider):\n    identifier = 'mypackage.MyProvider'\n    name = 'This is my Provider'\n    description = \"\"\"\n    Don't hesitate to use multi-line strings as the lines will be de-indented,\n    concatenated again and wrapped to match the console width.\n\n    Blank lines will be kept though, so the above line will not be removed.\n    \"\"\"\n\n    arguments = (\n        Argument('my_arg', int, 'This argument is useful.', 42),\n        # don't forget the ending comma if you have just one   ^   argument\n    )\n</code></pre> <p>Additionally, a checker plugin should have the <code>hint</code> class attribute (string). The hint describe what you should do if the check fails.</p> <p>For now, the analyzers plugins just have the <code>providers</code> and <code>checkers</code> class attributes.</p>"},{"location":"#plugin-methods","title":"Plugin methods","text":"<p>A provider must implement the <code>get_dsm(self, **kwargs)</code> method. This method must return an instance of <code>DSM</code>. A DSM is composed of a two-dimensions array, the matrix, a list of strings, the keys or names for each line/column of the matrix, and optionally the categories for each key (a list of same size).</p> <pre><code>from archan import DSM, Provider\n\nclass MyProvider(Provider):\n    name = 'mypackage.MyProvider'\n\n    def get_dsm(self, my_arg=42, **kwargs):\n        # this is where you compute your stuff\n        matrix_data = [...]\n        entities = [...]\n        categories = [...] or None\n        # and return a DSM instance\n        return DSM(matrix_data, entities, categories)\n</code></pre> <p>A checker must implement the <code>check(self, dsm, **kwargs)</code> method.</p> <pre><code>from archan import DSM, Checker\n\nclass MyChecker(Checker):\n    name = 'mypackage.MyChecker'\n\n    def check(self, dsm, **kwargs):\n        # this is where you check your stuff\n        # with dsm.data, dsm.entities, dsm.categories, dsm.size (rows, columns)\n        ...\n        # and return True, False, or a constant from Checker: PASSED or FAILED\n        # with an optional message\n        return Checker.FAILED, 'too much issues in module XXX'\n</code></pre>"},{"location":"#logging-messages","title":"Logging messages","text":"<p>Each plugin instance has a <code>logger</code> attribute available. Use it to log messages with <code>self.logger.debug</code>, <code>info</code>, <code>warning</code>, <code>error</code> or <code>critical</code>.</p>"},{"location":"#available-plugins","title":"Available plugins","text":"<p>Here is the list of plugins available in other packages.</p> <p>See other plugins published to PyPi by searching for \"archan-\"</p>"},{"location":"#providers","title":"Providers","text":"<ul> <li><code>dependenpy.InternalDependencies</code>: Provide matrix data about internal   dependencies in a set of packages. Install it with <code>pip install dependenpy</code>.</li> </ul>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#300-2024-01-11","title":"3.0.0 - 2024-01-11","text":"<p>Compare with 2.0.1</p>"},{"location":"changelog/#breaking-changes","title":"Breaking changes","text":"<ul> <li>API was reworked to improve maintainability and type safety.</li> </ul>"},{"location":"changelog/#build","title":"Build","text":"<ul> <li>Make <code>dependenpy</code> optional (a9f58d9 by Kyle King).</li> </ul>"},{"location":"changelog/#dependencies","title":"Dependencies","text":"<ul> <li>Remove upper bounds on dependencies (361303a by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li><code>sys.stdin</code> issue and <code>deepcopy</code> (7c42f28 by Kyle King). Issue #44</li> </ul>"},{"location":"changelog/#201-2017-06-27","title":"2.0.1 - 2017-06-27","text":"<ul> <li>Fix usage of DSM size.</li> <li>Start implementing other concepts (MDM and DMM).</li> </ul>"},{"location":"changelog/#200-2017-06-26","title":"2.0.0 - 2017-06-26","text":"<ul> <li>Change license from MPL 2.0 to ISC.</li> <li>Add command-line tool.</li> <li>Rewrite architecture to support plugins.</li> </ul>"},{"location":"changelog/#100-2016-10-06","title":"1.0.0 - 2016-10-06","text":"<ul> <li>Add documentation.</li> </ul>"},{"location":"changelog/#010-2016-10-06","title":"0.1.0 - 2016-10-06","text":"<ul> <li>Alpha release on PyPI.</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at pawamoy@pm.me. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>Nothing easier!</p> <p>Fork and clone the repository, then:</p> <pre><code>cd archan\nmake setup\n</code></pre> <p>Note</p> <p> If it fails for some reason, you'll need to install PDM manually.</p> <p>You can install it with:</p> <pre><code>python3 -m pip install --user pipx\npipx install pdm\n</code></pre> <p>Now you can try running <code>make setup</code> again, or simply <code>pdm install</code>.</p> <p>You now have the dependencies installed.</p> <p>You can run the application with <code>pdm run archan [ARGS...]</code>.</p> <p>Run <code>make help</code> to see all the available actions!</p>"},{"location":"contributing/#tasks","title":"Tasks","text":"<p>This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you run the task directly with <code>pdm run duty TASK</code>.</p> <p>The Makefile detects if a virtual environment is activated, so <code>make</code> will work the same with the virtualenv activated or not.</p> <p>If you work in VSCode, we provide an action to configure VSCode for the project.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git switch -c feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>Before committing:</p> <ol> <li>run <code>make format</code> to auto-format the code</li> <li>run <code>make check</code> to check everything (fix any warning)</li> <li>run <code>make test</code> to run the tests (fix any issue)</li> <li>if you updated the documentation or the project dependencies:<ol> <li>run <code>make docs</code></li> <li>go to http://localhost:8000 and check that everything looks good</li> </ol> </li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#commit-message-convention","title":"Commit message convention","text":"<p>Commit messages must follow our convention based on the Angular style or the Karma convention:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Subject and body must be valid Markdown. Subject must have proper casing (uppercase for first letter if it makes sense), but no dot at the end, and no punctuation in general.</p> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>deps</code>: Dependencies update.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes that are not features or bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>If you write a body, please add trailers at the end (for example issues and PR references, or co-authors), without relying on GitHub's flavored Markdown:</p> <pre><code>Body.\n\nIssue #10: https://github.com/namespace/project/issues/10\nRelated to PR namespace/other-project#15: https://github.com/namespace/other-project/pull/15\n</code></pre> <p>These \"trailers\" must appear at the end of the body, without any blank lines between them. The trailer title can contain any character except colons <code>:</code>. We expect a full URI for each trailer, not just GitHub autolinks (for example, full GitHub URLs for commits and issues, not the hash or the #issue-number).</p> <p>We do not enforce a line length on commit messages summary and body, but please avoid very long summaries, and very long lines in the body, unless they are part of code blocks that must not be wrapped.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash main\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#exec-1--credits","title":"Credits","text":"<p>These projects were used to build archan. Thank you!</p> <p><code>python</code> | <code>pdm</code> | <code>copier-pdm</code></p>"},{"location":"credits/#exec-1--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>colorama</code> Cross-platform colored terminal text. <code>&gt;=0.4</code> <code>0.4.6</code> BSD License <code>dependenpy</code> Show the inter-dependencies between modules of Python packages. <code>&gt;=3.3</code> <code>3.3.2</code> ISC <code>pyyaml</code> YAML parser and emitter for Python <code>&gt;=5.3</code> <code>6.0.1</code> MIT"},{"location":"credits/#exec-1--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>ansimarkup</code> Produce colored terminal text with an xml-like markup <code>~=1.4</code> <code>1.5.0</code> Revised BSD License <code>appdirs</code> A small Python module for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=1.4</code> <code>1.4.4</code> MIT <code>babel</code> Internationalization utilities <code>~=2.10</code> <code>2.14.0</code> BSD-3-Clause <code>black</code> The uncompromising code formatter. <code>&gt;=23.9</code> <code>23.12.1</code> MIT <code>blacken-docs</code> Run Black on Python code blocks in documentation files. <code>&gt;=1.16</code> <code>1.16.0</code> MIT <code>certifi</code> Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2023.11.17</code> MPL-2.0 <code>charset-normalizer</code> The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&lt;4,&gt;=2</code> <code>3.3.2</code> MIT <code>click</code> Composable command line interface toolkit <code>&gt;=8.0.0</code> <code>8.1.7</code> BSD-3-Clause <code>colorama</code> Cross-platform colored terminal text. <code>; platform_system == \"Windows\"</code> <code>0.4.6</code> BSD License <code>coverage</code> Code coverage measurement for Python <code>[toml]&gt;=5.2.1</code> <code>7.4.0</code> Apache-2.0 <code>csscompressor</code> A python port of YUI CSS Compressor <code>&gt;=0.9.5</code> <code>0.9.5</code> BSD <code>dparse</code> A parser for Python dependency files <code>&gt;=0.6.2</code> <code>0.6.3</code> MIT license <code>duty</code> A simple task runner. <code>&gt;=0.10</code> <code>1.1.0</code> ISC <code>exceptiongroup</code> Backport of PEP 654 (exception groups) <code>&gt;=1.0.0rc8; python_version &lt; \"3.11\"</code> <code>1.2.0</code> ? <code>execnet</code> execnet: rapid multi-Python deployment <code>&gt;=1.1</code> <code>2.0.2</code> MIT License <code>failprint</code> Run a command, print its output only if it fails. <code>!=1.0.0,&gt;=0.11</code> <code>1.0.2</code> ISC <code>ghp-import</code> Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License <code>git-changelog</code> Automatic Changelog generator using Jinja2 templates. <code>&gt;=2.3</code> <code>2.4.0</code> ISC <code>gitdb</code> Git Object Database <code>&lt;5,&gt;=4.0.1</code> <code>4.0.11</code> BSD License <code>gitpython</code> GitPython is a Python library used to interact with Git repositories <code>3.1.41</code> BSD-3-Clause <code>griffe</code> Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=0.37</code> <code>0.38.1</code> ISC <code>htmlmin2</code> An HTML Minifier <code>&gt;=0.1.13</code> <code>0.1.13</code> BSD <code>idna</code> Internationalized Domain Names in Applications (IDNA) <code>&lt;4,&gt;=2.5</code> <code>3.6</code> BSD License <code>importlib-metadata</code> Read metadata from Python packages <code>&gt;=4.3; python_version &lt; \"3.10\"</code> <code>7.0.1</code> ? <code>iniconfig</code> brain-dead simple config-ini parsing <code>2.0.0</code> MIT License <code>jinja2</code> A very fast and expressive template engine. <code>&lt;4,&gt;=2.11</code> <code>3.1.3</code> BSD-3-Clause <code>jsmin</code> JavaScript minifier. <code>&gt;=3.0.1</code> <code>3.0.1</code> MIT License <code>markdown</code> Python implementation of John Gruber's Markdown. <code>&lt;4.0.0,&gt;=3.3.3</code> <code>3.5.2</code> BSD License <code>markdown-callouts</code> Markdown extension: a classier syntax for admonitions <code>&gt;=0.3</code> <code>0.3.0</code> MIT <code>markdown-exec</code> Utilities to execute code blocks in Markdown files. <code>&gt;=1.7</code> <code>1.8.0</code> ISC <code>markupsafe</code> Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0</code> <code>2.1.3</code> BSD-3-Clause <code>mergedeep</code> A deep merge function for \ud83d\udc0d. <code>&gt;=1.3.4</code> <code>1.3.4</code> MIT License <code>mkdocs</code> Project documentation with Markdown. <code>&gt;=1.5</code> <code>1.5.3</code> BSD License <code>mkdocs-coverage</code> MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;=1.0</code> <code>1.0.0</code> ISC <code>mkdocs-gen-files</code> MkDocs plugin to programmatically generate documentation pages during the build <code>&gt;=0.5</code> <code>0.5.0</code> MIT License <code>mkdocs-git-committers-plugin-2</code> An MkDocs plugin to create a list of contributors on the page. The git-committers plugin will seed the template context with a list of GitHub or GitLab committers and other useful GIT info such as last modified date <code>&gt;=1.2</code> <code>2.2.3</code> MIT <code>mkdocs-literate-nav</code> MkDocs plugin to specify the navigation in Markdown instead of YAML <code>&gt;=0.6</code> <code>0.6.1</code> MIT License <code>mkdocs-material</code> Documentation that simply works <code>&gt;=9.4</code> <code>9.5.3</code> MIT License <code>mkdocs-material-extensions</code> Extension pack for Python Markdown and MkDocs Material. <code>~=1.3</code> <code>1.3.1</code> MIT License <code>mkdocs-minify-plugin</code> An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;=0.7</code> <code>0.7.2</code> MIT <code>mkdocstrings</code> Automatic documentation from sources, for MkDocs. <code>[python]&gt;=0.23</code> <code>0.24.0</code> ISC <code>mkdocstrings-python</code> A Python handler for mkdocstrings. <code>&gt;=0.5.2</code> <code>1.8.0.1.5.1</code> ISC <code>mypy</code> Optional static typing for Python <code>&gt;=1.5</code> <code>1.8.0</code> MIT <code>mypy-extensions</code> Type system extensions for programs checked with the mypy type checker. <code>&gt;=0.4.3</code> <code>1.0.0</code> MIT License <code>packaging</code> Core utilities for Python packages <code>&gt;=22.0</code> <code>23.2</code> BSD License <code>paginate</code> Divides large result sets into pages for easier browsing <code>~=0.5</code> <code>0.5.6</code> MIT <code>pathspec</code> Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.9.0</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) <code>platformdirs</code> A small Python package for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=2</code> <code>4.1.0</code> MIT License <code>pluggy</code> plugin and hook calling mechanisms for python <code>&lt;2.0,&gt;=0.12</code> <code>1.3.0</code> MIT <code>ptyprocess</code> Run a subprocess in a pseudo terminal <code>~=0.6; sys_platform != \"win32\"</code> <code>0.7.0</code> ISC License (ISCL) <code>pygments</code> Pygments is a syntax highlighting package written in Python. <code>~=2.16</code> <code>2.17.2</code> BSD-2-Clause <code>pymdown-extensions</code> Extension pack for Python Markdown. <code>&gt;=9</code> <code>10.7</code> MIT License <code>pytest</code> pytest: simple powerful testing with Python <code>&gt;=7.4</code> <code>7.4.4</code> MIT <code>pytest-cov</code> Pytest plugin for measuring coverage. <code>&gt;=4.1</code> <code>4.1.0</code> MIT <code>pytest-randomly</code> Pytest plugin to randomly order tests and control random.seed. <code>&gt;=3.15</code> <code>3.15.0</code> MIT <code>pytest-xdist</code> pytest xdist plugin for distributed testing, most importantly across multiple CPUs <code>&gt;=3.3</code> <code>3.5.0</code> MIT <code>python-dateutil</code> Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.8.2</code> Dual License <code>pytz</code> World timezone definitions, modern and historical <code>&gt;=2015.7; python_version &lt; \"3.9\"</code> <code>2023.3.post1</code> ? <code>pyyaml</code> YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0.1</code> MIT <code>pyyaml-env-tag</code> A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License <code>regex</code> Alternative regular expression module, to replace re. <code>&gt;=2022.4</code> <code>2023.12.25</code> Apache Software License <code>requests</code> Python HTTP for Humans. <code>2.31.0</code> Apache 2.0 <code>ruamel-yaml</code> ruamel.yaml is a YAML parser/emitter that supports roundtrip preservation of comments, seq/map flow style, and map key order <code>&gt;=0.17.21</code> <code>0.18.5</code> MIT license <code>ruamel-yaml-clib</code> C version of reader, parser and emitter for ruamel.yaml derived from libyaml <code>&gt;=0.2.7; platform_python_implementation == \"CPython\" and python_version &lt; \"3.13\"</code> <code>0.2.8</code> MIT <code>ruff</code> An extremely fast Python linter and code formatter, written in Rust. <code>&gt;=0.0</code> <code>0.1.11</code> MIT <code>safety</code> Checks installed dependencies for known vulnerabilities and licenses. <code>&gt;=2.3</code> <code>2.3.4</code> MIT license <code>semver</code> Python helper for Semantic Versioning (https://semver.org) <code>&gt;=2.13</code> <code>3.0.2</code> BSD <code>setuptools</code> Easily download, build, install, upgrade, and uninstall Python packages <code>&gt;=19.3</code> <code>69.0.3</code> MIT License <code>six</code> Python 2 and 3 compatibility utilities <code>&gt;=1.5</code> <code>1.16.0</code> MIT <code>smmap</code> A pure Python implementation of a sliding window memory map manager <code>&lt;6,&gt;=3.0.1</code> <code>5.0.1</code> BSD <code>tomli</code> A lil' TOML parser <code>&gt;=2.0; python_version &lt; '3.11'</code> <code>2.0.1</code> ? <code>types-markdown</code> Typing stubs for Markdown <code>&gt;=3.5</code> <code>3.5.0.20240106</code> Apache-2.0 license <code>types-pyyaml</code> Typing stubs for PyYAML <code>&gt;=6.0</code> <code>6.0.12.12</code> Apache-2.0 license <code>typing-extensions</code> Backported and Experimental Type Hints for Python 3.8+ <code>&gt;=4.0.1; python_version &lt; \"3.11\"</code> <code>4.9.0</code> Python Software Foundation License <code>urllib3</code> HTTP library with thread-safe connection pooling, file post, and more. <code>&lt;3,&gt;=1.21.1</code> <code>2.1.0</code> MIT License <code>watchdog</code> Filesystem events monitoring <code>&gt;=2.0</code> <code>3.0.0</code> Apache License 2.0 <code>zipp</code> Backport of pathlib-compatible object wrapper for zip files <code>&gt;=0.5</code> <code>3.17.0</code> ? <p>More credits from the author</p>"},{"location":"license/","title":"License","text":"<pre><code>ISC License\n\nCopyright (c) 2017, Timoth\u00e9e Mazzucotelli\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n</code></pre>"},{"location":"roadmap/","title":"Roadmap","text":"<p>Archan currently checks for criteria that are only applicable on DSM representing either internal dependencies of an application, or access control rights.</p> <p>In fact, it is possible to represent many different things with DSM. Also, each criterion does not apply to each of these different things. Hence, we can build the following matrix, with the different types of DSM data, and the different criteria to check against the DSMs.</p> <p></p> <p>The arrow going from left to right in the header represents the scale growing up: from the code source to dependency data to network architecture to risk analysis.</p> <p>The blue cells indicate that the criterion can be run on the related type of DSM. As you can see, Open Design criterion can be checked against any type of DSM, as it is just a matter of telling if yes or no the design of the entity is open. At the contrary, Code Clean criterion is only applicable on code source. Least Privileges and Separation of Privileges criteria are only applicable on access control data since it requires roles and privileges data to be checked (software dependencies do not offer such data).</p> <p>However, everything in this matrix is not fixed. We could maybe imagine running a Complete Mediation check on the network architecture or a Layered Architecture check on access control data. The only limit is imagination: what data to present, how to generate it, how to check it.</p> <p>The risk column is a perfect example: we could define risks for pretty much each kind of entity: code source, access control, network architecture..., but against which criteria can we check them? This has yet to be specified.</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li> archan<ul> <li> analysis</li> <li> cli</li> <li> config</li> <li> debug</li> <li> dsm</li> <li> enums</li> <li> errors</li> <li> logging</li> <li> plugins<ul> <li> checkers</li> <li> providers</li> </ul> </li> <li> printing</li> </ul> </li> </ul>"},{"location":"reference/archan/","title":"Index","text":""},{"location":"reference/archan/#archan","title":"archan","text":"<p>Archan package.</p> <p>The purpose of this package is to make possible the analysis of a problem using a DSM (Design Structure Matrix) on which certain criteria will be verified.</p> <p>Modules:</p> <ul> <li> <code>analysis</code>         \u2013          <p>Analysis module.</p> </li> <li> <code>cli</code>         \u2013          <p>Module that contains the command line application.</p> </li> <li> <code>config</code>         \u2013          <p>Configuration module.</p> </li> <li> <code>debug</code>         \u2013          <p>Debugging utilities.</p> </li> <li> <code>dsm</code>         \u2013          <p>DSM module.</p> </li> <li> <code>enums</code>         \u2013          <p>Enumerations module.</p> </li> <li> <code>errors</code>         \u2013          <p>Errors module.</p> </li> <li> <code>logging</code>         \u2013          <p>Logging module.</p> </li> <li> <code>plugins</code>         \u2013          <p>Plugins submodule.</p> </li> <li> <code>printing</code>         \u2013          <p>Printing module.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>Argument</code>         \u2013          <p>Placeholder for name, class, description and default value.</p> </li> <li> <code>Checker</code>         \u2013          <p>Checker class.</p> </li> <li> <code>DesignStructureMatrix</code>         \u2013          <p>Design Structure Matrix class.</p> </li> <li> <code>DomainMappingMatrix</code>         \u2013          <p>Domain Mapping Matrix class.</p> </li> <li> <code>Logger</code>         \u2013          <p>Static class to store loggers.</p> </li> <li> <code>MultipleDomainMatrix</code>         \u2013          <p>Multiple Domain Matrix class.</p> </li> <li> <code>Provider</code>         \u2013          <p>Provider class.</p> </li> </ul>"},{"location":"reference/archan/#archan.Argument","title":"Argument","text":"<pre><code>Argument(\n    name: str,\n    cls: type,\n    description: str,\n    default: Any | None = None,\n)\n</code></pre> <p>             Bases: <code>PrintableArgumentMixin</code></p> <p>Placeholder for name, class, description and default value.</p> <p>Parameters:</p> <ul> <li> <code>name</code>             (<code>str</code>)         \u2013          <p>Name of the argument.</p> </li> <li> <code>cls</code>             (<code>type</code>)         \u2013          <p>Type of the argument.</p> </li> <li> <code>description</code>             (<code>str</code>)         \u2013          <p>Description of the argument.</p> </li> <li> <code>default</code>             (<code>Any | None</code>, default:                 <code>None</code> )         \u2013          <p>Default value for the argument.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>print</code>           \u2013            <p>Print self with optional indent.</p> </li> </ul> Source code in <code>src/archan/plugins/__init__.py</code> <pre><code>def __init__(self, name: str, cls: type, description: str, default: Any | None = None):\n    \"\"\"Initialization method.\n\n    Parameters:\n        name: Name of the argument.\n        cls: Type of the argument.\n        description: Description of the argument.\n        default: Default value for the argument.\n    \"\"\"\n    self.name = name\n    self.cls = cls\n    self.description = description\n    self.default = default\n</code></pre>"},{"location":"reference/archan/#archan.Argument.print","title":"print","text":"<pre><code>print(indent: int = 0) -&gt; None\n</code></pre> <p>Print self with optional indent.</p> <p>Parameters:</p> <ul> <li> <code>indent</code>             (<code>int</code>, default:                 <code>0</code> )         \u2013          <p>Indentation.</p> </li> </ul> Source code in <code>src/archan/printing.py</code> <pre><code>def print(self, indent: int = 0) -&gt; None:  # noqa: A003\n    \"\"\"Print self with optional indent.\n\n    Parameters:\n        indent: Indentation.\n    \"\"\"\n    text = \"{indent}{magenta}{name}{none} ({dim}{cls}{none}, default {dim}{default}{none})\".format(\n        indent=\" \" * indent,\n        dim=Style.DIM,\n        magenta=Fore.MAGENTA,\n        none=Style.RESET_ALL,\n        name=self.name,  # type: ignore[attr-defined]\n        cls=self.cls,  # type: ignore[attr-defined]\n        default=self.default,  # type: ignore[attr-defined]\n    )\n\n    if self.description:  # type: ignore[attr-defined]\n        text += \":\\n\" + pretty_description(self.description, indent=indent + 2)  # type: ignore[attr-defined]\n\n    print(text)\n</code></pre>"},{"location":"reference/archan/#archan.Checker","title":"Checker","text":"<pre><code>Checker(\n    name: str | None = None,\n    description: str | None = None,\n    hint: str | None = None,\n    allow_failure: bool = False,\n    passes: Any | None = None,\n    arguments: dict | None = None,\n)\n</code></pre> <p>             Bases: <code>PrintableNameMixin</code>, <code>PrintablePluginMixin</code></p> <p>Checker class.</p> <p>An instance of Checker implements a check method that analyzes an instance of DSM/DMM/MDM and return a true or false value, with optional message.</p> <p>Parameters:</p> <ul> <li> <code>name</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The checker name.</p> </li> <li> <code>description</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The checker description.</p> </li> <li> <code>hint</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Hint provided for failures.</p> </li> <li> <code>allow_failure</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Still pass if failed or not.</p> </li> <li> <code>passes</code>             (<code>Any | None</code>, default:                 <code>None</code> )         \u2013          <p>Boolean.</p> </li> <li> <code>arguments</code>             (<code>dict | None</code>, default:                 <code>None</code> )         \u2013          <p>Arguments passed to the check method when run.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>check</code>           \u2013            <p>Check the data and return a result.</p> </li> <li> <code>print</code>           \u2013            <p>Print self.</p> </li> <li> <code>print_name</code>           \u2013            <p>Print name with optional indent and end.</p> </li> <li> <code>run</code>           \u2013            <p>Run the check method and format the result for analysis.</p> </li> </ul> Source code in <code>src/archan/plugins/__init__.py</code> <pre><code>def __init__(\n    self,\n    name: str | None = None,\n    description: str | None = None,\n    hint: str | None = None,\n    allow_failure: bool = False,  # noqa: FBT001, FBT002\n    passes: Any | None = None,\n    arguments: dict | None = None,\n):\n    \"\"\"Initialization method.\n\n    Parameters:\n        name: The checker name.\n        description: The checker description.\n        hint: Hint provided for failures.\n        allow_failure: Still pass if failed or not.\n        passes: Boolean.\n        arguments: Arguments passed to the check method when run.\n    \"\"\"\n    if name:\n        self.name = name\n    if description:\n        self.description = description\n    if hint:\n        self.hint = hint\n\n    self.allow_failure = allow_failure\n    self.passes = passes\n    self.arguments = arguments or {}\n    self.result = None\n</code></pre>"},{"location":"reference/archan/#archan.Checker.check","title":"check","text":"<pre><code>check(\n    dsm: DesignStructureMatrix\n    | MultipleDomainMatrix\n    | DomainMappingMatrix,\n    **kwargs: Any\n) -&gt; tuple[Any, str]\n</code></pre> <p>Check the data and return a result.</p> <p>Parameters:</p> <ul> <li> <code>dsm</code>             (<code>DesignStructureMatrix | MultipleDomainMatrix | DomainMappingMatrix</code>)         \u2013          <p>DSM/DMM/MDM instance to check.</p> </li> <li> <code>**kwargs</code>             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional arguments.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>result</code> (            <code>Any</code> )        \u2013          <p>Checker constant or object with a <code>__bool__</code> method.</p> </li> <li> <code>message</code> (            <code>str</code> )        \u2013          <p>Optional messages.</p> </li> </ul> Source code in <code>src/archan/plugins/__init__.py</code> <pre><code>def check(\n    self,\n    dsm: DesignStructureMatrix | MultipleDomainMatrix | DomainMappingMatrix,\n    **kwargs: Any,\n) -&gt; tuple[Any, str]:\n    \"\"\"Check the data and return a result.\n\n    Parameters:\n        dsm: DSM/DMM/MDM instance to check.\n        **kwargs: Additional arguments.\n\n    Returns:\n        result: Checker constant or object with a ``__bool__`` method.\n        message: Optional messages.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/archan/#archan.Checker.print","title":"print","text":"<pre><code>print() -&gt; None\n</code></pre> <p>Print self.</p> Source code in <code>src/archan/printing.py</code> <pre><code>def print(self) -&gt; None:  # noqa: A003\n    \"\"\"Print self.\"\"\"\n    print(\n        f\"{Style.DIM}Identifier:{Style.RESET_ALL} {Fore.CYAN}{self.identifier}{Style.RESET_ALL}\\n\"\n        f\"{Style.DIM}Name:{Style.RESET_ALL} {self.name}\\n\"\n        f\"{Style.DIM}Description:{Style.RESET_ALL}\\n{pretty_description(self.description, indent=2)}\",\n    )\n\n    if hasattr(self, \"argument_list\") and self.argument_list:\n        print(f\"{Style.DIM}Arguments:{Style.RESET_ALL}\")\n        for argument in self.argument_list:\n            argument.print(indent=2)\n</code></pre>"},{"location":"reference/archan/#archan.Checker.print_name","title":"print_name","text":"<pre><code>print_name(indent: int = 0, end: str = '\\n') -&gt; None\n</code></pre> <p>Print name with optional indent and end.</p> <p>Parameters:</p> <ul> <li> <code>indent</code>             (<code>int</code>, default:                 <code>0</code> )         \u2013          <p>Indentation.</p> </li> <li> <code>end</code>             (<code>str</code>, default:                 <code>'\\n'</code> )         \u2013          <p>End of line.</p> </li> </ul> Source code in <code>src/archan/printing.py</code> <pre><code>def print_name(self, indent: int = 0, end: str = \"\\n\") -&gt; None:\n    \"\"\"Print name with optional indent and end.\n\n    Parameters:\n        indent: Indentation.\n        end: End of line.\n    \"\"\"\n    print(Style.BRIGHT + \" \" * indent + self.name, end=end)  # type: ignore[attr-defined]\n</code></pre>"},{"location":"reference/archan/#archan.Checker.run","title":"run","text":"<pre><code>run(\n    data: DesignStructureMatrix\n    | MultipleDomainMatrix\n    | DomainMappingMatrix,\n) -&gt; None\n</code></pre> <p>Run the check method and format the result for analysis.</p> <p>Parameters:</p> <ul> <li> <code>data</code>             (<code>DesignStructureMatrix | MultipleDomainMatrix | DomainMappingMatrix</code>)         \u2013          <p>DSM/DMM/MDM instance to check.</p> </li> </ul> Source code in <code>src/archan/plugins/__init__.py</code> <pre><code>def run(self, data: DesignStructureMatrix | MultipleDomainMatrix | DomainMappingMatrix) -&gt; None:\n    \"\"\"Run the check method and format the result for analysis.\n\n    Parameters:\n        data: DSM/DMM/MDM instance to check.\n    \"\"\"\n    result_type = namedtuple(\"Result\", \"code messages\")  # type: ignore[name-match]  # noqa: PYI024\n\n    if self.passes is True:\n        result = result_type(Checker.Code.PASSED, \"\")\n    elif self.passes is False:\n        result = (\n            result_type(Checker.Code.IGNORED, \"\") if self.allow_failure else result_type(Checker.Code.FAILED, \"\")\n        )\n    else:\n        try:\n            result = self.check(data, **self.arguments)  # type: ignore[assignment]\n        except NotImplementedError:\n            result = result_type(Checker.Code.NOT_IMPLEMENTED, \"\")\n        else:\n            messages = \"\"\n            if isinstance(result, tuple):\n                result, messages = result\n\n            if result not in Checker.Code:\n                result = Checker.Code.PASSED if bool(result) else Checker.Code.FAILED  # type: ignore[assignment]\n\n            if result == Checker.Code.FAILED and self.allow_failure:\n                result = Checker.Code.IGNORED  # type: ignore[assignment]\n\n            result = result_type(result, messages)\n    self.result = result  # type: ignore[assignment]\n</code></pre>"},{"location":"reference/archan/#archan.DesignStructureMatrix","title":"DesignStructureMatrix","text":"<pre><code>DesignStructureMatrix(\n    data: list[list[int | float]],\n    entities: list | None = None,\n    categories: list | None = None,\n)\n</code></pre> <p>             Bases: <code>BaseMatrix</code></p> <p>Design Structure Matrix class.</p> <p>Parameters:</p> <ul> <li> <code>data</code>             (<code>list[list[int | float]]</code>)         \u2013          <p>2-dim array.</p> </li> <li> <code>entities</code>             (<code>list | None</code>, default:                 <code>None</code> )         \u2013          <p>List of entities.</p> </li> <li> <code>categories</code>             (<code>list | None</code>, default:                 <code>None</code> )         \u2013          <p>List of the categories (one per entity).</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>default_entities</code>           \u2013            <p>Default entities used when there are none.</p> </li> <li> <code>transitive_closure</code>           \u2013            <p>Compute the transitive closure of the matrix.</p> </li> <li> <code>validate</code>           \u2013            <p>Base validation + entities = rows.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>columns</code>             (<code>int</code>)         \u2013          <p>Return number of columns in data.</p> </li> <li> <code>rows</code>             (<code>int</code>)         \u2013          <p>Return number of rows in data.</p> </li> <li> <code>size</code>             (<code>tuple[int, int]</code>)         \u2013          <p>Return number of rows and columns in data.</p> </li> </ul> Source code in <code>src/archan/dsm.py</code> <pre><code>def __init__(self, data: list[list[int | float]], entities: list | None = None, categories: list | None = None):\n    \"\"\"Initialization method.\n\n    Parameters:\n        data: 2-dim array.\n        entities: List of entities.\n        categories: List of the categories (one per entity).\n    \"\"\"\n    self.data = data\n    if entities is None:\n        entities = self.default_entities()\n    self.entities = entities\n    if categories is None:\n        categories = []\n    self.categories = categories\n\n    self.validate()\n</code></pre>"},{"location":"reference/archan/#archan.DesignStructureMatrix.columns","title":"columns  <code>property</code>","text":"<pre><code>columns: int\n</code></pre> <p>Return number of columns in data.</p> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>The number of columns.</p> </li> </ul>"},{"location":"reference/archan/#archan.DesignStructureMatrix.rows","title":"rows  <code>property</code>","text":"<pre><code>rows: int\n</code></pre> <p>Return number of rows in data.</p> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>The number of rows.</p> </li> </ul>"},{"location":"reference/archan/#archan.DesignStructureMatrix.size","title":"size  <code>property</code>","text":"<pre><code>size: tuple[int, int]\n</code></pre> <p>Return number of rows and columns in data.</p> <p>Returns:</p> <ul> <li> <code>tuple[int, int]</code>         \u2013          <p>The dimensions of the data.</p> </li> </ul>"},{"location":"reference/archan/#archan.DesignStructureMatrix.default_entities","title":"default_entities","text":"<pre><code>default_entities() -&gt; list[str]\n</code></pre> <p>Default entities used when there are none.</p> <p>Returns:</p> <ul> <li> <code>list[str]</code>         \u2013          <p>The default entities.</p> </li> </ul> Source code in <code>src/archan/dsm.py</code> <pre><code>def default_entities(self) -&gt; list[str]:\n    \"\"\"Default entities used when there are none.\n\n    Returns:\n        The default entities.\n    \"\"\"\n    return [str(_) for _ in range(self.rows)]\n</code></pre>"},{"location":"reference/archan/#archan.DesignStructureMatrix.transitive_closure","title":"transitive_closure","text":"<pre><code>transitive_closure() -&gt; list[list[int]]\n</code></pre> <p>Compute the transitive closure of the matrix.</p> <p>Returns:</p> <ul> <li> <code>list[list[int]]</code>         \u2013          <p>The transitive closure of the matrix.</p> </li> </ul> Source code in <code>src/archan/dsm.py</code> <pre><code>def transitive_closure(self) -&gt; list[list[int]]:\n    \"\"\"Compute the transitive closure of the matrix.\n\n    Returns:\n        The transitive closure of the matrix.\n    \"\"\"\n    data = [[1 if j else 0 for j in i] for i in self.data]\n    for k in range(self.rows):\n        for i in range(self.rows):\n            for j in range(self.rows):\n                if data[i][k] and data[k][j]:\n                    data[i][j] = 1\n    return data\n</code></pre>"},{"location":"reference/archan/#archan.DesignStructureMatrix.validate","title":"validate","text":"<pre><code>validate() -&gt; None\n</code></pre> <p>Base validation + entities = rows.</p> <p>Raises:</p> <ul> <li> <code>DesignStructureMatrixError</code>           \u2013          <p>When number of entities is different than number of rows.</p> </li> </ul> Source code in <code>src/archan/dsm.py</code> <pre><code>def validate(self) -&gt; None:\n    \"\"\"Base validation + entities = rows.\n\n    Raises:\n        DesignStructureMatrixError: When number of entities is different than number of rows.\n    \"\"\"\n    super().validate()\n    nb_entities = len(self.entities)\n    if nb_entities != self.rows:\n        raise self.error(f\"Number of entities: {nb_entities} != number of rows: {self.rows}\")\n</code></pre>"},{"location":"reference/archan/#archan.DomainMappingMatrix","title":"DomainMappingMatrix","text":"<pre><code>DomainMappingMatrix(\n    data: list[list[int | float]],\n    entities: list | None = None,\n    categories: list | None = None,\n)\n</code></pre> <p>             Bases: <code>BaseMatrix</code></p> <p>Domain Mapping Matrix class.</p> <p>Parameters:</p> <ul> <li> <code>data</code>             (<code>list[list[int | float]]</code>)         \u2013          <p>2-dim array.</p> </li> <li> <code>entities</code>             (<code>list | None</code>, default:                 <code>None</code> )         \u2013          <p>List of entities.</p> </li> <li> <code>categories</code>             (<code>list | None</code>, default:                 <code>None</code> )         \u2013          <p>List of the categories (one per entity).</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>default_entities</code>           \u2013            <p>Return range from 0 to rows + columns.</p> </li> <li> <code>validate</code>           \u2013            <p>Base validation + entities = rows + columns.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>columns</code>             (<code>int</code>)         \u2013          <p>Return number of columns in data.</p> </li> <li> <code>rows</code>             (<code>int</code>)         \u2013          <p>Return number of rows in data.</p> </li> <li> <code>size</code>             (<code>tuple[int, int]</code>)         \u2013          <p>Return number of rows and columns in data.</p> </li> </ul> Source code in <code>src/archan/dsm.py</code> <pre><code>def __init__(self, data: list[list[int | float]], entities: list | None = None, categories: list | None = None):\n    \"\"\"Initialization method.\n\n    Parameters:\n        data: 2-dim array.\n        entities: List of entities.\n        categories: List of the categories (one per entity).\n    \"\"\"\n    self.data = data\n    if entities is None:\n        entities = self.default_entities()\n    self.entities = entities\n    if categories is None:\n        categories = []\n    self.categories = categories\n\n    self.validate()\n</code></pre>"},{"location":"reference/archan/#archan.DomainMappingMatrix.columns","title":"columns  <code>property</code>","text":"<pre><code>columns: int\n</code></pre> <p>Return number of columns in data.</p> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>The number of columns.</p> </li> </ul>"},{"location":"reference/archan/#archan.DomainMappingMatrix.rows","title":"rows  <code>property</code>","text":"<pre><code>rows: int\n</code></pre> <p>Return number of rows in data.</p> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>The number of rows.</p> </li> </ul>"},{"location":"reference/archan/#archan.DomainMappingMatrix.size","title":"size  <code>property</code>","text":"<pre><code>size: tuple[int, int]\n</code></pre> <p>Return number of rows and columns in data.</p> <p>Returns:</p> <ul> <li> <code>tuple[int, int]</code>         \u2013          <p>The dimensions of the data.</p> </li> </ul>"},{"location":"reference/archan/#archan.DomainMappingMatrix.default_entities","title":"default_entities","text":"<pre><code>default_entities() -&gt; list[str]\n</code></pre> <p>Return range from 0 to rows + columns.</p> <p>Returns:</p> <ul> <li> <code>list[str]</code>         \u2013          <p>Range from 0 to rows + columns.</p> </li> </ul> Source code in <code>src/archan/dsm.py</code> <pre><code>def default_entities(self) -&gt; list[str]:\n    \"\"\"Return range from 0 to rows + columns.\n\n    Returns:\n        Range from 0 to rows + columns.\n    \"\"\"\n    return [str(_) for _ in range(self.rows + self.columns)]\n</code></pre>"},{"location":"reference/archan/#archan.DomainMappingMatrix.validate","title":"validate","text":"<pre><code>validate() -&gt; None\n</code></pre> <p>Base validation + entities = rows + columns.</p> <p>Raises:</p> <ul> <li> <code>DomainMappingMatrixError</code>           \u2013          <p>When number of entities is different than rows plus columns.</p> </li> </ul> Source code in <code>src/archan/dsm.py</code> <pre><code>def validate(self) -&gt; None:\n    \"\"\"Base validation + entities = rows + columns.\n\n    Raises:\n        DomainMappingMatrixError: When number of entities is different than rows plus columns.\n    \"\"\"\n    super().validate()\n    nb_entities = len(self.entities)\n    if nb_entities != self.rows + self.columns:\n        raise self.error(\n            f\"Number of entities: {nb_entities} != number of rows + \"\n            f\"number of columns: {self.rows}+{self.columns}={self.rows + self.columns}\",\n        )\n</code></pre>"},{"location":"reference/archan/#archan.Logger","title":"Logger","text":"<p>Static class to store loggers.</p> <p>Methods:</p> <ul> <li> <code>get_logger</code>           \u2013            <p>Return a logger.</p> </li> <li> <code>set_level</code>           \u2013            <p>Set level of logging for all loggers.</p> </li> </ul>"},{"location":"reference/archan/#archan.Logger.get_logger","title":"get_logger  <code>staticmethod</code>","text":"<pre><code>get_logger(\n    name: str,\n    level: int | None = None,\n    fmt: str = \":%(lineno)d: %(message)s\",\n) -&gt; Logger\n</code></pre> <p>Return a logger.</p> <p>Parameters:</p> <ul> <li> <code>name</code>             (<code>str</code>)         \u2013          <p>Name to pass to the logging module.</p> </li> <li> <code>level</code>             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>Level of logging.</p> </li> <li> <code>fmt</code>             (<code>str</code>, default:                 <code>':%(lineno)d: %(message)s'</code> )         \u2013          <p>Format string.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Logger</code>         \u2013          <p>Logger from <code>logging.getLogger</code>.</p> </li> </ul> Source code in <code>src/archan/logging.py</code> <pre><code>@staticmethod\ndef get_logger(name: str, level: int | None = None, fmt: str = \":%(lineno)d: %(message)s\") -&gt; logging.Logger:\n    \"\"\"Return a logger.\n\n    Parameters:\n        name: Name to pass to the logging module.\n        level: Level of logging.\n        fmt: Format string.\n\n    Returns:\n        Logger from ``logging.getLogger``.\n    \"\"\"\n    if name not in Logger.loggers:\n        if Logger.level is None and level is None:\n            Logger.level = logging.ERROR\n            level = logging.ERROR\n        elif Logger.level is None:\n            Logger.level = level\n        elif level is None:\n            level = Logger.level\n        logger = logging.getLogger(name)\n        logger_handler = logging.StreamHandler()\n        logger_handler.setFormatter(LoggingFormatter(fmt=name + fmt))\n        logger.addHandler(logger_handler)\n        logger.setLevel(level)  # type: ignore[arg-type]\n        Logger.loggers[name] = logger\n    return Logger.loggers[name]\n</code></pre>"},{"location":"reference/archan/#archan.Logger.set_level","title":"set_level  <code>staticmethod</code>","text":"<pre><code>set_level(level: int) -&gt; None\n</code></pre> <p>Set level of logging for all loggers.</p> <p>Parameters:</p> <ul> <li> <code>level</code>             (<code>int</code>)         \u2013          <p>Level of logging.</p> </li> </ul> Source code in <code>src/archan/logging.py</code> <pre><code>@staticmethod\ndef set_level(level: int) -&gt; None:\n    \"\"\"Set level of logging for all loggers.\n\n    Parameters:\n        level: Level of logging.\n    \"\"\"\n    Logger.level = level\n    for logger in Logger.loggers.values():\n        logger.setLevel(level)\n</code></pre>"},{"location":"reference/archan/#archan.MultipleDomainMatrix","title":"MultipleDomainMatrix","text":"<pre><code>MultipleDomainMatrix(\n    data: list[list[int | float]],\n    entities: list | None = None,\n    categories: list | None = None,\n)\n</code></pre> <p>             Bases: <code>BaseMatrix</code></p> <p>Multiple Domain Matrix class.</p> <p>Parameters:</p> <ul> <li> <code>data</code>             (<code>list[list[int | float]]</code>)         \u2013          <p>2-dim array.</p> </li> <li> <code>entities</code>             (<code>list | None</code>, default:                 <code>None</code> )         \u2013          <p>List of entities.</p> </li> <li> <code>categories</code>             (<code>list | None</code>, default:                 <code>None</code> )         \u2013          <p>List of the categories (one per entity).</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>default_entities</code>           \u2013            <p>Default entities used when there are none.</p> </li> <li> <code>validate</code>           \u2013            <p>Base validation + each cell is instance of DSM or MDM.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>columns</code>             (<code>int</code>)         \u2013          <p>Return number of columns in data.</p> </li> <li> <code>rows</code>             (<code>int</code>)         \u2013          <p>Return number of rows in data.</p> </li> <li> <code>size</code>             (<code>tuple[int, int]</code>)         \u2013          <p>Return number of rows and columns in data.</p> </li> </ul> Source code in <code>src/archan/dsm.py</code> <pre><code>def __init__(self, data: list[list[int | float]], entities: list | None = None, categories: list | None = None):\n    \"\"\"Initialization method.\n\n    Parameters:\n        data: 2-dim array.\n        entities: List of entities.\n        categories: List of the categories (one per entity).\n    \"\"\"\n    self.data = data\n    if entities is None:\n        entities = self.default_entities()\n    self.entities = entities\n    if categories is None:\n        categories = []\n    self.categories = categories\n\n    self.validate()\n</code></pre>"},{"location":"reference/archan/#archan.MultipleDomainMatrix.columns","title":"columns  <code>property</code>","text":"<pre><code>columns: int\n</code></pre> <p>Return number of columns in data.</p> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>The number of columns.</p> </li> </ul>"},{"location":"reference/archan/#archan.MultipleDomainMatrix.rows","title":"rows  <code>property</code>","text":"<pre><code>rows: int\n</code></pre> <p>Return number of rows in data.</p> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>The number of rows.</p> </li> </ul>"},{"location":"reference/archan/#archan.MultipleDomainMatrix.size","title":"size  <code>property</code>","text":"<pre><code>size: tuple[int, int]\n</code></pre> <p>Return number of rows and columns in data.</p> <p>Returns:</p> <ul> <li> <code>tuple[int, int]</code>         \u2013          <p>The dimensions of the data.</p> </li> </ul>"},{"location":"reference/archan/#archan.MultipleDomainMatrix.default_entities","title":"default_entities","text":"<pre><code>default_entities() -&gt; list[str]\n</code></pre> <p>Default entities used when there are none.</p> <p>Returns:</p> <ul> <li> <code>list[str]</code>         \u2013          <p>The default entities.</p> </li> </ul> Source code in <code>src/archan/dsm.py</code> <pre><code>def default_entities(self) -&gt; list[str]:\n    \"\"\"Default entities used when there are none.\n\n    Returns:\n        The default entities.\n    \"\"\"\n    return [str(_) for _ in range(self.rows)]\n</code></pre>"},{"location":"reference/archan/#archan.MultipleDomainMatrix.validate","title":"validate","text":"<pre><code>validate() -&gt; None\n</code></pre> <p>Base validation + each cell is instance of DSM or MDM.</p> <p>Raises:</p> <ul> <li> <code>MultipleDomainMatrixError</code>           \u2013          <p>When diagonal cells are not DSM nor MDM, or when other cells are not DMM nor MDM.</p> </li> </ul> Source code in <code>src/archan/dsm.py</code> <pre><code>def validate(self) -&gt; None:\n    \"\"\"Base validation + each cell is instance of DSM or MDM.\n\n    Raises:\n        MultipleDomainMatrixError: When diagonal cells are not DSM nor MDM, or when other cells are not DMM nor MDM.\n    \"\"\"\n    super().validate()\n    message_dsm = \"Matrix at [%s:%s] is not an instance of DesignStructureMatrix or MultipleDomainMatrix.\"\n    message_ddm = \"Matrix at [%s:%s] is not an instance of DomainMappingMatrix or MultipleDomainMatrix.\"\n    messages = []\n    for line, row in enumerate(self.data):\n        for column, cell in enumerate(row):\n            if line == column:\n                if not isinstance(cell, (DesignStructureMatrix, MultipleDomainMatrix)):\n                    messages.append(message_dsm % (line, column))\n            elif not isinstance(cell, (DomainMappingMatrix, MultipleDomainMatrix)):\n                messages.append(message_ddm % (line, column))\n    if messages:\n        raise self.error(\"\\n\".join(messages))\n</code></pre>"},{"location":"reference/archan/#archan.Provider","title":"Provider","text":"<pre><code>Provider(\n    name: str | None = None,\n    description: str | None = None,\n    arguments: dict | None = None,\n)\n</code></pre> <p>             Bases: <code>PrintableNameMixin</code>, <code>PrintablePluginMixin</code></p> <p>Provider class.</p> <p>An instance of provider implements a get_data method that returns an instance of DSM/DMM/MDM to be checked by an instance of Checker.</p> <p>Parameters:</p> <ul> <li> <code>name</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The provider name.</p> </li> <li> <code>description</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The provider description.</p> </li> <li> <code>arguments</code>             (<code>dict | None</code>, default:                 <code>None</code> )         \u2013          <p>Arguments that will be used for <code>get_data</code> method.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>get_data</code>           \u2013            <p>Abstract method. Return instance of DSM/DMM/MDM.</p> </li> <li> <code>print</code>           \u2013            <p>Print self.</p> </li> <li> <code>print_name</code>           \u2013            <p>Print name with optional indent and end.</p> </li> <li> <code>run</code>           \u2013            <p>Run the get_data method with run arguments, store the result.</p> </li> </ul> Source code in <code>src/archan/plugins/__init__.py</code> <pre><code>def __init__(\n    self,\n    name: str | None = None,\n    description: str | None = None,\n    arguments: dict | None = None,\n) -&gt; None:\n    \"\"\"Initialization method.\n\n    Parameters:\n        name: The provider name.\n        description: The provider description.\n        arguments: Arguments that will be used for `get_data` method.\n    \"\"\"\n    if name:\n        self.name = name\n    if description:\n        self.description = description\n\n    self.arguments = arguments or {}\n    self.data = None\n</code></pre>"},{"location":"reference/archan/#archan.Provider.get_data","title":"get_data","text":"<pre><code>get_data(**kwargs: Any) -&gt; Any\n</code></pre> <p>Abstract method. Return instance of DSM/DMM/MDM.</p> <p>Parameters:</p> <ul> <li> <code>**kwargs</code>             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Keyword arguments.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>NotImplementedError</code>           \u2013          <p>This method must be implemented in subclasses.</p> </li> </ul> Source code in <code>src/archan/plugins/__init__.py</code> <pre><code>def get_data(self, **kwargs: Any) -&gt; Any:\n    \"\"\"Abstract method. Return instance of DSM/DMM/MDM.\n\n    Parameters:\n        **kwargs: Keyword arguments.\n\n    Raises:\n        NotImplementedError: This method must be implemented in subclasses.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/archan/#archan.Provider.print","title":"print","text":"<pre><code>print() -&gt; None\n</code></pre> <p>Print self.</p> Source code in <code>src/archan/printing.py</code> <pre><code>def print(self) -&gt; None:  # noqa: A003\n    \"\"\"Print self.\"\"\"\n    print(\n        f\"{Style.DIM}Identifier:{Style.RESET_ALL} {Fore.CYAN}{self.identifier}{Style.RESET_ALL}\\n\"\n        f\"{Style.DIM}Name:{Style.RESET_ALL} {self.name}\\n\"\n        f\"{Style.DIM}Description:{Style.RESET_ALL}\\n{pretty_description(self.description, indent=2)}\",\n    )\n\n    if hasattr(self, \"argument_list\") and self.argument_list:\n        print(f\"{Style.DIM}Arguments:{Style.RESET_ALL}\")\n        for argument in self.argument_list:\n            argument.print(indent=2)\n</code></pre>"},{"location":"reference/archan/#archan.Provider.print_name","title":"print_name","text":"<pre><code>print_name(indent: int = 0, end: str = '\\n') -&gt; None\n</code></pre> <p>Print name with optional indent and end.</p> <p>Parameters:</p> <ul> <li> <code>indent</code>             (<code>int</code>, default:                 <code>0</code> )         \u2013          <p>Indentation.</p> </li> <li> <code>end</code>             (<code>str</code>, default:                 <code>'\\n'</code> )         \u2013          <p>End of line.</p> </li> </ul> Source code in <code>src/archan/printing.py</code> <pre><code>def print_name(self, indent: int = 0, end: str = \"\\n\") -&gt; None:\n    \"\"\"Print name with optional indent and end.\n\n    Parameters:\n        indent: Indentation.\n        end: End of line.\n    \"\"\"\n    print(Style.BRIGHT + \" \" * indent + self.name, end=end)  # type: ignore[attr-defined]\n</code></pre>"},{"location":"reference/archan/#archan.Provider.run","title":"run","text":"<pre><code>run() -&gt; None\n</code></pre> <p>Run the get_data method with run arguments, store the result.</p> Source code in <code>src/archan/plugins/__init__.py</code> <pre><code>def run(self) -&gt; None:\n    \"\"\"Run the get_data method with run arguments, store the result.\"\"\"\n    self.data = self.get_data(**self.arguments)\n</code></pre>"},{"location":"reference/archan/analysis/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> analysis","text":""},{"location":"reference/archan/analysis/#archan.analysis","title":"analysis","text":"<p>Analysis module.</p> <p>Classes:</p> <ul> <li> <code>Analysis</code>         \u2013          <p>Analysis class.</p> </li> <li> <code>AnalysisGroup</code>         \u2013          <p>Placeholder for groups of providers and checkers.</p> </li> <li> <code>Result</code>         \u2013          <p>Placeholder for analysis results.</p> </li> </ul>"},{"location":"reference/archan/analysis/#archan.analysis.Analysis","title":"Analysis","text":"<pre><code>Analysis(config: Config)\n</code></pre> <p>Analysis class.</p> <p>An instance of Analysis contains a Config object. Providers are first run to generate the data, then these data are all checked against every checker.</p> <p>Parameters:</p> <ul> <li> <code>config</code>             (<code>Config</code>)         \u2013          <p>The configuration object to use for analysis.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>output_json</code>           \u2013            <p>Output analysis results in JSON format.</p> </li> <li> <code>output_tap</code>           \u2013            <p>Output analysis results in TAP format.</p> </li> <li> <code>print_results</code>           \u2013            <p>Print analysis results as text on standard output.</p> </li> <li> <code>run</code>           \u2013            <p>Run the analysis.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>successful</code>             (<code>bool</code>)         \u2013          <p>Property to tell if the run was successful: no failures.</p> </li> </ul> Source code in <code>src/archan/analysis.py</code> <pre><code>def __init__(self, config: Config):\n    \"\"\"Initialization method.\n\n    Parameters:\n        config: The configuration object to use for analysis.\n    \"\"\"\n    self.config = config\n    self.results: list[Result] = []\n</code></pre>"},{"location":"reference/archan/analysis/#archan.analysis.Analysis.successful","title":"successful  <code>property</code>","text":"<pre><code>successful: bool\n</code></pre> <p>Property to tell if the run was successful: no failures.</p> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True if the run was successful.</p> </li> </ul>"},{"location":"reference/archan/analysis/#archan.analysis.Analysis.output_json","title":"output_json","text":"<pre><code>output_json() -&gt; None\n</code></pre> <p>Output analysis results in JSON format.</p> Source code in <code>src/archan/analysis.py</code> <pre><code>def output_json(self) -&gt; None:\n    \"\"\"Output analysis results in JSON format.\"\"\"\n</code></pre>"},{"location":"reference/archan/analysis/#archan.analysis.Analysis.output_tap","title":"output_tap","text":"<pre><code>output_tap() -&gt; None\n</code></pre> <p>Output analysis results in TAP format.</p> Source code in <code>src/archan/analysis.py</code> <pre><code>def output_tap(self) -&gt; None:\n    \"\"\"Output analysis results in TAP format.\"\"\"\n    tracker = Tracker(streaming=True, stream=sys.stdout)\n    for group in self.config.analysis_groups:\n        n_providers = len(group.providers)\n        n_checkers = len(group.checkers)\n        if not group.providers and group.checkers:\n            test_suite = group.name\n            description_lambda = lambda result: result.checker.name  # noqa: E731\n        elif not group.checkers:\n            logger.warning(\"Invalid analysis group (no checkers), skipping\")\n            continue\n        elif n_providers &gt; n_checkers:\n            test_suite = group.checkers[0].name\n            description_lambda = lambda result: result.provider.name  # noqa: E731\n        else:\n            test_suite = group.providers[0].name\n            description_lambda = lambda result: result.checker.name  # noqa: E731\n\n        for result in group.results:\n            description = description_lambda(result)\n            if result.code == ResultCode.PASSED:\n                tracker.add_ok(test_suite, description)\n            elif result.code == ResultCode.IGNORED:\n                tracker.add_ok(test_suite, description + \" (ALLOWED FAILURE)\")\n            elif result.code == ResultCode.NOT_IMPLEMENTED:\n                tracker.add_not_ok(test_suite, description, \"TODO implement the test\")\n            elif result.code == ResultCode.FAILED:\n                message = \"\\n  message: \".join(result.messages.split(\"\\n\"))\n                tracker.add_not_ok(\n                    test_suite,\n                    description,\n                    diagnostics=f\"  ---\\n  message: {message}\\n  hint: {result.checker.hint}\\n  ...\",\n                )\n</code></pre>"},{"location":"reference/archan/analysis/#archan.analysis.Analysis.print_results","title":"print_results","text":"<pre><code>print_results() -&gt; None\n</code></pre> <p>Print analysis results as text on standard output.</p> Source code in <code>src/archan/analysis.py</code> <pre><code>def print_results(self) -&gt; None:\n    \"\"\"Print analysis results as text on standard output.\"\"\"\n    for result in self.results:\n        result.print()\n</code></pre>"},{"location":"reference/archan/analysis/#archan.analysis.Analysis.run","title":"run","text":"<pre><code>run(verbose: bool = True) -&gt; None\n</code></pre> <p>Run the analysis.</p> <p>Generate data from each provider, then check these data with every checker, and store the analysis results.</p> <p>Parameters:</p> <ul> <li> <code>verbose</code>             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to immediately print the results or not.</p> </li> </ul> Source code in <code>src/archan/analysis.py</code> <pre><code>def run(self, verbose: bool = True) -&gt; None:  # noqa: FBT001, FBT002\n    \"\"\"Run the analysis.\n\n    Generate data from each provider, then check these data with every\n    checker, and store the analysis results.\n\n    Parameters:\n        verbose: Whether to immediately print the results or not.\n    \"\"\"\n    self.results.clear()\n\n    for analysis_group in self.config.analysis_groups:\n        if analysis_group.providers:\n            for provider in analysis_group.providers:\n                logger.info(f\"Run provider {provider.identifier}\")\n                provider.run()\n                for checker in analysis_group.checkers:\n                    result = self._get_checker_result(analysis_group, checker, provider)\n                    self.results.append(result)\n                    analysis_group.results.append(result)\n                    if verbose:\n                        result.print()\n        else:\n            for checker in analysis_group.checkers:\n                result = self._get_checker_result(analysis_group, checker, nd=\"no-data-\")\n                self.results.append(result)\n                analysis_group.results.append(result)\n                if verbose:\n                    result.print()\n</code></pre>"},{"location":"reference/archan/analysis/#archan.analysis.AnalysisGroup","title":"AnalysisGroup","text":"<pre><code>AnalysisGroup(\n    name: str | None = None,\n    description: str | None = None,\n    providers: list | None = None,\n    checkers: list | None = None,\n)\n</code></pre> <p>             Bases: <code>PrintableNameMixin</code></p> <p>Placeholder for groups of providers and checkers.</p> <p>Parameters:</p> <ul> <li> <code>name</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The group name.</p> </li> <li> <code>description</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The group description.</p> </li> <li> <code>providers</code>             (<code>list | None</code>, default:                 <code>None</code> )         \u2013          <p>The list of providers.</p> </li> <li> <code>checkers</code>             (<code>list | None</code>, default:                 <code>None</code> )         \u2013          <p>The list of checkers.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>print_name</code>           \u2013            <p>Print name with optional indent and end.</p> </li> </ul> Source code in <code>src/archan/analysis.py</code> <pre><code>def __init__(\n    self,\n    name: str | None = None,\n    description: str | None = None,\n    providers: list | None = None,\n    checkers: list | None = None,\n):\n    \"\"\"Initialization method.\n\n    Parameters:\n        name: The group name.\n        description: The group description.\n        providers: The list of providers.\n        checkers: The list of checkers.\n    \"\"\"\n    self.name = name\n    self.description = description\n    self.providers = providers or []\n    self.checkers = checkers or []\n    self.results: list[Result] = []\n</code></pre>"},{"location":"reference/archan/analysis/#archan.analysis.AnalysisGroup.print_name","title":"print_name","text":"<pre><code>print_name(indent: int = 0, end: str = '\\n') -&gt; None\n</code></pre> <p>Print name with optional indent and end.</p> <p>Parameters:</p> <ul> <li> <code>indent</code>             (<code>int</code>, default:                 <code>0</code> )         \u2013          <p>Indentation.</p> </li> <li> <code>end</code>             (<code>str</code>, default:                 <code>'\\n'</code> )         \u2013          <p>End of line.</p> </li> </ul> Source code in <code>src/archan/printing.py</code> <pre><code>def print_name(self, indent: int = 0, end: str = \"\\n\") -&gt; None:\n    \"\"\"Print name with optional indent and end.\n\n    Parameters:\n        indent: Indentation.\n        end: End of line.\n    \"\"\"\n    print(Style.BRIGHT + \" \" * indent + self.name, end=end)  # type: ignore[attr-defined]\n</code></pre>"},{"location":"reference/archan/analysis/#archan.analysis.Result","title":"Result","text":"<pre><code>Result(\n    group: AnalysisGroup,\n    provider: Provider,\n    checker: Checker,\n    code: int,\n    messages: str,\n)\n</code></pre> <p>             Bases: <code>PrintableResultMixin</code></p> <p>Placeholder for analysis results.</p> <p>Parameters:</p> <ul> <li> <code>group</code>             (<code>AnalysisGroup</code>)         \u2013          <p>Parent group.</p> </li> <li> <code>provider</code>             (<code>Provider</code>)         \u2013          <p>Parent Provider.</p> </li> <li> <code>checker</code>             (<code>Checker</code>)         \u2013          <p>Parent Checker.</p> </li> <li> <code>code</code>             (<code>int</code>)         \u2013          <p>Constant from Checker class.</p> </li> <li> <code>messages</code>             (<code>str</code>)         \u2013          <p>Messages string.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>print</code>           \u2013            <p>Print self with optional indent.</p> </li> </ul> Source code in <code>src/archan/analysis.py</code> <pre><code>def __init__(self, group: AnalysisGroup, provider: Provider, checker: Checker, code: int, messages: str):\n    \"\"\"Initialization method.\n\n    Parameters:\n        group: Parent group.\n        provider: Parent Provider.\n        checker: Parent Checker.\n        code: Constant from Checker class.\n        messages: Messages string.\n    \"\"\"\n    self.group = group\n    self.provider = provider\n    self.checker = checker\n    self.code = code\n    self.messages = messages\n</code></pre>"},{"location":"reference/archan/analysis/#archan.analysis.Result.print","title":"print","text":"<pre><code>print(indent: int = 2) -&gt; None\n</code></pre> <p>Print self with optional indent.</p> <p>Parameters:</p> <ul> <li> <code>indent</code>             (<code>int</code>, default:                 <code>2</code> )         \u2013          <p>Indentation.</p> </li> </ul> Source code in <code>src/archan/printing.py</code> <pre><code>def print(self, indent: int = 2) -&gt; None:  # noqa: A003\n    \"\"\"Print self with optional indent.\n\n    Parameters:\n        indent: Indentation.\n    \"\"\"\n    status = {\n        ResultCode.NOT_IMPLEMENTED: f\"{Fore.YELLOW}not implemented{Style.RESET_ALL}\",\n        ResultCode.IGNORED: f\"{Fore.YELLOW}failed (ignored){Style.RESET_ALL}\",\n        ResultCode.FAILED: f\"{Fore.RED}failed{Style.RESET_ALL}\",\n        ResultCode.PASSED: f\"{Fore.GREEN}passed{Style.RESET_ALL}\",\n    }.get(\n        self.code,  # type: ignore[attr-defined]\n    )\n    print(\n        \"{bold}{group}{provider}{checker}: {none}{status}{none}\".format(\n            bold=Style.BRIGHT,\n            group=(self.group.name + \" \u2013 \") if self.group.name else \"\",  # type: ignore[attr-defined]\n            provider=(self.provider.name + \" \u2013 \") if self.provider else \"\",  # type: ignore[attr-defined]\n            checker=self.checker.name,  # type: ignore[attr-defined]\n            none=Style.RESET_ALL,\n            status=status,\n        ),\n    )\n    if self.messages:  # type: ignore[attr-defined]\n        for message in self.messages.split(\"\\n\"):  # type: ignore[attr-defined]\n            print(pretty_description(message, indent=indent))\n        if self.checker.hint:  # type: ignore[attr-defined]\n            print(pretty_description(\"Hint: \" + self.checker.hint, indent=indent))  # type: ignore[attr-defined]\n</code></pre>"},{"location":"reference/archan/cli/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> cli","text":""},{"location":"reference/archan/cli/#archan.cli","title":"cli","text":"<p>Module that contains the command line application.</p> <p>Functions:</p> <ul> <li> <code>get_parser</code>           \u2013            <p>Return the CLI argument parser.</p> </li> <li> <code>main</code>           \u2013            <p>Run the main program.</p> </li> <li> <code>valid_file</code>           \u2013            <p>Check if given file exists and is a regular file.</p> </li> <li> <code>valid_level</code>           \u2013            <p>Validate the logging level argument for the parser.</p> </li> </ul>"},{"location":"reference/archan/cli/#archan.cli.get_parser","title":"get_parser","text":"<pre><code>get_parser() -&gt; ArgumentParser\n</code></pre> <p>Return the CLI argument parser.</p> <p>Returns:</p> <ul> <li> <code>ArgumentParser</code>         \u2013          <p>An argparse parser.</p> </li> </ul> Source code in <code>src/archan/cli.py</code> <pre><code>def get_parser() -&gt; argparse.ArgumentParser:\n    \"\"\"Return the CLI argument parser.\n\n    Returns:\n        An argparse parser.\n    \"\"\"\n    parser = argparse.ArgumentParser(\n        prog=\"archan\",\n        add_help=False,\n        description=\"Analysis of your architecture strength based on DSM data\",\n    )\n    parser.add_argument(\n        \"-c\",\n        \"--config\",\n        action=\"store\",\n        type=valid_file,\n        dest=\"config_file\",\n        metavar=\"FILE\",\n        help=\"Configuration file to use.\",\n    )\n    parser.add_argument(\n        \"-h\",\n        \"--help\",\n        action=\"help\",\n        default=argparse.SUPPRESS,\n        help=\"Show this help message and exit.\",\n    )\n    parser.add_argument(\n        \"-i\",\n        \"--input\",\n        action=\"store\",\n        type=valid_file,\n        dest=\"input_file\",\n        metavar=\"FILE\",\n        help=\"Input file containing CSV data.\",\n    )\n    parser.add_argument(\n        \"-l\",\n        \"--list-plugins\",\n        action=\"store_true\",\n        dest=\"list_plugins\",\n        default=False,\n        help=\"Show the available plugins. Default: false.\",\n    )\n    parser.add_argument(\n        \"--no-color\",\n        action=\"store_true\",\n        dest=\"no_color\",\n        default=False,\n        help=\"Do not use colors. Default: false.\",\n    )\n    parser.add_argument(\n        \"--no-config\",\n        action=\"store_true\",\n        dest=\"no_config\",\n        default=False,\n        help=\"Do not load configuration from file. Default: false.\",\n    )\n    parser.add_argument(\n        \"-v\",\n        \"--verbose-level\",\n        action=\"store\",\n        dest=\"level\",\n        type=valid_level,\n        default=\"ERROR\",\n        help=\"Level of verbosity.\",\n    )\n    parser.add_argument(\n        \"-V\",\n        \"--version\",\n        action=\"version\",\n        version=f\"archan {debug.get_version()}\",\n        help=\"Show the current version of the program and exit.\",\n    )\n    parser.add_argument(\"--debug-info\", action=_DebugInfo, help=\"Print debug information.\")\n    return parser\n</code></pre>"},{"location":"reference/archan/cli/#archan.cli.main","title":"main","text":"<pre><code>main(args: list[str] | None = None) -&gt; int\n</code></pre> <p>Run the main program.</p> <p>This function is executed when you type <code>archan</code> or <code>python -m archan</code>.</p> <p>Parameters:</p> <ul> <li> <code>args</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Arguments passed from the command line.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>An exit code.</p> </li> </ul> Source code in <code>src/archan/cli.py</code> <pre><code>def main(args: list[str] | None = None) -&gt; int:\n    \"\"\"Run the main program.\n\n    This function is executed when you type `archan` or `python -m archan`.\n\n    Parameters:\n        args: Arguments passed from the command line.\n\n    Returns:\n        An exit code.\n    \"\"\"\n    parser = get_parser()\n    opts = parser.parse_args(args=args)\n    Logger.set_level(opts.level)\n\n    colorama_args = {\"autoreset\": True}\n    if opts.no_color:\n        colorama_args[\"strip\"] = True\n    colorama.init(**colorama_args)\n\n    config = None\n    if opts.no_config:\n        logger.info(\"--no-config flag used, use default configuration\")\n        if opts.input_file:\n            logger.info(f\"Input file specified: {opts.input_file}\")\n            file_path = opts.input_file\n        else:\n            logger.info(\"No input file specified, will read standard input\")\n            file_path = None\n        config = Config.default_config(file_path)\n    else:\n        if opts.config_file:\n            logger.info(f\"Configuration file specified: {opts.config_file}\")\n            config_file = opts.config_file\n        else:\n            logger.info(\"No configuration file specified, searching\")\n            config_file = Config.find()\n        if config_file:\n            logger.info(f\"Load configuration from {config_file}\")\n            config = Config.from_file(config_file)\n        if config is None:\n            logger.info(\"No configuration file found, use default one\")\n            config = Config.default_config()\n\n    logger.debug(f\"Configuration = {config}\")\n    logger.debug(f\"Plugins loaded = {config.plugins}\")\n\n    if opts.list_plugins:\n        logger.info(\"Print list of plugins\")\n        config.print_plugins()\n        return 0\n\n    logger.info(\"Run analysis\")\n    analysis = Analysis(config)\n    try:\n        analysis.run(verbose=False)\n    except KeyboardInterrupt:\n        logger.info(\"Keyboard interruption, aborting\")\n        return 130\n    logger.info(f\"Analysis successful: {analysis.successful}\")\n    logger.info(\"Output results as TAP\")\n    analysis.output_tap()\n    return 0 if analysis.successful else 1\n</code></pre>"},{"location":"reference/archan/cli/#archan.cli.valid_file","title":"valid_file","text":"<pre><code>valid_file(value: str) -&gt; str\n</code></pre> <p>Check if given file exists and is a regular file.</p> <p>Parameters:</p> <ul> <li> <code>value</code>             (<code>str</code>)         \u2013          <p>Path to the file.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ArgumentTypeError</code>           \u2013          <p>When value not valid.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>Original value argument.</p> </li> </ul> Source code in <code>src/archan/cli.py</code> <pre><code>def valid_file(value: str) -&gt; str:\n    \"\"\"Check if given file exists and is a regular file.\n\n    Parameters:\n        value: Path to the file.\n\n    Raises:\n        ArgumentTypeError: When value not valid.\n\n    Returns:\n        Original value argument.\n    \"\"\"\n    if not value:\n        raise argparse.ArgumentTypeError(\"'' is not a valid file path\")\n    if not os.path.exists(value):\n        raise argparse.ArgumentTypeError(f\"{value} is not a valid file path\")\n    if os.path.isdir(value):\n        raise argparse.ArgumentTypeError(f\"{value} is a directory, not a regular file\")\n    return value\n</code></pre>"},{"location":"reference/archan/cli/#archan.cli.valid_level","title":"valid_level","text":"<pre><code>valid_level(value: str) -&gt; str\n</code></pre> <p>Validate the logging level argument for the parser.</p> <p>Parameters:</p> <ul> <li> <code>value</code>             (<code>str</code>)         \u2013          <p>The value provided on the command line.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ArgumentTypeError</code>           \u2013          <p>When value not valid.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>The validated level.</p> </li> </ul> Source code in <code>src/archan/cli.py</code> <pre><code>def valid_level(value: str) -&gt; str:\n    \"\"\"Validate the logging level argument for the parser.\n\n    Parameters:\n        value: The value provided on the command line.\n\n    Raises:\n        ArgumentTypeError: When value not valid.\n\n    Returns:\n        The validated level.\n    \"\"\"\n    value = value.upper()\n    if getattr(logging, value, None) is None:\n        raise argparse.ArgumentTypeError(f\"{value} is not a valid level\")\n    return value\n</code></pre>"},{"location":"reference/archan/config/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> config","text":""},{"location":"reference/archan/config/#archan.config","title":"config","text":"<p>Configuration module.</p> <p>Classes:</p> <ul> <li> <code>Config</code>         \u2013          <p>Configuration class.</p> </li> <li> <code>PluginNotFoundError</code>         \u2013          <p>Exception to raise when a plugin is not found or importable.</p> </li> <li> <code>Plugins</code>         \u2013          <p>Simple class used to store providers and checkers.</p> </li> </ul>"},{"location":"reference/archan/config/#archan.config.Config","title":"Config","text":"<pre><code>Config(config_dict: dict | None = None)\n</code></pre> <p>Configuration class.</p> <p>Parameters:</p> <ul> <li> <code>config_dict</code>             (<code>dict | None</code>, default:                 <code>None</code> )         \u2013          <p>the configuration as a dictionary.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When a wrong type is given for the analysis key.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>checker_from_dict</code>           \u2013            <p>Return a checker instance from a dict object.</p> </li> <li> <code>cleanup_definition</code>           \u2013            <p>Clean-up a definition (remove name, description and arguments).</p> </li> <li> <code>default_config</code>           \u2013            <p>Return a default configuration instance.</p> </li> <li> <code>find</code>           \u2013            <p>Find the configuration file if any.</p> </li> <li> <code>from_file</code>           \u2013            <p>Return a <code>Config</code> instance by reading a configuration file.</p> </li> <li> <code>get_checker</code>           \u2013            <p>Return the checker class corresponding to the given identifier.</p> </li> <li> <code>get_plugin</code>           \u2013            <p>Return the plugin corresponding to the given identifier and type.</p> </li> <li> <code>get_provider</code>           \u2013            <p>Return the provider class corresponding to the given identifier.</p> </li> <li> <code>inflate_analysis_group</code>           \u2013            <p>Inflate a whole analysis group.</p> </li> <li> <code>inflate_checker</code>           \u2013            <p>Shortcut to inflate a checker.</p> </li> <li> <code>inflate_checkers</code>           \u2013            <p>Shortcut to inflate multiple checkers.</p> </li> <li> <code>inflate_nd_checker</code>           \u2013            <p>Inflate a no-data checker from a basic definition.</p> </li> <li> <code>inflate_plugin</code>           \u2013            <p>Inflate a plugin thanks to it's identifier, definition and class.</p> </li> <li> <code>inflate_plugin_dict</code>           \u2013            <p>Inflate a list of strings/dictionaries to a list of plugin instances.</p> </li> <li> <code>inflate_plugin_list</code>           \u2013            <p>Inflate a list of strings/dictionaries to a list of plugin instances.</p> </li> <li> <code>inflate_plugins</code>           \u2013            <p>Inflate multiple plugins based on a list/dict definition.</p> </li> <li> <code>inflate_provider</code>           \u2013            <p>Shortcut to inflate a provider.</p> </li> <li> <code>inflate_providers</code>           \u2013            <p>Shortcut to inflate multiple providers.</p> </li> <li> <code>lint</code>           \u2013            <p>Verify the contents of the configuration dictionary.</p> </li> <li> <code>load_installed_plugins</code>           \u2013            <p>Search and load every installed plugin through entry points.</p> </li> <li> <code>load_local_plugin</code>           \u2013            <p>Import a local plugin accessible through Python path.</p> </li> <li> <code>print_plugins</code>           \u2013            <p>Print the available plugins.</p> </li> <li> <code>provider_from_dict</code>           \u2013            <p>Return a provider instance from a dict object.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>available_checkers</code>             (<code>dict[str, type[Checker]]</code>)         \u2013          <p>Return the available checkers.</p> </li> <li> <code>available_providers</code>             (<code>dict[str, type[Provider]]</code>)         \u2013          <p>Return the available providers.</p> </li> </ul> Source code in <code>src/archan/config.py</code> <pre><code>def __init__(self, config_dict: dict | None = None):\n    \"\"\"Initialize the object.\n\n    Parameters:\n        config_dict: the configuration as a dictionary.\n\n    Raises:\n        ValueError: When a wrong type is given for the analysis key.\n    \"\"\"\n    self.config_dict = deepcopy(config_dict)\n    self.plugins = Config.load_installed_plugins()\n    self.analysis_groups = []\n\n    if not config_dict:\n        return\n\n    analysis = config_dict.get(\"analysis\", {})\n\n    if isinstance(analysis, dict):\n        for group_key, group_def in analysis.items():\n            try:\n                self.analysis_groups.append(self.inflate_analysis_group(group_key, group_def))\n            except ValueError as error:\n                logger.error(\n                    f\"Error while inflating '{group_key}' analysis group. \"\n                    \"The group will not be added to the list. \"\n                    f\"Exception: {error}.\",\n                )\n    else:\n        raise TypeError(f\"{type(analysis)} type is not supported for 'analysis' key, use dict only\")\n</code></pre>"},{"location":"reference/archan/config/#archan.config.Config.available_checkers","title":"available_checkers  <code>property</code>","text":"<pre><code>available_checkers: dict[str, type[Checker]]\n</code></pre> <p>Return the available checkers.</p> <p>Returns:</p> <ul> <li> <code>dict[str, type[Checker]]</code>         \u2013          <p>The available checkers.</p> </li> </ul>"},{"location":"reference/archan/config/#archan.config.Config.available_providers","title":"available_providers  <code>property</code>","text":"<pre><code>available_providers: dict[str, type[Provider]]\n</code></pre> <p>Return the available providers.</p> <p>Returns:</p> <ul> <li> <code>dict[str, type[Provider]]</code>         \u2013          <p>The available providers.</p> </li> </ul>"},{"location":"reference/archan/config/#archan.config.Config.checker_from_dict","title":"checker_from_dict","text":"<pre><code>checker_from_dict(dct: dict) -&gt; Checker | None\n</code></pre> <p>Return a checker instance from a dict object.</p> <p>Parameters:</p> <ul> <li> <code>dct</code>             (<code>dict</code>)         \u2013          <p>The dictionary describing the checker.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Checker | None</code>         \u2013          <p>The checker.</p> </li> </ul> Source code in <code>src/archan/config.py</code> <pre><code>def checker_from_dict(self, dct: dict) -&gt; Checker | None:\n    \"\"\"Return a checker instance from a dict object.\n\n    Parameters:\n        dct: The dictionary describing the checker.\n\n    Returns:\n        The checker.\n    \"\"\"\n    checker_identifier = next(iter(dct.keys()))\n    checker_class = self.get_checker(checker_identifier)\n    if checker_class:\n        return checker_class(**dct[checker_identifier])\n    return None\n</code></pre>"},{"location":"reference/archan/config/#archan.config.Config.cleanup_definition","title":"cleanup_definition  <code>staticmethod</code>","text":"<pre><code>cleanup_definition(definition: dict) -&gt; None\n</code></pre> <p>Clean-up a definition (remove name, description and arguments).</p> <p>Parameters:</p> <ul> <li> <code>definition</code>             (<code>dict</code>)         \u2013          <p>The definition to clean.</p> </li> </ul> Source code in <code>src/archan/config.py</code> <pre><code>@staticmethod\ndef cleanup_definition(definition: dict) -&gt; None:\n    \"\"\"Clean-up a definition (remove name, description and arguments).\n\n    Parameters:\n        definition: The definition to clean.\n    \"\"\"\n    definition.pop(\"name\", \"\")\n    definition.pop(\"description\", \"\")\n    definition.pop(\"arguments\", \"\")\n</code></pre>"},{"location":"reference/archan/config/#archan.config.Config.default_config","title":"default_config  <code>staticmethod</code>","text":"<pre><code>default_config(file_path: str | None = None) -&gt; Config\n</code></pre> <p>Return a default configuration instance.</p> <p>Parameters:</p> <ul> <li> <code>file_path</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Optional file path to configuration file.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Config</code>         \u2013          <p>The config object.</p> </li> </ul> Source code in <code>src/archan/config.py</code> <pre><code>@staticmethod\ndef default_config(file_path: str | None = None) -&gt; Config:\n    \"\"\"Return a default configuration instance.\n\n    Parameters:\n        file_path: Optional file path to configuration file.\n\n    Returns:\n        The config object.\n    \"\"\"\n    return Config(\n        {\n            \"analysis\": {\n                \"archan.CSVInput\": {\n                    \"arguments\": {\"file_path\": file_path},\n                    \"checkers\": (\n                        \"archan.CompleteMediation\",\n                        \"archan.EconomyOfMechanism\",\n                        \"archan.LeastCommonMechanism\",\n                        \"archan.LayeredArchitecture\",\n                    ),\n                },\n            },\n        },\n    )\n</code></pre>"},{"location":"reference/archan/config/#archan.config.Config.find","title":"find  <code>staticmethod</code>","text":"<pre><code>find() -&gt; str | None\n</code></pre> <p>Find the configuration file if any.</p> <p>Returns:</p> <ul> <li> <code>str | None</code>         \u2013          <p>The path to a configuration file.</p> </li> </ul> Source code in <code>src/archan/config.py</code> <pre><code>@staticmethod\ndef find() -&gt; str | None:\n    \"\"\"Find the configuration file if any.\n\n    Returns:\n        The path to a configuration file.\n    \"\"\"\n    names = (\"archan.yml\", \"archan.yaml\", \".archan.yml\", \".archan.yaml\")\n    current_dir = os.getcwd()\n    configconfig_file = os.path.join(current_dir, \".configconfig\")\n    default_config_dir = os.path.join(current_dir, \"config\")\n    if os.path.isfile(configconfig_file):\n        logger.debug(f\"Reading {configconfig_file} to get config folder path\")\n        with open(configconfig_file) as stream:\n            config_dir = os.path.join(current_dir, stream.read()).strip()\n    elif os.path.isdir(default_config_dir):\n        config_dir = default_config_dir\n    else:\n        config_dir = current_dir\n    logger.debug(f\"Config folder = {config_dir}\")\n    for name in names:\n        config_file = os.path.join(config_dir, name)\n        logger.debug(f\"Searching for config file at {config_file}\")\n        if os.path.isfile(config_file):\n            logger.debug(f\"Found {config_file}\")\n            return config_file\n    logger.debug(\"No config file found\")\n    return None\n</code></pre>"},{"location":"reference/archan/config/#archan.config.Config.from_file","title":"from_file  <code>staticmethod</code>","text":"<pre><code>from_file(path: str) -&gt; Config\n</code></pre> <p>Return a <code>Config</code> instance by reading a configuration file.</p> <p>Parameters:</p> <ul> <li> <code>path</code>             (<code>str</code>)         \u2013          <p>The config file path.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Config</code>         \u2013          <p>The config object.</p> </li> </ul> Source code in <code>src/archan/config.py</code> <pre><code>@staticmethod\ndef from_file(path: str) -&gt; Config:\n    \"\"\"Return a ``Config`` instance by reading a configuration file.\n\n    Parameters:\n        path: The config file path.\n\n    Returns:\n        The config object.\n    \"\"\"\n    with open(path) as stream:\n        obj = yaml.safe_load(stream)\n    Config.lint(obj)\n    return Config(config_dict=obj)\n</code></pre>"},{"location":"reference/archan/config/#archan.config.Config.get_checker","title":"get_checker","text":"<pre><code>get_checker(identifier: str) -&gt; type[Checker]\n</code></pre> <p>Return the checker class corresponding to the given identifier.</p> <p>Parameters:</p> <ul> <li> <code>identifier</code>             (<code>str</code>)         \u2013          <p>The checker identifier.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>type[Checker]</code>         \u2013          <p>The checker.</p> </li> </ul> Source code in <code>src/archan/config.py</code> <pre><code>def get_checker(self, identifier: str) -&gt; type[Checker]:\n    \"\"\"Return the checker class corresponding to the given identifier.\n\n    Parameters:\n        identifier: The checker identifier.\n\n    Returns:\n        The checker.\n    \"\"\"\n    return self.get_plugin(identifier, cls=\"checker\")  # type: ignore[arg-type,return-value]\n</code></pre>"},{"location":"reference/archan/config/#archan.config.Config.get_plugin","title":"get_plugin","text":"<pre><code>get_plugin(\n    identifier: str, cls: type | None = None\n) -&gt; type[Checker | Provider]\n</code></pre> <p>Return the plugin corresponding to the given identifier and type.</p> <p>Parameters:</p> <ul> <li> <code>identifier</code>             (<code>str</code>)         \u2013          <p>Identifier of the plugin.</p> </li> <li> <code>cls</code>             (<code>type | None</code>, default:                 <code>None</code> )         \u2013          <p>One of checker / provider.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>type[Checker | Provider]</code>         \u2013          <p>Checker/Provider: plugin class.</p> </li> </ul> Source code in <code>src/archan/config.py</code> <pre><code>def get_plugin(self, identifier: str, cls: type | None = None) -&gt; type[Checker | Provider]:\n    \"\"\"Return the plugin corresponding to the given identifier and type.\n\n    Parameters:\n        identifier: Identifier of the plugin.\n        cls: One of checker / provider.\n\n    Returns:\n        Checker/Provider: plugin class.\n    \"\"\"\n    if (cls is None or cls == \"provider\") and identifier in self.available_providers:\n        return self.available_providers[identifier]\n    if (cls is None or cls == \"checker\") and identifier in self.available_checkers:\n        return self.available_checkers[identifier]\n    return Config.load_local_plugin(identifier)\n</code></pre>"},{"location":"reference/archan/config/#archan.config.Config.get_provider","title":"get_provider","text":"<pre><code>get_provider(identifier: str) -&gt; type[Provider]\n</code></pre> <p>Return the provider class corresponding to the given identifier.</p> <p>Parameters:</p> <ul> <li> <code>identifier</code>             (<code>str</code>)         \u2013          <p>The provider identifier.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>type[Provider]</code>         \u2013          <p>The provider.</p> </li> </ul> Source code in <code>src/archan/config.py</code> <pre><code>def get_provider(self, identifier: str) -&gt; type[Provider]:\n    \"\"\"Return the provider class corresponding to the given identifier.\n\n    Parameters:\n        identifier: The provider identifier.\n\n    Returns:\n        The provider.\n    \"\"\"\n    return self.get_plugin(identifier, cls=\"provider\")  # type: ignore[arg-type,return-value]\n</code></pre>"},{"location":"reference/archan/config/#archan.config.Config.inflate_analysis_group","title":"inflate_analysis_group","text":"<pre><code>inflate_analysis_group(\n    identifier: str, definition: dict\n) -&gt; AnalysisGroup\n</code></pre> <p>Inflate a whole analysis group.</p> <p>An analysis group is a section defined in the YAML file.</p> <p>Parameters:</p> <ul> <li> <code>identifier</code>             (<code>str</code>)         \u2013          <p>The group identifier.</p> </li> <li> <code>definition</code>             (<code>dict</code>)         \u2013          <p>The group definition.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>AnalysisGroup</code>         \u2013          <p>An instance of AnalysisGroup.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When identifier targets a plugin of a certain type, and the definition does not contain the entry for the other-type plugins (providers &lt;-&gt; checkers).</p> </li> </ul> Source code in <code>src/archan/config.py</code> <pre><code>def inflate_analysis_group(self, identifier: str, definition: dict) -&gt; AnalysisGroup:\n    \"\"\"Inflate a whole analysis group.\n\n    An analysis group is a section defined in the YAML file.\n\n    Parameters:\n        identifier: The group identifier.\n        definition: The group definition.\n\n    Returns:\n        An instance of AnalysisGroup.\n\n    Raises:\n        ValueError: When identifier targets a plugin of a certain type,\n            and the definition does not contain the entry for the\n            other-type plugins (providers &lt;-&gt; checkers).\n    \"\"\"\n    providers_definition = definition.pop(\"providers\", None)\n    checkers_definition = definition.pop(\"checkers\", None)\n\n    analysis_group = AnalysisGroup()\n\n    try:\n        first_plugin = self.inflate_plugin(identifier, definition)\n    except PluginNotFoundError as error:\n        logger.warning(\n            f\"Could not find any plugin identified by {identifier}, considering entry as group name. Exception: {error}.\",\n        )\n\n        analysis_group.name = definition.pop(\"name\", identifier)\n        analysis_group.description = definition.pop(\"description\", None)\n\n        if bool(providers_definition) != bool(checkers_definition):\n            raise ValueError(\n                \"when declaring an analysis group with a name, you must \"\n                'either declare both \"providers\" and \"checkers\" or none.',\n            ) from error\n\n        if providers_definition and checkers_definition:\n            analysis_group.providers.extend(self.inflate_providers(providers_definition))\n            analysis_group.checkers.extend(self.inflate_checkers(checkers_definition))\n    else:\n        if isinstance(first_plugin, Checker):\n            analysis_group.checkers.append(first_plugin)\n\n            if providers_definition is None:\n                raise ValueError(\n                    \"when declaring an analysis group with a checker \"\n                    \"identifier, you must also declare providers with \"\n                    'the \"providers\" key.',\n                )\n\n            analysis_group.providers.extend(self.inflate_providers(providers_definition))\n\n        elif isinstance(first_plugin, Provider):\n            analysis_group.providers.append(first_plugin)\n\n            if checkers_definition is None:\n                raise ValueError(\n                    \"when declaring an analysis group with a provider \"\n                    \"identifier, you must also declare checkers with \"\n                    'the \"checkers\" key.',\n                )\n\n            analysis_group.checkers.extend(self.inflate_checkers(checkers_definition))\n\n    self.cleanup_definition(definition)\n\n    for nd_identifier, nd_definition in definition.items():\n        analysis_group.checkers.append(self.inflate_nd_checker(nd_identifier, nd_definition))\n\n    return analysis_group\n</code></pre>"},{"location":"reference/archan/config/#archan.config.Config.inflate_checker","title":"inflate_checker","text":"<pre><code>inflate_checker(\n    identifier: str, definition: dict | None = None\n) -&gt; Checker\n</code></pre> <p>Shortcut to inflate a checker.</p> <p>Parameters:</p> <ul> <li> <code>identifier</code>             (<code>str</code>)         \u2013          <p>The checker identifier.</p> </li> <li> <code>definition</code>             (<code>dict | None</code>, default:                 <code>None</code> )         \u2013          <p>The checker definition.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Checker</code>         \u2013          <p>A checker.</p> </li> </ul> Source code in <code>src/archan/config.py</code> <pre><code>def inflate_checker(self, identifier: str, definition: dict | None = None) -&gt; Checker:\n    \"\"\"Shortcut to inflate a checker.\n\n    Parameters:\n        identifier: The checker identifier.\n        definition: The checker definition.\n\n    Returns:\n        A checker.\n    \"\"\"\n    return self.inflate_plugin(identifier, definition, \"checker\")  # type: ignore[return-value]\n</code></pre>"},{"location":"reference/archan/config/#archan.config.Config.inflate_checkers","title":"inflate_checkers","text":"<pre><code>inflate_checkers(\n    checkers_definition: list | dict,\n) -&gt; list[Checker]\n</code></pre> <p>Shortcut to inflate multiple checkers.</p> <p>Parameters:</p> <ul> <li> <code>checkers_definition</code>             (<code>list | dict</code>)         \u2013          <p>The checkers definitions.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[Checker]</code>         \u2013          <p>Multiple checkers.</p> </li> </ul> Source code in <code>src/archan/config.py</code> <pre><code>def inflate_checkers(self, checkers_definition: list | dict) -&gt; list[Checker]:\n    \"\"\"Shortcut to inflate multiple checkers.\n\n    Parameters:\n        checkers_definition: The checkers definitions.\n\n    Returns:\n        Multiple checkers.\n    \"\"\"\n    return self.inflate_plugins(checkers_definition, self.inflate_checker)  # type: ignore[return-value]\n</code></pre>"},{"location":"reference/archan/config/#archan.config.Config.inflate_nd_checker","title":"inflate_nd_checker  <code>staticmethod</code>","text":"<pre><code>inflate_nd_checker(\n    identifier: str, definition: bool | dict\n) -&gt; Checker\n</code></pre> <p>Inflate a no-data checker from a basic definition.</p> <p>Parameters:</p> <ul> <li> <code>identifier</code>             (<code>str</code>)         \u2013          <p>The no-data checker identifier / name.</p> </li> <li> <code>definition</code>             (<code>bool | dict</code>)         \u2013          <p>A boolean acting as \"passes\" or a full dict definition with \"passes\" and \"allow_failure\".</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Checker</code>         \u2013          <p>A checker instance.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When the definition type is not bool or dict.</p> </li> </ul> Source code in <code>src/archan/config.py</code> <pre><code>@staticmethod\ndef inflate_nd_checker(identifier: str, definition: bool | dict) -&gt; Checker:\n    \"\"\"Inflate a no-data checker from a basic definition.\n\n    Parameters:\n        identifier: The no-data checker identifier / name.\n        definition: A boolean acting as \"passes\" or a full\n            dict definition with \"passes\" and \"allow_failure\".\n\n    Returns:\n        A checker instance.\n\n    Raises:\n        ValueError: When the definition type is not bool or dict.\n    \"\"\"\n    if isinstance(definition, bool):\n        return Checker(name=identifier, passes=definition)\n    if isinstance(definition, dict):\n        return Checker(definition.pop(\"name\", identifier), **definition)\n    raise ValueError(f\"{type(definition)} type is not supported for no-data checkers, use bool or dict\")\n</code></pre>"},{"location":"reference/archan/config/#archan.config.Config.inflate_plugin","title":"inflate_plugin","text":"<pre><code>inflate_plugin(\n    identifier: str,\n    definition: dict | None = None,\n    cls: str | None = None,\n) -&gt; Checker | Provider\n</code></pre> <p>Inflate a plugin thanks to it's identifier, definition and class.</p> <p>Parameters:</p> <ul> <li> <code>identifier</code>             (<code>str</code>)         \u2013          <p>The plugin identifier.</p> </li> <li> <code>definition</code>             (<code>dict | None</code>, default:                 <code>None</code> )         \u2013          <p>The kwargs to instantiate the plugin with.</p> </li> <li> <code>cls</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>\"provider\", \"checker\", or None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Checker | Provider</code>         \u2013          <p>Instance of plugin.</p> </li> </ul> Source code in <code>src/archan/config.py</code> <pre><code>def inflate_plugin(\n    self,\n    identifier: str,\n    definition: dict | None = None,\n    cls: str | None = None,\n) -&gt; Checker | Provider:\n    \"\"\"Inflate a plugin thanks to it's identifier, definition and class.\n\n    Parameters:\n        identifier: The plugin identifier.\n        definition: The kwargs to instantiate the plugin with.\n        cls: \"provider\", \"checker\", or None.\n\n    Returns:\n        Instance of plugin.\n    \"\"\"\n    real_cls = self.get_plugin(identifier, cls)  # type: ignore[arg-type]\n    # TODO: implement re-usability of plugins?\n    # same instances shared across analyses (to avoid re-computing stuff)\n    return real_cls(**definition or {})\n</code></pre>"},{"location":"reference/archan/config/#archan.config.Config.inflate_plugin_dict","title":"inflate_plugin_dict  <code>staticmethod</code>","text":"<pre><code>inflate_plugin_dict(\n    plugin_dict: dict, inflate_plugin: Callable\n) -&gt; list[Checker | Provider]\n</code></pre> <p>Inflate a list of strings/dictionaries to a list of plugin instances.</p> <p>Parameters:</p> <ul> <li> <code>plugin_dict</code>             (<code>dict</code>)         \u2013          <p>A dict of dict.</p> </li> <li> <code>inflate_plugin</code>             (<code>Callable</code>)         \u2013          <p>The method to inflate the plugin.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[Checker | Provider]</code>         \u2013          <p>A plugin instances list.</p> </li> </ul> Source code in <code>src/archan/config.py</code> <pre><code>@staticmethod\ndef inflate_plugin_dict(plugin_dict: dict, inflate_plugin: Callable) -&gt; list[Checker | Provider]:\n    \"\"\"Inflate a list of strings/dictionaries to a list of plugin instances.\n\n    Parameters:\n        plugin_dict: A dict of dict.\n        inflate_plugin: The method to inflate the plugin.\n\n    Returns:\n        A plugin instances list.\n    \"\"\"\n    plugins = []\n    for identifier, definition in plugin_dict.items():\n        try:\n            plugins.append(inflate_plugin(identifier, definition))\n        except PluginNotFoundError as error:\n            logger.error(f\"Could not import plugin identified by {identifier}. Exception: {error}\")\n    return plugins\n</code></pre>"},{"location":"reference/archan/config/#archan.config.Config.inflate_plugin_list","title":"inflate_plugin_list  <code>staticmethod</code>","text":"<pre><code>inflate_plugin_list(\n    plugin_list: list, inflate_plugin: Callable\n) -&gt; list[Checker | Provider]\n</code></pre> <p>Inflate a list of strings/dictionaries to a list of plugin instances.</p> <p>Parameters:</p> <ul> <li> <code>plugin_list</code>             (<code>list</code>)         \u2013          <p>a list of str/dict.</p> </li> <li> <code>inflate_plugin</code>             (<code>Callable</code>)         \u2013          <p>the method to inflate the plugin.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[Checker | Provider]</code>         \u2013          <p>A plugin instances list.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When a dictionary item contains more than one key.</p> </li> </ul> Source code in <code>src/archan/config.py</code> <pre><code>@staticmethod\ndef inflate_plugin_list(plugin_list: list, inflate_plugin: Callable) -&gt; list[Checker | Provider]:\n    \"\"\"Inflate a list of strings/dictionaries to a list of plugin instances.\n\n    Parameters:\n        plugin_list: a list of str/dict.\n        inflate_plugin: the method to inflate the plugin.\n\n    Returns:\n        A plugin instances list.\n\n    Raises:\n        ValueError: When a dictionary item contains more than one key.\n    \"\"\"\n    plugins = []\n    for plugin_def in plugin_list:\n        if isinstance(plugin_def, str):\n            try:\n                plugins.append(inflate_plugin(plugin_def))\n            except PluginNotFoundError as error:\n                logger.error(f\"Could not import plugin identified by {plugin_def}. Exception: {error}.\")\n        elif isinstance(plugin_def, dict):\n            if len(plugin_def) &gt; 1:\n                raise ValueError(\"When using a plugin list, each dictionary item must contain only one key.\")\n            identifier = next(iter(plugin_def.keys()))\n            definition = plugin_def[identifier]\n            try:\n                plugins.append(inflate_plugin(identifier, definition))\n            except PluginNotFoundError as error:\n                logger.error(\n                    f\"Could not import plugin identified by {identifier}. \"\n                    f\"Inflate method: {inflate_plugin}. Exception: {error}.\",\n                )\n    return plugins\n</code></pre>"},{"location":"reference/archan/config/#archan.config.Config.inflate_plugins","title":"inflate_plugins","text":"<pre><code>inflate_plugins(\n    plugins_definition: list | dict,\n    inflate_method: Callable,\n) -&gt; list[Checker | Provider]\n</code></pre> <p>Inflate multiple plugins based on a list/dict definition.</p> <p>Parameters:</p> <ul> <li> <code>plugins_definition</code>             (<code>list | dict</code>)         \u2013          <p>The plugins definitions.</p> </li> <li> <code>inflate_method</code>             (<code>Callable</code>)         \u2013          <p>The method to indlate each plugin.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[Checker | Provider]</code>         \u2013          <p>A list of plugin instances.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When the definition type is not list or dict.</p> </li> </ul> Source code in <code>src/archan/config.py</code> <pre><code>def inflate_plugins(\n    self,\n    plugins_definition: list | dict,\n    inflate_method: Callable,\n) -&gt; list[Checker | Provider]:\n    \"\"\"Inflate multiple plugins based on a list/dict definition.\n\n    Parameters:\n        plugins_definition: The plugins definitions.\n        inflate_method: The method to indlate each plugin.\n\n    Returns:\n        A list of plugin instances.\n\n    Raises:\n        ValueError: When the definition type is not list or dict.\n    \"\"\"\n    if isinstance(plugins_definition, (list, tuple)):\n        return self.inflate_plugin_list(plugins_definition, inflate_method)\n    if isinstance(plugins_definition, dict):\n        return self.inflate_plugin_dict(plugins_definition, inflate_method)\n    raise ValueError(f\"{type(plugins_definition)} type is not supported for a plugin list, use list or dict\")\n</code></pre>"},{"location":"reference/archan/config/#archan.config.Config.inflate_provider","title":"inflate_provider","text":"<pre><code>inflate_provider(\n    identifier: str, definition: dict | None = None\n) -&gt; Provider\n</code></pre> <p>Shortcut to inflate a provider.</p> <p>Parameters:</p> <ul> <li> <code>identifier</code>             (<code>str</code>)         \u2013          <p>The provider identifier.</p> </li> <li> <code>definition</code>             (<code>dict | None</code>, default:                 <code>None</code> )         \u2013          <p>The provider definition.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Provider</code>         \u2013          <p>A provider.</p> </li> </ul> Source code in <code>src/archan/config.py</code> <pre><code>def inflate_provider(self, identifier: str, definition: dict | None = None) -&gt; Provider:\n    \"\"\"Shortcut to inflate a provider.\n\n    Parameters:\n        identifier: The provider identifier.\n        definition: The provider definition.\n\n    Returns:\n        A provider.\n    \"\"\"\n    return self.inflate_plugin(identifier, definition, \"provider\")  # type: ignore[return-value]\n</code></pre>"},{"location":"reference/archan/config/#archan.config.Config.inflate_providers","title":"inflate_providers","text":"<pre><code>inflate_providers(\n    providers_definition: list | dict,\n) -&gt; list[Provider]\n</code></pre> <p>Shortcut to inflate multiple providers.</p> <p>Parameters:</p> <ul> <li> <code>providers_definition</code>             (<code>list | dict</code>)         \u2013          <p>The providers definitions.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[Provider]</code>         \u2013          <p>Multiple providers.</p> </li> </ul> Source code in <code>src/archan/config.py</code> <pre><code>def inflate_providers(self, providers_definition: list | dict) -&gt; list[Provider]:\n    \"\"\"Shortcut to inflate multiple providers.\n\n    Parameters:\n        providers_definition: The providers definitions.\n\n    Returns:\n        Multiple providers.\n    \"\"\"\n    return self.inflate_plugins(providers_definition, self.inflate_provider)  # type: ignore[return-value]\n</code></pre>"},{"location":"reference/archan/config/#archan.config.Config.lint","title":"lint  <code>staticmethod</code>","text":"<pre><code>lint(config: dict) -&gt; None\n</code></pre> <p>Verify the contents of the configuration dictionary.</p> <p>Parameters:</p> <ul> <li> <code>config</code>             (<code>dict</code>)         \u2013          <p>A configuration dictionary.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ConfigError</code>           \u2013          <p>If the config object is not a dictionary, or doesn't have an 'analysis' item.</p> </li> </ul> Source code in <code>src/archan/config.py</code> <pre><code>@staticmethod\ndef lint(config: dict) -&gt; None:\n    \"\"\"Verify the contents of the configuration dictionary.\n\n    Parameters:\n        config: A configuration dictionary.\n\n    Raises:\n        ConfigError: If the config object is not a dictionary, or doesn't have an 'analysis' item.\n    \"\"\"\n    if not isinstance(config, dict):\n        raise ConfigError(\"config must be a dict\")\n    if \"analysis\" not in config:\n        raise ConfigError('config must have \"analysis\" item')\n</code></pre>"},{"location":"reference/archan/config/#archan.config.Config.load_installed_plugins","title":"load_installed_plugins  <code>staticmethod</code>","text":"<pre><code>load_installed_plugins() -&gt; Plugins\n</code></pre> <p>Search and load every installed plugin through entry points.</p> <p>Returns:</p> <ul> <li> <code>Plugins</code>         \u2013          <p>Providers and checkers.</p> </li> </ul> Source code in <code>src/archan/config.py</code> <pre><code>@staticmethod\ndef load_installed_plugins() -&gt; Plugins:\n    \"\"\"Search and load every installed plugin through entry points.\n\n    Returns:\n        Providers and checkers.\n    \"\"\"\n    providers = {}\n    checkers = {}\n    entrypoints = entry_points()\n\n    # TODO: Remove first block once support for Python &lt; 3.12 is dropped.\n    if sys.version_info &lt; (3, 12):\n        eps = next(eps for group, eps in entrypoints.items() if group.startswith(\"archan\"))\n    else:\n        eps = entrypoints.select(group=\"archan\")\n\n    for entry_point in eps:\n        obj = entry_point.load()\n        if issubclass(obj, Provider):\n            providers[entry_point.name] = obj\n        elif issubclass(obj, Checker):\n            checkers[entry_point.name] = obj\n    return Plugins(providers=providers, checkers=checkers)\n</code></pre>"},{"location":"reference/archan/config/#archan.config.Config.load_local_plugin","title":"load_local_plugin  <code>staticmethod</code>","text":"<pre><code>load_local_plugin(name: str) -&gt; type[Checker | Provider]\n</code></pre> <p>Import a local plugin accessible through Python path.</p> <p>Parameters:</p> <ul> <li> <code>name</code>             (<code>str</code>)         \u2013          <p>Dotted path to the plugin.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>PluginNotFoundError</code>           \u2013          <p>When the given plugin could not be found.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>type[Checker | Provider]</code>         \u2013          <p>The plugin object.</p> </li> </ul> Source code in <code>src/archan/config.py</code> <pre><code>@staticmethod\ndef load_local_plugin(name: str) -&gt; type[Checker | Provider]:\n    \"\"\"Import a local plugin accessible through Python path.\n\n    Parameters:\n        name: Dotted path to the plugin.\n\n    Raises:\n        PluginNotFoundError: When the given plugin could not be found.\n\n    Returns:\n        The plugin object.\n    \"\"\"\n    module_name = \".\".join(name.split(\".\")[:-1])\n    try:\n        module_obj = importlib.import_module(name=module_name)\n    except (ImportError, AttributeError, ValueError) as error:\n        raise PluginNotFoundError(error) from error\n    return getattr(module_obj, name.split(\".\")[-1])\n</code></pre>"},{"location":"reference/archan/config/#archan.config.Config.print_plugins","title":"print_plugins","text":"<pre><code>print_plugins() -&gt; None\n</code></pre> <p>Print the available plugins.</p> Source code in <code>src/archan/config.py</code> <pre><code>def print_plugins(self) -&gt; None:\n    \"\"\"Print the available plugins.\"\"\"\n    width = console_width()\n    line = Style.BRIGHT + \"=\" * width + \"\\n\"\n    middle = int(width / 2)\n    if self.available_providers:\n        print(line + \" \" * middle + \"PROVIDERS\")  # noqa: T201\n        for provider in sorted(self.available_providers.values(), key=lambda prv: prv.identifier):\n            provider().print()\n            print()  # noqa: T201\n    if self.available_checkers:\n        print(line + \" \" * middle + \"CHECKERS\")  # noqa: T201\n        for checker in sorted(self.available_checkers.values(), key=lambda prv: prv.identifier):\n            checker().print()\n            print()  # noqa: T201\n</code></pre>"},{"location":"reference/archan/config/#archan.config.Config.provider_from_dict","title":"provider_from_dict","text":"<pre><code>provider_from_dict(dct: dict) -&gt; Provider | None\n</code></pre> <p>Return a provider instance from a dict object.</p> <p>Parameters:</p> <ul> <li> <code>dct</code>             (<code>dict</code>)         \u2013          <p>The dictionary describing the provider.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Provider | None</code>         \u2013          <p>The provider.</p> </li> </ul> Source code in <code>src/archan/config.py</code> <pre><code>def provider_from_dict(self, dct: dict) -&gt; Provider | None:\n    \"\"\"Return a provider instance from a dict object.\n\n    Parameters:\n        dct: The dictionary describing the provider.\n\n    Returns:\n        The provider.\n    \"\"\"\n    provider_identifier = next(iter(dct.keys()))\n    provider_class = self.get_provider(provider_identifier)\n    if provider_class:\n        return provider_class(**dct[provider_identifier])\n    return None\n</code></pre>"},{"location":"reference/archan/config/#archan.config.PluginNotFoundError","title":"PluginNotFoundError","text":"<p>             Bases: <code>ModuleNotFoundError</code></p> <p>Exception to raise when a plugin is not found or importable.</p>"},{"location":"reference/archan/config/#archan.config.Plugins","title":"Plugins","text":"<pre><code>Plugins(\n    providers: dict[str, type[Provider]],\n    checkers: dict[str, type[Checker]],\n)\n</code></pre> <p>Simple class used to store providers and checkers.</p> <p>Parameters:</p> <ul> <li> <code>providers</code>             (<code>dict[str, type[Provider]]</code>)         \u2013          <p>Some providers.</p> </li> <li> <code>checkers</code>             (<code>dict[str, type[Checker]]</code>)         \u2013          <p>Some checkers.</p> </li> </ul> Source code in <code>src/archan/config.py</code> <pre><code>def __init__(self, providers: dict[str, type[Provider]], checkers: dict[str, type[Checker]]):\n    \"\"\"Initialize the object.\n\n    Parameters:\n        providers: Some providers.\n        checkers: Some checkers.\n    \"\"\"\n    self.providers = providers\n    self.checkers = checkers\n</code></pre>"},{"location":"reference/archan/debug/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> debug","text":""},{"location":"reference/archan/debug/#archan.debug","title":"debug","text":"<p>Debugging utilities.</p> <p>Classes:</p> <ul> <li> <code>Environment</code>         \u2013          <p>Dataclass to store environment information.</p> </li> <li> <code>Package</code>         \u2013          <p>Dataclass describing a Python package.</p> </li> <li> <code>Variable</code>         \u2013          <p>Dataclass describing an environment variable.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>get_debug_info</code>           \u2013            <p>Get debug/environment information.</p> </li> <li> <code>get_version</code>           \u2013            <p>Get version of the given distribution.</p> </li> <li> <code>print_debug_info</code>           \u2013            <p>Print debug/environment information.</p> </li> </ul>"},{"location":"reference/archan/debug/#archan.debug.Environment","title":"Environment  <code>dataclass</code>","text":"<p>Dataclass to store environment information.</p> <p>Attributes:</p> <ul> <li> <code>interpreter_name</code>             (<code>str</code>)         \u2013          <p>Python interpreter name.</p> </li> <li> <code>interpreter_version</code>             (<code>str</code>)         \u2013          <p>Python interpreter version.</p> </li> <li> <code>packages</code>             (<code>list[Package]</code>)         \u2013          <p>Installed packages.</p> </li> <li> <code>platform</code>             (<code>str</code>)         \u2013          <p>Operating System.</p> </li> <li> <code>variables</code>             (<code>list[Variable]</code>)         \u2013          <p>Environment variables.</p> </li> </ul>"},{"location":"reference/archan/debug/#archan.debug.Environment.interpreter_name","title":"interpreter_name  <code>instance-attribute</code>","text":"<pre><code>interpreter_name: str\n</code></pre> <p>Python interpreter name.</p>"},{"location":"reference/archan/debug/#archan.debug.Environment.interpreter_version","title":"interpreter_version  <code>instance-attribute</code>","text":"<pre><code>interpreter_version: str\n</code></pre> <p>Python interpreter version.</p>"},{"location":"reference/archan/debug/#archan.debug.Environment.packages","title":"packages  <code>instance-attribute</code>","text":"<pre><code>packages: list[Package]\n</code></pre> <p>Installed packages.</p>"},{"location":"reference/archan/debug/#archan.debug.Environment.platform","title":"platform  <code>instance-attribute</code>","text":"<pre><code>platform: str\n</code></pre> <p>Operating System.</p>"},{"location":"reference/archan/debug/#archan.debug.Environment.variables","title":"variables  <code>instance-attribute</code>","text":"<pre><code>variables: list[Variable]\n</code></pre> <p>Environment variables.</p>"},{"location":"reference/archan/debug/#archan.debug.Package","title":"Package  <code>dataclass</code>","text":"<p>Dataclass describing a Python package.</p> <p>Attributes:</p> <ul> <li> <code>name</code>             (<code>str</code>)         \u2013          <p>Package name.</p> </li> <li> <code>version</code>             (<code>str</code>)         \u2013          <p>Package version.</p> </li> </ul>"},{"location":"reference/archan/debug/#archan.debug.Package.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>Package name.</p>"},{"location":"reference/archan/debug/#archan.debug.Package.version","title":"version  <code>instance-attribute</code>","text":"<pre><code>version: str\n</code></pre> <p>Package version.</p>"},{"location":"reference/archan/debug/#archan.debug.Variable","title":"Variable  <code>dataclass</code>","text":"<p>Dataclass describing an environment variable.</p> <p>Attributes:</p> <ul> <li> <code>name</code>             (<code>str</code>)         \u2013          <p>Variable name.</p> </li> <li> <code>value</code>             (<code>str</code>)         \u2013          <p>Variable value.</p> </li> </ul>"},{"location":"reference/archan/debug/#archan.debug.Variable.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>Variable name.</p>"},{"location":"reference/archan/debug/#archan.debug.Variable.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str\n</code></pre> <p>Variable value.</p>"},{"location":"reference/archan/debug/#archan.debug.get_debug_info","title":"get_debug_info","text":"<pre><code>get_debug_info() -&gt; Environment\n</code></pre> <p>Get debug/environment information.</p> <p>Returns:</p> <ul> <li> <code>Environment</code>         \u2013          <p>Environment information.</p> </li> </ul> Source code in <code>src/archan/debug.py</code> <pre><code>def get_debug_info() -&gt; Environment:\n    \"\"\"Get debug/environment information.\n\n    Returns:\n        Environment information.\n    \"\"\"\n    py_name, py_version = _interpreter_name_version()\n    packages = [\"archan\"]\n    variables = [\"PYTHONPATH\", *[var for var in os.environ if var.startswith(\"ARCHAN\")]]\n    return Environment(\n        interpreter_name=py_name,\n        interpreter_version=py_version,\n        platform=platform.platform(),\n        variables=[Variable(var, val) for var in variables if (val := os.getenv(var))],\n        packages=[Package(pkg, get_version(pkg)) for pkg in packages],\n    )\n</code></pre>"},{"location":"reference/archan/debug/#archan.debug.get_version","title":"get_version","text":"<pre><code>get_version(dist: str = 'archan') -&gt; str\n</code></pre> <p>Get version of the given distribution.</p> <p>Parameters:</p> <ul> <li> <code>dist</code>             (<code>str</code>, default:                 <code>'archan'</code> )         \u2013          <p>A distribution name.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>A version number.</p> </li> </ul> Source code in <code>src/archan/debug.py</code> <pre><code>def get_version(dist: str = \"archan\") -&gt; str:\n    \"\"\"Get version of the given distribution.\n\n    Parameters:\n        dist: A distribution name.\n\n    Returns:\n        A version number.\n    \"\"\"\n    try:\n        return metadata.version(dist)\n    except metadata.PackageNotFoundError:\n        return \"0.0.0\"\n</code></pre>"},{"location":"reference/archan/debug/#archan.debug.print_debug_info","title":"print_debug_info","text":"<pre><code>print_debug_info() -&gt; None\n</code></pre> <p>Print debug/environment information.</p> Source code in <code>src/archan/debug.py</code> <pre><code>def print_debug_info() -&gt; None:\n    \"\"\"Print debug/environment information.\"\"\"\n    info = get_debug_info()\n    print(f\"- __System__: {info.platform}\")\n    print(f\"- __Python__: {info.interpreter_name} {info.interpreter_version}\")\n    print(\"- __Environment variables__:\")\n    for var in info.variables:\n        print(f\"  - `{var.name}`: `{var.value}`\")\n    print(\"- __Installed packages__:\")\n    for pkg in info.packages:\n        print(f\"  - `{pkg.name}` v{pkg.version}\")\n</code></pre>"},{"location":"reference/archan/dsm/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> dsm","text":""},{"location":"reference/archan/dsm/#archan.dsm","title":"dsm","text":"<p>DSM module.</p> <p>Contains the DesignStructureMatrix, DomainMappingMatrix and MultipleDomainMatrix classes.</p> <p>Classes:</p> <ul> <li> <code>BaseMatrix</code>         \u2013          <p>Base class for matrix classes.</p> </li> <li> <code>DesignStructureMatrix</code>         \u2013          <p>Design Structure Matrix class.</p> </li> <li> <code>DomainMappingMatrix</code>         \u2013          <p>Domain Mapping Matrix class.</p> </li> <li> <code>MultipleDomainMatrix</code>         \u2013          <p>Multiple Domain Matrix class.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>validate_categories_equal_entities</code>           \u2013            <p>Validate that the matrix has equal number of entities and categories.</p> </li> <li> <code>validate_rows_length</code>           \u2013            <p>Validate that all rows have the same length.</p> </li> <li> <code>validate_square</code>           \u2013            <p>Validate that the matrix has equal number of rows and columns.</p> </li> </ul>"},{"location":"reference/archan/dsm/#archan.dsm.BaseMatrix","title":"BaseMatrix","text":"<pre><code>BaseMatrix(\n    data: list[list[int | float]],\n    entities: list | None = None,\n    categories: list | None = None,\n)\n</code></pre> <p>Base class for matrix classes.</p> <p>Parameters:</p> <ul> <li> <code>data</code>             (<code>list[list[int | float]]</code>)         \u2013          <p>2-dim array.</p> </li> <li> <code>entities</code>             (<code>list | None</code>, default:                 <code>None</code> )         \u2013          <p>List of entities.</p> </li> <li> <code>categories</code>             (<code>list | None</code>, default:                 <code>None</code> )         \u2013          <p>List of the categories (one per entity).</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>default_entities</code>           \u2013            <p>Default entities used when there are none.</p> </li> <li> <code>validate</code>           \u2013            <p>Validate data (rows length, categories=entities, square).</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>columns</code>             (<code>int</code>)         \u2013          <p>Return number of columns in data.</p> </li> <li> <code>rows</code>             (<code>int</code>)         \u2013          <p>Return number of rows in data.</p> </li> <li> <code>size</code>             (<code>tuple[int, int]</code>)         \u2013          <p>Return number of rows and columns in data.</p> </li> </ul> Source code in <code>src/archan/dsm.py</code> <pre><code>def __init__(self, data: list[list[int | float]], entities: list | None = None, categories: list | None = None):\n    \"\"\"Initialization method.\n\n    Parameters:\n        data: 2-dim array.\n        entities: List of entities.\n        categories: List of the categories (one per entity).\n    \"\"\"\n    self.data = data\n    if entities is None:\n        entities = self.default_entities()\n    self.entities = entities\n    if categories is None:\n        categories = []\n    self.categories = categories\n\n    self.validate()\n</code></pre>"},{"location":"reference/archan/dsm/#archan.dsm.BaseMatrix.columns","title":"columns  <code>property</code>","text":"<pre><code>columns: int\n</code></pre> <p>Return number of columns in data.</p> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>The number of columns.</p> </li> </ul>"},{"location":"reference/archan/dsm/#archan.dsm.BaseMatrix.rows","title":"rows  <code>property</code>","text":"<pre><code>rows: int\n</code></pre> <p>Return number of rows in data.</p> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>The number of rows.</p> </li> </ul>"},{"location":"reference/archan/dsm/#archan.dsm.BaseMatrix.size","title":"size  <code>property</code>","text":"<pre><code>size: tuple[int, int]\n</code></pre> <p>Return number of rows and columns in data.</p> <p>Returns:</p> <ul> <li> <code>tuple[int, int]</code>         \u2013          <p>The dimensions of the data.</p> </li> </ul>"},{"location":"reference/archan/dsm/#archan.dsm.BaseMatrix.default_entities","title":"default_entities","text":"<pre><code>default_entities() -&gt; list[str]\n</code></pre> <p>Default entities used when there are none.</p> <p>Returns:</p> <ul> <li> <code>list[str]</code>         \u2013          <p>The default entities.</p> </li> </ul> Source code in <code>src/archan/dsm.py</code> <pre><code>def default_entities(self) -&gt; list[str]:\n    \"\"\"Default entities used when there are none.\n\n    Returns:\n        The default entities.\n    \"\"\"\n    return [str(_) for _ in range(self.rows)]\n</code></pre>"},{"location":"reference/archan/dsm/#archan.dsm.BaseMatrix.validate","title":"validate","text":"<pre><code>validate() -&gt; None\n</code></pre> <p>Validate data (rows length, categories=entities, square).</p> Source code in <code>src/archan/dsm.py</code> <pre><code>def validate(self) -&gt; None:\n    \"\"\"Validate data (rows length, categories=entities, square).\"\"\"\n    validate_rows_length(self.data, self.columns, exception=self.error)\n    validate_categories_equal_entities(self.categories, self.entities, exception=self.error)\n    if self.square:\n        validate_square(self.data, exception=self.error)\n</code></pre>"},{"location":"reference/archan/dsm/#archan.dsm.DesignStructureMatrix","title":"DesignStructureMatrix","text":"<pre><code>DesignStructureMatrix(\n    data: list[list[int | float]],\n    entities: list | None = None,\n    categories: list | None = None,\n)\n</code></pre> <p>             Bases: <code>BaseMatrix</code></p> <p>Design Structure Matrix class.</p> <p>Parameters:</p> <ul> <li> <code>data</code>             (<code>list[list[int | float]]</code>)         \u2013          <p>2-dim array.</p> </li> <li> <code>entities</code>             (<code>list | None</code>, default:                 <code>None</code> )         \u2013          <p>List of entities.</p> </li> <li> <code>categories</code>             (<code>list | None</code>, default:                 <code>None</code> )         \u2013          <p>List of the categories (one per entity).</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>default_entities</code>           \u2013            <p>Default entities used when there are none.</p> </li> <li> <code>transitive_closure</code>           \u2013            <p>Compute the transitive closure of the matrix.</p> </li> <li> <code>validate</code>           \u2013            <p>Base validation + entities = rows.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>columns</code>             (<code>int</code>)         \u2013          <p>Return number of columns in data.</p> </li> <li> <code>rows</code>             (<code>int</code>)         \u2013          <p>Return number of rows in data.</p> </li> <li> <code>size</code>             (<code>tuple[int, int]</code>)         \u2013          <p>Return number of rows and columns in data.</p> </li> </ul> Source code in <code>src/archan/dsm.py</code> <pre><code>def __init__(self, data: list[list[int | float]], entities: list | None = None, categories: list | None = None):\n    \"\"\"Initialization method.\n\n    Parameters:\n        data: 2-dim array.\n        entities: List of entities.\n        categories: List of the categories (one per entity).\n    \"\"\"\n    self.data = data\n    if entities is None:\n        entities = self.default_entities()\n    self.entities = entities\n    if categories is None:\n        categories = []\n    self.categories = categories\n\n    self.validate()\n</code></pre>"},{"location":"reference/archan/dsm/#archan.dsm.DesignStructureMatrix.columns","title":"columns  <code>property</code>","text":"<pre><code>columns: int\n</code></pre> <p>Return number of columns in data.</p> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>The number of columns.</p> </li> </ul>"},{"location":"reference/archan/dsm/#archan.dsm.DesignStructureMatrix.rows","title":"rows  <code>property</code>","text":"<pre><code>rows: int\n</code></pre> <p>Return number of rows in data.</p> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>The number of rows.</p> </li> </ul>"},{"location":"reference/archan/dsm/#archan.dsm.DesignStructureMatrix.size","title":"size  <code>property</code>","text":"<pre><code>size: tuple[int, int]\n</code></pre> <p>Return number of rows and columns in data.</p> <p>Returns:</p> <ul> <li> <code>tuple[int, int]</code>         \u2013          <p>The dimensions of the data.</p> </li> </ul>"},{"location":"reference/archan/dsm/#archan.dsm.DesignStructureMatrix.default_entities","title":"default_entities","text":"<pre><code>default_entities() -&gt; list[str]\n</code></pre> <p>Default entities used when there are none.</p> <p>Returns:</p> <ul> <li> <code>list[str]</code>         \u2013          <p>The default entities.</p> </li> </ul> Source code in <code>src/archan/dsm.py</code> <pre><code>def default_entities(self) -&gt; list[str]:\n    \"\"\"Default entities used when there are none.\n\n    Returns:\n        The default entities.\n    \"\"\"\n    return [str(_) for _ in range(self.rows)]\n</code></pre>"},{"location":"reference/archan/dsm/#archan.dsm.DesignStructureMatrix.transitive_closure","title":"transitive_closure","text":"<pre><code>transitive_closure() -&gt; list[list[int]]\n</code></pre> <p>Compute the transitive closure of the matrix.</p> <p>Returns:</p> <ul> <li> <code>list[list[int]]</code>         \u2013          <p>The transitive closure of the matrix.</p> </li> </ul> Source code in <code>src/archan/dsm.py</code> <pre><code>def transitive_closure(self) -&gt; list[list[int]]:\n    \"\"\"Compute the transitive closure of the matrix.\n\n    Returns:\n        The transitive closure of the matrix.\n    \"\"\"\n    data = [[1 if j else 0 for j in i] for i in self.data]\n    for k in range(self.rows):\n        for i in range(self.rows):\n            for j in range(self.rows):\n                if data[i][k] and data[k][j]:\n                    data[i][j] = 1\n    return data\n</code></pre>"},{"location":"reference/archan/dsm/#archan.dsm.DesignStructureMatrix.validate","title":"validate","text":"<pre><code>validate() -&gt; None\n</code></pre> <p>Base validation + entities = rows.</p> <p>Raises:</p> <ul> <li> <code>DesignStructureMatrixError</code>           \u2013          <p>When number of entities is different than number of rows.</p> </li> </ul> Source code in <code>src/archan/dsm.py</code> <pre><code>def validate(self) -&gt; None:\n    \"\"\"Base validation + entities = rows.\n\n    Raises:\n        DesignStructureMatrixError: When number of entities is different than number of rows.\n    \"\"\"\n    super().validate()\n    nb_entities = len(self.entities)\n    if nb_entities != self.rows:\n        raise self.error(f\"Number of entities: {nb_entities} != number of rows: {self.rows}\")\n</code></pre>"},{"location":"reference/archan/dsm/#archan.dsm.DomainMappingMatrix","title":"DomainMappingMatrix","text":"<pre><code>DomainMappingMatrix(\n    data: list[list[int | float]],\n    entities: list | None = None,\n    categories: list | None = None,\n)\n</code></pre> <p>             Bases: <code>BaseMatrix</code></p> <p>Domain Mapping Matrix class.</p> <p>Parameters:</p> <ul> <li> <code>data</code>             (<code>list[list[int | float]]</code>)         \u2013          <p>2-dim array.</p> </li> <li> <code>entities</code>             (<code>list | None</code>, default:                 <code>None</code> )         \u2013          <p>List of entities.</p> </li> <li> <code>categories</code>             (<code>list | None</code>, default:                 <code>None</code> )         \u2013          <p>List of the categories (one per entity).</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>default_entities</code>           \u2013            <p>Return range from 0 to rows + columns.</p> </li> <li> <code>validate</code>           \u2013            <p>Base validation + entities = rows + columns.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>columns</code>             (<code>int</code>)         \u2013          <p>Return number of columns in data.</p> </li> <li> <code>rows</code>             (<code>int</code>)         \u2013          <p>Return number of rows in data.</p> </li> <li> <code>size</code>             (<code>tuple[int, int]</code>)         \u2013          <p>Return number of rows and columns in data.</p> </li> </ul> Source code in <code>src/archan/dsm.py</code> <pre><code>def __init__(self, data: list[list[int | float]], entities: list | None = None, categories: list | None = None):\n    \"\"\"Initialization method.\n\n    Parameters:\n        data: 2-dim array.\n        entities: List of entities.\n        categories: List of the categories (one per entity).\n    \"\"\"\n    self.data = data\n    if entities is None:\n        entities = self.default_entities()\n    self.entities = entities\n    if categories is None:\n        categories = []\n    self.categories = categories\n\n    self.validate()\n</code></pre>"},{"location":"reference/archan/dsm/#archan.dsm.DomainMappingMatrix.columns","title":"columns  <code>property</code>","text":"<pre><code>columns: int\n</code></pre> <p>Return number of columns in data.</p> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>The number of columns.</p> </li> </ul>"},{"location":"reference/archan/dsm/#archan.dsm.DomainMappingMatrix.rows","title":"rows  <code>property</code>","text":"<pre><code>rows: int\n</code></pre> <p>Return number of rows in data.</p> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>The number of rows.</p> </li> </ul>"},{"location":"reference/archan/dsm/#archan.dsm.DomainMappingMatrix.size","title":"size  <code>property</code>","text":"<pre><code>size: tuple[int, int]\n</code></pre> <p>Return number of rows and columns in data.</p> <p>Returns:</p> <ul> <li> <code>tuple[int, int]</code>         \u2013          <p>The dimensions of the data.</p> </li> </ul>"},{"location":"reference/archan/dsm/#archan.dsm.DomainMappingMatrix.default_entities","title":"default_entities","text":"<pre><code>default_entities() -&gt; list[str]\n</code></pre> <p>Return range from 0 to rows + columns.</p> <p>Returns:</p> <ul> <li> <code>list[str]</code>         \u2013          <p>Range from 0 to rows + columns.</p> </li> </ul> Source code in <code>src/archan/dsm.py</code> <pre><code>def default_entities(self) -&gt; list[str]:\n    \"\"\"Return range from 0 to rows + columns.\n\n    Returns:\n        Range from 0 to rows + columns.\n    \"\"\"\n    return [str(_) for _ in range(self.rows + self.columns)]\n</code></pre>"},{"location":"reference/archan/dsm/#archan.dsm.DomainMappingMatrix.validate","title":"validate","text":"<pre><code>validate() -&gt; None\n</code></pre> <p>Base validation + entities = rows + columns.</p> <p>Raises:</p> <ul> <li> <code>DomainMappingMatrixError</code>           \u2013          <p>When number of entities is different than rows plus columns.</p> </li> </ul> Source code in <code>src/archan/dsm.py</code> <pre><code>def validate(self) -&gt; None:\n    \"\"\"Base validation + entities = rows + columns.\n\n    Raises:\n        DomainMappingMatrixError: When number of entities is different than rows plus columns.\n    \"\"\"\n    super().validate()\n    nb_entities = len(self.entities)\n    if nb_entities != self.rows + self.columns:\n        raise self.error(\n            f\"Number of entities: {nb_entities} != number of rows + \"\n            f\"number of columns: {self.rows}+{self.columns}={self.rows + self.columns}\",\n        )\n</code></pre>"},{"location":"reference/archan/dsm/#archan.dsm.MultipleDomainMatrix","title":"MultipleDomainMatrix","text":"<pre><code>MultipleDomainMatrix(\n    data: list[list[int | float]],\n    entities: list | None = None,\n    categories: list | None = None,\n)\n</code></pre> <p>             Bases: <code>BaseMatrix</code></p> <p>Multiple Domain Matrix class.</p> <p>Parameters:</p> <ul> <li> <code>data</code>             (<code>list[list[int | float]]</code>)         \u2013          <p>2-dim array.</p> </li> <li> <code>entities</code>             (<code>list | None</code>, default:                 <code>None</code> )         \u2013          <p>List of entities.</p> </li> <li> <code>categories</code>             (<code>list | None</code>, default:                 <code>None</code> )         \u2013          <p>List of the categories (one per entity).</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>default_entities</code>           \u2013            <p>Default entities used when there are none.</p> </li> <li> <code>validate</code>           \u2013            <p>Base validation + each cell is instance of DSM or MDM.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>columns</code>             (<code>int</code>)         \u2013          <p>Return number of columns in data.</p> </li> <li> <code>rows</code>             (<code>int</code>)         \u2013          <p>Return number of rows in data.</p> </li> <li> <code>size</code>             (<code>tuple[int, int]</code>)         \u2013          <p>Return number of rows and columns in data.</p> </li> </ul> Source code in <code>src/archan/dsm.py</code> <pre><code>def __init__(self, data: list[list[int | float]], entities: list | None = None, categories: list | None = None):\n    \"\"\"Initialization method.\n\n    Parameters:\n        data: 2-dim array.\n        entities: List of entities.\n        categories: List of the categories (one per entity).\n    \"\"\"\n    self.data = data\n    if entities is None:\n        entities = self.default_entities()\n    self.entities = entities\n    if categories is None:\n        categories = []\n    self.categories = categories\n\n    self.validate()\n</code></pre>"},{"location":"reference/archan/dsm/#archan.dsm.MultipleDomainMatrix.columns","title":"columns  <code>property</code>","text":"<pre><code>columns: int\n</code></pre> <p>Return number of columns in data.</p> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>The number of columns.</p> </li> </ul>"},{"location":"reference/archan/dsm/#archan.dsm.MultipleDomainMatrix.rows","title":"rows  <code>property</code>","text":"<pre><code>rows: int\n</code></pre> <p>Return number of rows in data.</p> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>The number of rows.</p> </li> </ul>"},{"location":"reference/archan/dsm/#archan.dsm.MultipleDomainMatrix.size","title":"size  <code>property</code>","text":"<pre><code>size: tuple[int, int]\n</code></pre> <p>Return number of rows and columns in data.</p> <p>Returns:</p> <ul> <li> <code>tuple[int, int]</code>         \u2013          <p>The dimensions of the data.</p> </li> </ul>"},{"location":"reference/archan/dsm/#archan.dsm.MultipleDomainMatrix.default_entities","title":"default_entities","text":"<pre><code>default_entities() -&gt; list[str]\n</code></pre> <p>Default entities used when there are none.</p> <p>Returns:</p> <ul> <li> <code>list[str]</code>         \u2013          <p>The default entities.</p> </li> </ul> Source code in <code>src/archan/dsm.py</code> <pre><code>def default_entities(self) -&gt; list[str]:\n    \"\"\"Default entities used when there are none.\n\n    Returns:\n        The default entities.\n    \"\"\"\n    return [str(_) for _ in range(self.rows)]\n</code></pre>"},{"location":"reference/archan/dsm/#archan.dsm.MultipleDomainMatrix.validate","title":"validate","text":"<pre><code>validate() -&gt; None\n</code></pre> <p>Base validation + each cell is instance of DSM or MDM.</p> <p>Raises:</p> <ul> <li> <code>MultipleDomainMatrixError</code>           \u2013          <p>When diagonal cells are not DSM nor MDM, or when other cells are not DMM nor MDM.</p> </li> </ul> Source code in <code>src/archan/dsm.py</code> <pre><code>def validate(self) -&gt; None:\n    \"\"\"Base validation + each cell is instance of DSM or MDM.\n\n    Raises:\n        MultipleDomainMatrixError: When diagonal cells are not DSM nor MDM, or when other cells are not DMM nor MDM.\n    \"\"\"\n    super().validate()\n    message_dsm = \"Matrix at [%s:%s] is not an instance of DesignStructureMatrix or MultipleDomainMatrix.\"\n    message_ddm = \"Matrix at [%s:%s] is not an instance of DomainMappingMatrix or MultipleDomainMatrix.\"\n    messages = []\n    for line, row in enumerate(self.data):\n        for column, cell in enumerate(row):\n            if line == column:\n                if not isinstance(cell, (DesignStructureMatrix, MultipleDomainMatrix)):\n                    messages.append(message_dsm % (line, column))\n            elif not isinstance(cell, (DomainMappingMatrix, MultipleDomainMatrix)):\n                messages.append(message_ddm % (line, column))\n    if messages:\n        raise self.error(\"\\n\".join(messages))\n</code></pre>"},{"location":"reference/archan/dsm/#archan.dsm.validate_categories_equal_entities","title":"validate_categories_equal_entities","text":"<pre><code>validate_categories_equal_entities(\n    categories: list,\n    entities: list,\n    message: str | None = None,\n    exception: type = MatrixError,\n) -&gt; None\n</code></pre> <p>Validate that the matrix has equal number of entities and categories.</p> <p>Parameters:</p> <ul> <li> <code>categories</code>             (<code>list</code>)         \u2013          <p>The categories to validate.</p> </li> <li> <code>entities</code>             (<code>list</code>)         \u2013          <p>The entities to validate.</p> </li> <li> <code>message</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The exception message.</p> </li> <li> <code>exception</code>             (<code>type</code>, default:                 <code>MatrixError</code> )         \u2013          <p>The exception type.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>MatrixError</code>           \u2013          <p>When the validation failed.</p> </li> </ul> Source code in <code>src/archan/dsm.py</code> <pre><code>def validate_categories_equal_entities(\n    categories: list,\n    entities: list,\n    message: str | None = None,\n    exception: type = MatrixError,\n) -&gt; None:\n    \"\"\"Validate that the matrix has equal number of entities and categories.\n\n    Parameters:\n        categories: The categories to validate.\n        entities: The entities to validate.\n        message: The exception message.\n        exception: The exception type.\n\n    Raises:\n        MatrixError: When the validation failed.\n    \"\"\"\n    nb_categories = len(categories)\n    nb_entities = len(entities)\n    if message is None:\n        message = f\"Number of categories: {nb_categories} != number of entities: {nb_entities}\"\n    if categories and nb_categories != nb_entities:\n        raise exception(message)\n</code></pre>"},{"location":"reference/archan/dsm/#archan.dsm.validate_rows_length","title":"validate_rows_length","text":"<pre><code>validate_rows_length(\n    data: list[list],\n    length: int,\n    message: str | None = None,\n    exception: type = MatrixError,\n) -&gt; None\n</code></pre> <p>Validate that all rows have the same length.</p> <p>Parameters:</p> <ul> <li> <code>data</code>             (<code>list[list]</code>)         \u2013          <p>The data to validate.</p> </li> <li> <code>length</code>             (<code>int</code>)         \u2013          <p>The length to enforce.</p> </li> <li> <code>message</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The exception message.</p> </li> <li> <code>exception</code>             (<code>type</code>, default:                 <code>MatrixError</code> )         \u2013          <p>The exception type.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>MatrixError</code>           \u2013          <p>When the validation failed.</p> </li> </ul> Source code in <code>src/archan/dsm.py</code> <pre><code>def validate_rows_length(\n    data: list[list],\n    length: int,\n    message: str | None = None,\n    exception: type = MatrixError,\n) -&gt; None:\n    \"\"\"Validate that all rows have the same length.\n\n    Parameters:\n        data: The data to validate.\n        length: The length to enforce.\n        message: The exception message.\n        exception: The exception type.\n\n    Raises:\n        MatrixError: When the validation failed.\n    \"\"\"\n    if message is None:\n        message = \"All rows must have the same length (same number of columns)\"\n    for row in data:\n        if len(row) != length:\n            raise exception(message)\n</code></pre>"},{"location":"reference/archan/dsm/#archan.dsm.validate_square","title":"validate_square","text":"<pre><code>validate_square(\n    data: list[list],\n    message: str | None = None,\n    exception: type = MatrixError,\n) -&gt; None\n</code></pre> <p>Validate that the matrix has equal number of rows and columns.</p> <p>Parameters:</p> <ul> <li> <code>data</code>             (<code>list[list]</code>)         \u2013          <p>The data to validate.</p> </li> <li> <code>message</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The exception message.</p> </li> <li> <code>exception</code>             (<code>type</code>, default:                 <code>MatrixError</code> )         \u2013          <p>The exception type.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>MatrixError</code>           \u2013          <p>When the validation failed.</p> </li> </ul> Source code in <code>src/archan/dsm.py</code> <pre><code>def validate_square(data: list[list], message: str | None = None, exception: type = MatrixError) -&gt; None:\n    \"\"\"Validate that the matrix has equal number of rows and columns.\n\n    Parameters:\n        data: The data to validate.\n        message: The exception message.\n        exception: The exception type.\n\n    Raises:\n        MatrixError: When the validation failed.\n    \"\"\"\n    rows, columns = len(data), len(data[0]) if data else 0\n    if message is None:\n        message = f\"Number of rows: {rows} != number of columns: {columns} in matrix\"\n    if rows != columns:\n        raise exception(message)\n</code></pre>"},{"location":"reference/archan/enums/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> enums","text":""},{"location":"reference/archan/enums/#archan.enums","title":"enums","text":"<p>Enumerations module.</p> <p>Classes:</p> <ul> <li> <code>MetaEnum</code>         \u2013          <p>Metaclass for our ResultCode enum.</p> </li> <li> <code>ResultCode</code>         \u2013          <p>Enumeration of our result codes.</p> </li> </ul>"},{"location":"reference/archan/enums/#archan.enums.MetaEnum","title":"MetaEnum","text":"<p>             Bases: <code>type</code></p> <p>Metaclass for our ResultCode enum.</p>"},{"location":"reference/archan/enums/#archan.enums.ResultCode","title":"ResultCode","text":"<p>Enumeration of our result codes.</p>"},{"location":"reference/archan/errors/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> errors","text":""},{"location":"reference/archan/errors/#archan.errors","title":"errors","text":"<p>Errors module.</p> <p>Classes:</p> <ul> <li> <code>ConfigError</code>         \u2013          <p>Exception raised for errors in the configuration.</p> </li> <li> <code>DesignStructureMatrixError</code>         \u2013          <p>DesignStructureMatrix-specific matrix error.</p> </li> <li> <code>DomainMappingMatrixError</code>         \u2013          <p>DomainMappingMatrix-specific matrix error.</p> </li> <li> <code>MatrixError</code>         \u2013          <p>Exception raised when matrix data are incorrect.</p> </li> <li> <code>MultipleDomainMatrixError</code>         \u2013          <p>MultipleDomainMatrix-specific matrix error.</p> </li> </ul>"},{"location":"reference/archan/errors/#archan.errors.ConfigError","title":"ConfigError","text":"<p>             Bases: <code>Exception</code></p> <p>Exception raised for errors in the configuration.</p>"},{"location":"reference/archan/errors/#archan.errors.DesignStructureMatrixError","title":"DesignStructureMatrixError","text":"<p>             Bases: <code>MatrixError</code></p> <p>DesignStructureMatrix-specific matrix error.</p>"},{"location":"reference/archan/errors/#archan.errors.DomainMappingMatrixError","title":"DomainMappingMatrixError","text":"<p>             Bases: <code>MatrixError</code></p> <p>DomainMappingMatrix-specific matrix error.</p>"},{"location":"reference/archan/errors/#archan.errors.MatrixError","title":"MatrixError","text":"<p>             Bases: <code>Exception</code></p> <p>Exception raised when matrix data are incorrect.</p>"},{"location":"reference/archan/errors/#archan.errors.MultipleDomainMatrixError","title":"MultipleDomainMatrixError","text":"<p>             Bases: <code>MatrixError</code></p> <p>MultipleDomainMatrix-specific matrix error.</p>"},{"location":"reference/archan/logging/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> logging","text":""},{"location":"reference/archan/logging/#archan.logging","title":"logging","text":"<p>Logging module.</p> <p>Classes:</p> <ul> <li> <code>Logger</code>         \u2013          <p>Static class to store loggers.</p> </li> <li> <code>LoggingFormatter</code>         \u2013          <p>Custom logging formatter.</p> </li> </ul>"},{"location":"reference/archan/logging/#archan.logging.Logger","title":"Logger","text":"<p>Static class to store loggers.</p> <p>Methods:</p> <ul> <li> <code>get_logger</code>           \u2013            <p>Return a logger.</p> </li> <li> <code>set_level</code>           \u2013            <p>Set level of logging for all loggers.</p> </li> </ul>"},{"location":"reference/archan/logging/#archan.logging.Logger.get_logger","title":"get_logger  <code>staticmethod</code>","text":"<pre><code>get_logger(\n    name: str,\n    level: int | None = None,\n    fmt: str = \":%(lineno)d: %(message)s\",\n) -&gt; Logger\n</code></pre> <p>Return a logger.</p> <p>Parameters:</p> <ul> <li> <code>name</code>             (<code>str</code>)         \u2013          <p>Name to pass to the logging module.</p> </li> <li> <code>level</code>             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>Level of logging.</p> </li> <li> <code>fmt</code>             (<code>str</code>, default:                 <code>':%(lineno)d: %(message)s'</code> )         \u2013          <p>Format string.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Logger</code>         \u2013          <p>Logger from <code>logging.getLogger</code>.</p> </li> </ul> Source code in <code>src/archan/logging.py</code> <pre><code>@staticmethod\ndef get_logger(name: str, level: int | None = None, fmt: str = \":%(lineno)d: %(message)s\") -&gt; logging.Logger:\n    \"\"\"Return a logger.\n\n    Parameters:\n        name: Name to pass to the logging module.\n        level: Level of logging.\n        fmt: Format string.\n\n    Returns:\n        Logger from ``logging.getLogger``.\n    \"\"\"\n    if name not in Logger.loggers:\n        if Logger.level is None and level is None:\n            Logger.level = logging.ERROR\n            level = logging.ERROR\n        elif Logger.level is None:\n            Logger.level = level\n        elif level is None:\n            level = Logger.level\n        logger = logging.getLogger(name)\n        logger_handler = logging.StreamHandler()\n        logger_handler.setFormatter(LoggingFormatter(fmt=name + fmt))\n        logger.addHandler(logger_handler)\n        logger.setLevel(level)  # type: ignore[arg-type]\n        Logger.loggers[name] = logger\n    return Logger.loggers[name]\n</code></pre>"},{"location":"reference/archan/logging/#archan.logging.Logger.set_level","title":"set_level  <code>staticmethod</code>","text":"<pre><code>set_level(level: int) -&gt; None\n</code></pre> <p>Set level of logging for all loggers.</p> <p>Parameters:</p> <ul> <li> <code>level</code>             (<code>int</code>)         \u2013          <p>Level of logging.</p> </li> </ul> Source code in <code>src/archan/logging.py</code> <pre><code>@staticmethod\ndef set_level(level: int) -&gt; None:\n    \"\"\"Set level of logging for all loggers.\n\n    Parameters:\n        level: Level of logging.\n    \"\"\"\n    Logger.level = level\n    for logger in Logger.loggers.values():\n        logger.setLevel(level)\n</code></pre>"},{"location":"reference/archan/logging/#archan.logging.LoggingFormatter","title":"LoggingFormatter","text":"<p>             Bases: <code>Formatter</code></p> <p>Custom logging formatter.</p> <p>Methods:</p> <ul> <li> <code>format</code>           \u2013            <p>Override default format method.</p> </li> </ul>"},{"location":"reference/archan/logging/#archan.logging.LoggingFormatter.format","title":"format","text":"<pre><code>format(record: LogRecord) -&gt; str\n</code></pre> <p>Override default format method.</p> <p>Parameters:</p> <ul> <li> <code>record</code>             (<code>LogRecord</code>)         \u2013          <p>A log record.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>The formatted record.</p> </li> </ul> Source code in <code>src/archan/logging.py</code> <pre><code>def format(self, record: logging.LogRecord) -&gt; str:  # noqa: A003\n    \"\"\"Override default format method.\n\n    Parameters:\n        record: A log record.\n\n    Returns:\n        The formatted record.\n    \"\"\"\n    if record.levelno == logging.DEBUG:\n        string = Back.WHITE + Fore.BLACK + \" debug \"\n    elif record.levelno == logging.INFO:\n        string = Back.BLUE + Fore.WHITE + \" info \"\n    elif record.levelno == logging.WARNING:\n        string = Back.YELLOW + Fore.BLACK + \" warning \"\n    elif record.levelno == logging.ERROR:\n        string = Back.RED + Fore.WHITE + \" error \"\n    elif record.levelno == logging.CRITICAL:\n        string = Back.BLACK + Fore.WHITE + \" critical \"\n    else:\n        string = \"\"\n    return f\"{Style.RESET_ALL}{string}{Style.RESET_ALL} {super().format(record)}\"\n</code></pre>"},{"location":"reference/archan/printing/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> printing","text":""},{"location":"reference/archan/printing/#archan.printing","title":"printing","text":"<p>Printing module.</p> <p>Classes:</p> <ul> <li> <code>PrintableArgumentMixin</code>         \u2013          <p>Mixin to add a print method to Argument instances.</p> </li> <li> <code>PrintableNameMixin</code>         \u2013          <p>Mixin to a print_name method to instances.</p> </li> <li> <code>PrintablePluginMixin</code>         \u2013          <p>Mixin to add a print method to plugin instances.</p> </li> <li> <code>PrintableResultMixin</code>         \u2013          <p>Mixin to add a print method to Result instances.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>console_width</code>           \u2013            <p>Return current console width.</p> </li> <li> <code>pretty_description</code>           \u2013            <p>Return a pretty formatted string given some text.</p> </li> </ul>"},{"location":"reference/archan/printing/#archan.printing.PrintableArgumentMixin","title":"PrintableArgumentMixin","text":"<p>Mixin to add a print method to Argument instances.</p> <p>Methods:</p> <ul> <li> <code>print</code>           \u2013            <p>Print self with optional indent.</p> </li> </ul>"},{"location":"reference/archan/printing/#archan.printing.PrintableArgumentMixin.print","title":"print","text":"<pre><code>print(indent: int = 0) -&gt; None\n</code></pre> <p>Print self with optional indent.</p> <p>Parameters:</p> <ul> <li> <code>indent</code>             (<code>int</code>, default:                 <code>0</code> )         \u2013          <p>Indentation.</p> </li> </ul> Source code in <code>src/archan/printing.py</code> <pre><code>def print(self, indent: int = 0) -&gt; None:  # noqa: A003\n    \"\"\"Print self with optional indent.\n\n    Parameters:\n        indent: Indentation.\n    \"\"\"\n    text = \"{indent}{magenta}{name}{none} ({dim}{cls}{none}, default {dim}{default}{none})\".format(\n        indent=\" \" * indent,\n        dim=Style.DIM,\n        magenta=Fore.MAGENTA,\n        none=Style.RESET_ALL,\n        name=self.name,  # type: ignore[attr-defined]\n        cls=self.cls,  # type: ignore[attr-defined]\n        default=self.default,  # type: ignore[attr-defined]\n    )\n\n    if self.description:  # type: ignore[attr-defined]\n        text += \":\\n\" + pretty_description(self.description, indent=indent + 2)  # type: ignore[attr-defined]\n\n    print(text)\n</code></pre>"},{"location":"reference/archan/printing/#archan.printing.PrintableNameMixin","title":"PrintableNameMixin","text":"<p>Mixin to a print_name method to instances.</p> <p>Methods:</p> <ul> <li> <code>print_name</code>           \u2013            <p>Print name with optional indent and end.</p> </li> </ul>"},{"location":"reference/archan/printing/#archan.printing.PrintableNameMixin.print_name","title":"print_name","text":"<pre><code>print_name(indent: int = 0, end: str = '\\n') -&gt; None\n</code></pre> <p>Print name with optional indent and end.</p> <p>Parameters:</p> <ul> <li> <code>indent</code>             (<code>int</code>, default:                 <code>0</code> )         \u2013          <p>Indentation.</p> </li> <li> <code>end</code>             (<code>str</code>, default:                 <code>'\\n'</code> )         \u2013          <p>End of line.</p> </li> </ul> Source code in <code>src/archan/printing.py</code> <pre><code>def print_name(self, indent: int = 0, end: str = \"\\n\") -&gt; None:\n    \"\"\"Print name with optional indent and end.\n\n    Parameters:\n        indent: Indentation.\n        end: End of line.\n    \"\"\"\n    print(Style.BRIGHT + \" \" * indent + self.name, end=end)  # type: ignore[attr-defined]\n</code></pre>"},{"location":"reference/archan/printing/#archan.printing.PrintablePluginMixin","title":"PrintablePluginMixin","text":"<p>Mixin to add a print method to plugin instances.</p> <p>Methods:</p> <ul> <li> <code>print</code>           \u2013            <p>Print self.</p> </li> </ul>"},{"location":"reference/archan/printing/#archan.printing.PrintablePluginMixin.print","title":"print","text":"<pre><code>print() -&gt; None\n</code></pre> <p>Print self.</p> Source code in <code>src/archan/printing.py</code> <pre><code>def print(self) -&gt; None:  # noqa: A003\n    \"\"\"Print self.\"\"\"\n    print(\n        f\"{Style.DIM}Identifier:{Style.RESET_ALL} {Fore.CYAN}{self.identifier}{Style.RESET_ALL}\\n\"\n        f\"{Style.DIM}Name:{Style.RESET_ALL} {self.name}\\n\"\n        f\"{Style.DIM}Description:{Style.RESET_ALL}\\n{pretty_description(self.description, indent=2)}\",\n    )\n\n    if hasattr(self, \"argument_list\") and self.argument_list:\n        print(f\"{Style.DIM}Arguments:{Style.RESET_ALL}\")\n        for argument in self.argument_list:\n            argument.print(indent=2)\n</code></pre>"},{"location":"reference/archan/printing/#archan.printing.PrintableResultMixin","title":"PrintableResultMixin","text":"<p>Mixin to add a print method to Result instances.</p> <p>Methods:</p> <ul> <li> <code>print</code>           \u2013            <p>Print self with optional indent.</p> </li> </ul>"},{"location":"reference/archan/printing/#archan.printing.PrintableResultMixin.print","title":"print","text":"<pre><code>print(indent: int = 2) -&gt; None\n</code></pre> <p>Print self with optional indent.</p> <p>Parameters:</p> <ul> <li> <code>indent</code>             (<code>int</code>, default:                 <code>2</code> )         \u2013          <p>Indentation.</p> </li> </ul> Source code in <code>src/archan/printing.py</code> <pre><code>def print(self, indent: int = 2) -&gt; None:  # noqa: A003\n    \"\"\"Print self with optional indent.\n\n    Parameters:\n        indent: Indentation.\n    \"\"\"\n    status = {\n        ResultCode.NOT_IMPLEMENTED: f\"{Fore.YELLOW}not implemented{Style.RESET_ALL}\",\n        ResultCode.IGNORED: f\"{Fore.YELLOW}failed (ignored){Style.RESET_ALL}\",\n        ResultCode.FAILED: f\"{Fore.RED}failed{Style.RESET_ALL}\",\n        ResultCode.PASSED: f\"{Fore.GREEN}passed{Style.RESET_ALL}\",\n    }.get(\n        self.code,  # type: ignore[attr-defined]\n    )\n    print(\n        \"{bold}{group}{provider}{checker}: {none}{status}{none}\".format(\n            bold=Style.BRIGHT,\n            group=(self.group.name + \" \u2013 \") if self.group.name else \"\",  # type: ignore[attr-defined]\n            provider=(self.provider.name + \" \u2013 \") if self.provider else \"\",  # type: ignore[attr-defined]\n            checker=self.checker.name,  # type: ignore[attr-defined]\n            none=Style.RESET_ALL,\n            status=status,\n        ),\n    )\n    if self.messages:  # type: ignore[attr-defined]\n        for message in self.messages.split(\"\\n\"):  # type: ignore[attr-defined]\n            print(pretty_description(message, indent=indent))\n        if self.checker.hint:  # type: ignore[attr-defined]\n            print(pretty_description(\"Hint: \" + self.checker.hint, indent=indent))  # type: ignore[attr-defined]\n</code></pre>"},{"location":"reference/archan/printing/#archan.printing.console_width","title":"console_width","text":"<pre><code>console_width(default: int = 80) -&gt; int\n</code></pre> <p>Return current console width.</p> <p>Parameters:</p> <ul> <li> <code>default</code>             (<code>int</code>, default:                 <code>80</code> )         \u2013          <p>Default value if width cannot be retrieved.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>Console width.</p> </li> </ul> Source code in <code>src/archan/printing.py</code> <pre><code>def console_width(default: int = 80) -&gt; int:\n    \"\"\"Return current console width.\n\n    Parameters:\n        default: Default value if width cannot be retrieved.\n\n    Returns:\n        Console width.\n    \"\"\"\n    # only solution that works with stdin redirected from file\n    # https://stackoverflow.com/questions/566746\n    return shutil.get_terminal_size((default, 20)).columns\n</code></pre>"},{"location":"reference/archan/printing/#archan.printing.pretty_description","title":"pretty_description","text":"<pre><code>pretty_description(\n    description: str,\n    wrap_at: int | None = None,\n    indent: int = 0,\n) -&gt; str\n</code></pre> <p>Return a pretty formatted string given some text.</p> <p>Parameters:</p> <ul> <li> <code>description</code>             (<code>str</code>)         \u2013          <p>String to format.</p> </li> <li> <code>wrap_at</code>             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>Maximum length of a line.</p> </li> <li> <code>indent</code>             (<code>int</code>, default:                 <code>0</code> )         \u2013          <p>Level of indentation.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>Pretty formatted string.</p> </li> </ul> Source code in <code>src/archan/printing.py</code> <pre><code>def pretty_description(description: str, wrap_at: int | None = None, indent: int = 0) -&gt; str:\n    \"\"\"Return a pretty formatted string given some text.\n\n    Parameters:\n        description: String to format.\n        wrap_at: Maximum length of a line.\n        indent: Level of indentation.\n\n    Returns:\n        Pretty formatted string.\n    \"\"\"\n    if wrap_at is None or wrap_at &lt; 0:\n        width = console_width(default=79)\n        if wrap_at is None:\n            wrap_at = width\n        else:\n            wrap_at += width\n\n    indent_str = \" \" * indent\n    text_wrapper = textwrap.TextWrapper(\n        width=wrap_at,\n        replace_whitespace=False,\n        initial_indent=indent_str,\n        subsequent_indent=indent_str,\n    )\n    new_desc = description.strip().split(\"\\n\")\n    separators = [index for index, line in enumerate(new_desc) if not line]\n    paragraphs = []\n    if separators:\n        start, end = 0, separators[0]\n        paragraphs.append(new_desc[start:end])\n        for sep_index in range(len(separators) - 1):\n            start = end + 1\n            end = separators[sep_index + 1]\n            paragraphs.append(new_desc[start:end])\n        paragraphs.append(new_desc[end + 1 :])\n        return \"\\n\\n\".join(text_wrapper.fill(\" \".join(prg)) for prg in paragraphs)\n    return text_wrapper.fill(\" \".join(new_desc))\n</code></pre>"},{"location":"reference/archan/plugins/","title":"Index","text":""},{"location":"reference/archan/plugins/#archan.plugins","title":"plugins","text":"<p>Plugins submodule.</p> <p>Modules:</p> <ul> <li> <code>checkers</code>         \u2013          <p>Checker module.</p> </li> <li> <code>providers</code>         \u2013          <p>Provider module.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>Argument</code>         \u2013          <p>Placeholder for name, class, description and default value.</p> </li> <li> <code>Checker</code>         \u2013          <p>Checker class.</p> </li> <li> <code>Provider</code>         \u2013          <p>Provider class.</p> </li> </ul>"},{"location":"reference/archan/plugins/#archan.plugins.Argument","title":"Argument","text":"<pre><code>Argument(\n    name: str,\n    cls: type,\n    description: str,\n    default: Any | None = None,\n)\n</code></pre> <p>             Bases: <code>PrintableArgumentMixin</code></p> <p>Placeholder for name, class, description and default value.</p> <p>Parameters:</p> <ul> <li> <code>name</code>             (<code>str</code>)         \u2013          <p>Name of the argument.</p> </li> <li> <code>cls</code>             (<code>type</code>)         \u2013          <p>Type of the argument.</p> </li> <li> <code>description</code>             (<code>str</code>)         \u2013          <p>Description of the argument.</p> </li> <li> <code>default</code>             (<code>Any | None</code>, default:                 <code>None</code> )         \u2013          <p>Default value for the argument.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>print</code>           \u2013            <p>Print self with optional indent.</p> </li> </ul> Source code in <code>src/archan/plugins/__init__.py</code> <pre><code>def __init__(self, name: str, cls: type, description: str, default: Any | None = None):\n    \"\"\"Initialization method.\n\n    Parameters:\n        name: Name of the argument.\n        cls: Type of the argument.\n        description: Description of the argument.\n        default: Default value for the argument.\n    \"\"\"\n    self.name = name\n    self.cls = cls\n    self.description = description\n    self.default = default\n</code></pre>"},{"location":"reference/archan/plugins/#archan.plugins.Argument.print","title":"print","text":"<pre><code>print(indent: int = 0) -&gt; None\n</code></pre> <p>Print self with optional indent.</p> <p>Parameters:</p> <ul> <li> <code>indent</code>             (<code>int</code>, default:                 <code>0</code> )         \u2013          <p>Indentation.</p> </li> </ul> Source code in <code>src/archan/printing.py</code> <pre><code>def print(self, indent: int = 0) -&gt; None:  # noqa: A003\n    \"\"\"Print self with optional indent.\n\n    Parameters:\n        indent: Indentation.\n    \"\"\"\n    text = \"{indent}{magenta}{name}{none} ({dim}{cls}{none}, default {dim}{default}{none})\".format(\n        indent=\" \" * indent,\n        dim=Style.DIM,\n        magenta=Fore.MAGENTA,\n        none=Style.RESET_ALL,\n        name=self.name,  # type: ignore[attr-defined]\n        cls=self.cls,  # type: ignore[attr-defined]\n        default=self.default,  # type: ignore[attr-defined]\n    )\n\n    if self.description:  # type: ignore[attr-defined]\n        text += \":\\n\" + pretty_description(self.description, indent=indent + 2)  # type: ignore[attr-defined]\n\n    print(text)\n</code></pre>"},{"location":"reference/archan/plugins/#archan.plugins.Checker","title":"Checker","text":"<pre><code>Checker(\n    name: str | None = None,\n    description: str | None = None,\n    hint: str | None = None,\n    allow_failure: bool = False,\n    passes: Any | None = None,\n    arguments: dict | None = None,\n)\n</code></pre> <p>             Bases: <code>PrintableNameMixin</code>, <code>PrintablePluginMixin</code></p> <p>Checker class.</p> <p>An instance of Checker implements a check method that analyzes an instance of DSM/DMM/MDM and return a true or false value, with optional message.</p> <p>Parameters:</p> <ul> <li> <code>name</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The checker name.</p> </li> <li> <code>description</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The checker description.</p> </li> <li> <code>hint</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Hint provided for failures.</p> </li> <li> <code>allow_failure</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Still pass if failed or not.</p> </li> <li> <code>passes</code>             (<code>Any | None</code>, default:                 <code>None</code> )         \u2013          <p>Boolean.</p> </li> <li> <code>arguments</code>             (<code>dict | None</code>, default:                 <code>None</code> )         \u2013          <p>Arguments passed to the check method when run.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>check</code>           \u2013            <p>Check the data and return a result.</p> </li> <li> <code>print</code>           \u2013            <p>Print self.</p> </li> <li> <code>print_name</code>           \u2013            <p>Print name with optional indent and end.</p> </li> <li> <code>run</code>           \u2013            <p>Run the check method and format the result for analysis.</p> </li> </ul> Source code in <code>src/archan/plugins/__init__.py</code> <pre><code>def __init__(\n    self,\n    name: str | None = None,\n    description: str | None = None,\n    hint: str | None = None,\n    allow_failure: bool = False,  # noqa: FBT001, FBT002\n    passes: Any | None = None,\n    arguments: dict | None = None,\n):\n    \"\"\"Initialization method.\n\n    Parameters:\n        name: The checker name.\n        description: The checker description.\n        hint: Hint provided for failures.\n        allow_failure: Still pass if failed or not.\n        passes: Boolean.\n        arguments: Arguments passed to the check method when run.\n    \"\"\"\n    if name:\n        self.name = name\n    if description:\n        self.description = description\n    if hint:\n        self.hint = hint\n\n    self.allow_failure = allow_failure\n    self.passes = passes\n    self.arguments = arguments or {}\n    self.result = None\n</code></pre>"},{"location":"reference/archan/plugins/#archan.plugins.Checker.check","title":"check","text":"<pre><code>check(\n    dsm: DesignStructureMatrix\n    | MultipleDomainMatrix\n    | DomainMappingMatrix,\n    **kwargs: Any\n) -&gt; tuple[Any, str]\n</code></pre> <p>Check the data and return a result.</p> <p>Parameters:</p> <ul> <li> <code>dsm</code>             (<code>DesignStructureMatrix | MultipleDomainMatrix | DomainMappingMatrix</code>)         \u2013          <p>DSM/DMM/MDM instance to check.</p> </li> <li> <code>**kwargs</code>             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Additional arguments.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>result</code> (            <code>Any</code> )        \u2013          <p>Checker constant or object with a <code>__bool__</code> method.</p> </li> <li> <code>message</code> (            <code>str</code> )        \u2013          <p>Optional messages.</p> </li> </ul> Source code in <code>src/archan/plugins/__init__.py</code> <pre><code>def check(\n    self,\n    dsm: DesignStructureMatrix | MultipleDomainMatrix | DomainMappingMatrix,\n    **kwargs: Any,\n) -&gt; tuple[Any, str]:\n    \"\"\"Check the data and return a result.\n\n    Parameters:\n        dsm: DSM/DMM/MDM instance to check.\n        **kwargs: Additional arguments.\n\n    Returns:\n        result: Checker constant or object with a ``__bool__`` method.\n        message: Optional messages.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/archan/plugins/#archan.plugins.Checker.print","title":"print","text":"<pre><code>print() -&gt; None\n</code></pre> <p>Print self.</p> Source code in <code>src/archan/printing.py</code> <pre><code>def print(self) -&gt; None:  # noqa: A003\n    \"\"\"Print self.\"\"\"\n    print(\n        f\"{Style.DIM}Identifier:{Style.RESET_ALL} {Fore.CYAN}{self.identifier}{Style.RESET_ALL}\\n\"\n        f\"{Style.DIM}Name:{Style.RESET_ALL} {self.name}\\n\"\n        f\"{Style.DIM}Description:{Style.RESET_ALL}\\n{pretty_description(self.description, indent=2)}\",\n    )\n\n    if hasattr(self, \"argument_list\") and self.argument_list:\n        print(f\"{Style.DIM}Arguments:{Style.RESET_ALL}\")\n        for argument in self.argument_list:\n            argument.print(indent=2)\n</code></pre>"},{"location":"reference/archan/plugins/#archan.plugins.Checker.print_name","title":"print_name","text":"<pre><code>print_name(indent: int = 0, end: str = '\\n') -&gt; None\n</code></pre> <p>Print name with optional indent and end.</p> <p>Parameters:</p> <ul> <li> <code>indent</code>             (<code>int</code>, default:                 <code>0</code> )         \u2013          <p>Indentation.</p> </li> <li> <code>end</code>             (<code>str</code>, default:                 <code>'\\n'</code> )         \u2013          <p>End of line.</p> </li> </ul> Source code in <code>src/archan/printing.py</code> <pre><code>def print_name(self, indent: int = 0, end: str = \"\\n\") -&gt; None:\n    \"\"\"Print name with optional indent and end.\n\n    Parameters:\n        indent: Indentation.\n        end: End of line.\n    \"\"\"\n    print(Style.BRIGHT + \" \" * indent + self.name, end=end)  # type: ignore[attr-defined]\n</code></pre>"},{"location":"reference/archan/plugins/#archan.plugins.Checker.run","title":"run","text":"<pre><code>run(\n    data: DesignStructureMatrix\n    | MultipleDomainMatrix\n    | DomainMappingMatrix,\n) -&gt; None\n</code></pre> <p>Run the check method and format the result for analysis.</p> <p>Parameters:</p> <ul> <li> <code>data</code>             (<code>DesignStructureMatrix | MultipleDomainMatrix | DomainMappingMatrix</code>)         \u2013          <p>DSM/DMM/MDM instance to check.</p> </li> </ul> Source code in <code>src/archan/plugins/__init__.py</code> <pre><code>def run(self, data: DesignStructureMatrix | MultipleDomainMatrix | DomainMappingMatrix) -&gt; None:\n    \"\"\"Run the check method and format the result for analysis.\n\n    Parameters:\n        data: DSM/DMM/MDM instance to check.\n    \"\"\"\n    result_type = namedtuple(\"Result\", \"code messages\")  # type: ignore[name-match]  # noqa: PYI024\n\n    if self.passes is True:\n        result = result_type(Checker.Code.PASSED, \"\")\n    elif self.passes is False:\n        result = (\n            result_type(Checker.Code.IGNORED, \"\") if self.allow_failure else result_type(Checker.Code.FAILED, \"\")\n        )\n    else:\n        try:\n            result = self.check(data, **self.arguments)  # type: ignore[assignment]\n        except NotImplementedError:\n            result = result_type(Checker.Code.NOT_IMPLEMENTED, \"\")\n        else:\n            messages = \"\"\n            if isinstance(result, tuple):\n                result, messages = result\n\n            if result not in Checker.Code:\n                result = Checker.Code.PASSED if bool(result) else Checker.Code.FAILED  # type: ignore[assignment]\n\n            if result == Checker.Code.FAILED and self.allow_failure:\n                result = Checker.Code.IGNORED  # type: ignore[assignment]\n\n            result = result_type(result, messages)\n    self.result = result  # type: ignore[assignment]\n</code></pre>"},{"location":"reference/archan/plugins/#archan.plugins.Provider","title":"Provider","text":"<pre><code>Provider(\n    name: str | None = None,\n    description: str | None = None,\n    arguments: dict | None = None,\n)\n</code></pre> <p>             Bases: <code>PrintableNameMixin</code>, <code>PrintablePluginMixin</code></p> <p>Provider class.</p> <p>An instance of provider implements a get_data method that returns an instance of DSM/DMM/MDM to be checked by an instance of Checker.</p> <p>Parameters:</p> <ul> <li> <code>name</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The provider name.</p> </li> <li> <code>description</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The provider description.</p> </li> <li> <code>arguments</code>             (<code>dict | None</code>, default:                 <code>None</code> )         \u2013          <p>Arguments that will be used for <code>get_data</code> method.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>get_data</code>           \u2013            <p>Abstract method. Return instance of DSM/DMM/MDM.</p> </li> <li> <code>print</code>           \u2013            <p>Print self.</p> </li> <li> <code>print_name</code>           \u2013            <p>Print name with optional indent and end.</p> </li> <li> <code>run</code>           \u2013            <p>Run the get_data method with run arguments, store the result.</p> </li> </ul> Source code in <code>src/archan/plugins/__init__.py</code> <pre><code>def __init__(\n    self,\n    name: str | None = None,\n    description: str | None = None,\n    arguments: dict | None = None,\n) -&gt; None:\n    \"\"\"Initialization method.\n\n    Parameters:\n        name: The provider name.\n        description: The provider description.\n        arguments: Arguments that will be used for `get_data` method.\n    \"\"\"\n    if name:\n        self.name = name\n    if description:\n        self.description = description\n\n    self.arguments = arguments or {}\n    self.data = None\n</code></pre>"},{"location":"reference/archan/plugins/#archan.plugins.Provider.get_data","title":"get_data","text":"<pre><code>get_data(**kwargs: Any) -&gt; Any\n</code></pre> <p>Abstract method. Return instance of DSM/DMM/MDM.</p> <p>Parameters:</p> <ul> <li> <code>**kwargs</code>             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Keyword arguments.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>NotImplementedError</code>           \u2013          <p>This method must be implemented in subclasses.</p> </li> </ul> Source code in <code>src/archan/plugins/__init__.py</code> <pre><code>def get_data(self, **kwargs: Any) -&gt; Any:\n    \"\"\"Abstract method. Return instance of DSM/DMM/MDM.\n\n    Parameters:\n        **kwargs: Keyword arguments.\n\n    Raises:\n        NotImplementedError: This method must be implemented in subclasses.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/archan/plugins/#archan.plugins.Provider.print","title":"print","text":"<pre><code>print() -&gt; None\n</code></pre> <p>Print self.</p> Source code in <code>src/archan/printing.py</code> <pre><code>def print(self) -&gt; None:  # noqa: A003\n    \"\"\"Print self.\"\"\"\n    print(\n        f\"{Style.DIM}Identifier:{Style.RESET_ALL} {Fore.CYAN}{self.identifier}{Style.RESET_ALL}\\n\"\n        f\"{Style.DIM}Name:{Style.RESET_ALL} {self.name}\\n\"\n        f\"{Style.DIM}Description:{Style.RESET_ALL}\\n{pretty_description(self.description, indent=2)}\",\n    )\n\n    if hasattr(self, \"argument_list\") and self.argument_list:\n        print(f\"{Style.DIM}Arguments:{Style.RESET_ALL}\")\n        for argument in self.argument_list:\n            argument.print(indent=2)\n</code></pre>"},{"location":"reference/archan/plugins/#archan.plugins.Provider.print_name","title":"print_name","text":"<pre><code>print_name(indent: int = 0, end: str = '\\n') -&gt; None\n</code></pre> <p>Print name with optional indent and end.</p> <p>Parameters:</p> <ul> <li> <code>indent</code>             (<code>int</code>, default:                 <code>0</code> )         \u2013          <p>Indentation.</p> </li> <li> <code>end</code>             (<code>str</code>, default:                 <code>'\\n'</code> )         \u2013          <p>End of line.</p> </li> </ul> Source code in <code>src/archan/printing.py</code> <pre><code>def print_name(self, indent: int = 0, end: str = \"\\n\") -&gt; None:\n    \"\"\"Print name with optional indent and end.\n\n    Parameters:\n        indent: Indentation.\n        end: End of line.\n    \"\"\"\n    print(Style.BRIGHT + \" \" * indent + self.name, end=end)  # type: ignore[attr-defined]\n</code></pre>"},{"location":"reference/archan/plugins/#archan.plugins.Provider.run","title":"run","text":"<pre><code>run() -&gt; None\n</code></pre> <p>Run the get_data method with run arguments, store the result.</p> Source code in <code>src/archan/plugins/__init__.py</code> <pre><code>def run(self) -&gt; None:\n    \"\"\"Run the get_data method with run arguments, store the result.\"\"\"\n    self.data = self.get_data(**self.arguments)\n</code></pre>"},{"location":"reference/archan/plugins/checkers/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> checkers","text":""},{"location":"reference/archan/plugins/checkers/#archan.plugins.checkers","title":"checkers","text":"<p>Checker module.</p> <p>Classes:</p> <ul> <li> <code>CodeClean</code>         \u2013          <p>Code clean checker.</p> </li> <li> <code>CompleteMediation</code>         \u2013          <p>Complete mediation check.</p> </li> <li> <code>EconomyOfMechanism</code>         \u2013          <p>Economy of mechanism check.</p> </li> <li> <code>LayeredArchitecture</code>         \u2013          <p>Layered architecture check.</p> </li> <li> <code>LeastCommonMechanism</code>         \u2013          <p>Least common mechanism check.</p> </li> <li> <code>LeastPrivileges</code>         \u2013          <p>Least privileges check.</p> </li> <li> <code>SeparationOfPrivileges</code>         \u2013          <p>Separation of privileges check.</p> </li> </ul>"},{"location":"reference/archan/plugins/checkers/#archan.plugins.checkers.CodeClean","title":"CodeClean","text":"<pre><code>CodeClean(\n    name: str | None = None,\n    description: str | None = None,\n    hint: str | None = None,\n    allow_failure: bool = False,\n    passes: Any | None = None,\n    arguments: dict | None = None,\n)\n</code></pre> <p>             Bases: <code>Checker</code></p> <p>Code clean checker.</p> <p>Check that the number of issues per module is below a certain value.</p> <p>Parameters:</p> <ul> <li> <code>name</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The checker name.</p> </li> <li> <code>description</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The checker description.</p> </li> <li> <code>hint</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Hint provided for failures.</p> </li> <li> <code>allow_failure</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Still pass if failed or not.</p> </li> <li> <code>passes</code>             (<code>Any | None</code>, default:                 <code>None</code> )         \u2013          <p>Boolean.</p> </li> <li> <code>arguments</code>             (<code>dict | None</code>, default:                 <code>None</code> )         \u2013          <p>Arguments passed to the check method when run.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>check</code>           \u2013            <p>Check code clean.</p> </li> <li> <code>print</code>           \u2013            <p>Print self.</p> </li> <li> <code>print_name</code>           \u2013            <p>Print name with optional indent and end.</p> </li> <li> <code>run</code>           \u2013            <p>Run the check method and format the result for analysis.</p> </li> </ul> Source code in <code>src/archan/plugins/__init__.py</code> <pre><code>def __init__(\n    self,\n    name: str | None = None,\n    description: str | None = None,\n    hint: str | None = None,\n    allow_failure: bool = False,  # noqa: FBT001, FBT002\n    passes: Any | None = None,\n    arguments: dict | None = None,\n):\n    \"\"\"Initialization method.\n\n    Parameters:\n        name: The checker name.\n        description: The checker description.\n        hint: Hint provided for failures.\n        allow_failure: Still pass if failed or not.\n        passes: Boolean.\n        arguments: Arguments passed to the check method when run.\n    \"\"\"\n    if name:\n        self.name = name\n    if description:\n        self.description = description\n    if hint:\n        self.hint = hint\n\n    self.allow_failure = allow_failure\n    self.passes = passes\n    self.arguments = arguments or {}\n    self.result = None\n</code></pre>"},{"location":"reference/archan/plugins/checkers/#archan.plugins.checkers.CodeClean.check","title":"check","text":"<pre><code>check(\n    dsm: DesignStructureMatrix\n    | MultipleDomainMatrix\n    | DomainMappingMatrix,\n    **kwargs: Any\n) -&gt; tuple[Any, str]\n</code></pre> <p>Check code clean.</p> <p>Parameters:</p> <ul> <li> <code>dsm</code>             (<code>DesignStructureMatrix | MultipleDomainMatrix | DomainMappingMatrix</code>)         \u2013          <p>The DSM to check.</p> </li> <li> <code>**kwargs</code>             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Optional additional keyword arguments.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple[Any, str]</code>         \u2013          <p>True if code clean else False, messages.</p> </li> </ul> Source code in <code>src/archan/plugins/checkers.py</code> <pre><code>def check(\n    self,\n    dsm: DesignStructureMatrix | MultipleDomainMatrix | DomainMappingMatrix,\n    **kwargs: Any,\n) -&gt; tuple[Any, str]:\n    \"\"\"Check code clean.\n\n    Parameters:\n        dsm: The DSM to check.\n        **kwargs: Optional additional keyword arguments.\n\n    Returns:\n        True if code clean else False, messages.\n    \"\"\"\n    logger.debug(f\"Entities = {dsm.entities}\")\n    messages = []\n    code_clean = True\n    threshold = kwargs.pop(\"threshold\", 1)\n    rows, _ = dsm.size\n    for i in range(rows):\n        if dsm.data[i][0] &gt; threshold:\n            messages.append(\n                f\"Number of issues ({dsm.data[i][0]}) in module {dsm.entities[i]} &gt; threshold ({threshold})\",\n            )\n            code_clean = False\n\n    return code_clean, \"\\n\".join(messages)\n</code></pre>"},{"location":"reference/archan/plugins/checkers/#archan.plugins.checkers.CodeClean.print","title":"print","text":"<pre><code>print() -&gt; None\n</code></pre> <p>Print self.</p> Source code in <code>src/archan/printing.py</code> <pre><code>def print(self) -&gt; None:  # noqa: A003\n    \"\"\"Print self.\"\"\"\n    print(\n        f\"{Style.DIM}Identifier:{Style.RESET_ALL} {Fore.CYAN}{self.identifier}{Style.RESET_ALL}\\n\"\n        f\"{Style.DIM}Name:{Style.RESET_ALL} {self.name}\\n\"\n        f\"{Style.DIM}Description:{Style.RESET_ALL}\\n{pretty_description(self.description, indent=2)}\",\n    )\n\n    if hasattr(self, \"argument_list\") and self.argument_list:\n        print(f\"{Style.DIM}Arguments:{Style.RESET_ALL}\")\n        for argument in self.argument_list:\n            argument.print(indent=2)\n</code></pre>"},{"location":"reference/archan/plugins/checkers/#archan.plugins.checkers.CodeClean.print_name","title":"print_name","text":"<pre><code>print_name(indent: int = 0, end: str = '\\n') -&gt; None\n</code></pre> <p>Print name with optional indent and end.</p> <p>Parameters:</p> <ul> <li> <code>indent</code>             (<code>int</code>, default:                 <code>0</code> )         \u2013          <p>Indentation.</p> </li> <li> <code>end</code>             (<code>str</code>, default:                 <code>'\\n'</code> )         \u2013          <p>End of line.</p> </li> </ul> Source code in <code>src/archan/printing.py</code> <pre><code>def print_name(self, indent: int = 0, end: str = \"\\n\") -&gt; None:\n    \"\"\"Print name with optional indent and end.\n\n    Parameters:\n        indent: Indentation.\n        end: End of line.\n    \"\"\"\n    print(Style.BRIGHT + \" \" * indent + self.name, end=end)  # type: ignore[attr-defined]\n</code></pre>"},{"location":"reference/archan/plugins/checkers/#archan.plugins.checkers.CodeClean.run","title":"run","text":"<pre><code>run(\n    data: DesignStructureMatrix\n    | MultipleDomainMatrix\n    | DomainMappingMatrix,\n) -&gt; None\n</code></pre> <p>Run the check method and format the result for analysis.</p> <p>Parameters:</p> <ul> <li> <code>data</code>             (<code>DesignStructureMatrix | MultipleDomainMatrix | DomainMappingMatrix</code>)         \u2013          <p>DSM/DMM/MDM instance to check.</p> </li> </ul> Source code in <code>src/archan/plugins/__init__.py</code> <pre><code>def run(self, data: DesignStructureMatrix | MultipleDomainMatrix | DomainMappingMatrix) -&gt; None:\n    \"\"\"Run the check method and format the result for analysis.\n\n    Parameters:\n        data: DSM/DMM/MDM instance to check.\n    \"\"\"\n    result_type = namedtuple(\"Result\", \"code messages\")  # type: ignore[name-match]  # noqa: PYI024\n\n    if self.passes is True:\n        result = result_type(Checker.Code.PASSED, \"\")\n    elif self.passes is False:\n        result = (\n            result_type(Checker.Code.IGNORED, \"\") if self.allow_failure else result_type(Checker.Code.FAILED, \"\")\n        )\n    else:\n        try:\n            result = self.check(data, **self.arguments)  # type: ignore[assignment]\n        except NotImplementedError:\n            result = result_type(Checker.Code.NOT_IMPLEMENTED, \"\")\n        else:\n            messages = \"\"\n            if isinstance(result, tuple):\n                result, messages = result\n\n            if result not in Checker.Code:\n                result = Checker.Code.PASSED if bool(result) else Checker.Code.FAILED  # type: ignore[assignment]\n\n            if result == Checker.Code.FAILED and self.allow_failure:\n                result = Checker.Code.IGNORED  # type: ignore[assignment]\n\n            result = result_type(result, messages)\n    self.result = result  # type: ignore[assignment]\n</code></pre>"},{"location":"reference/archan/plugins/checkers/#archan.plugins.checkers.CompleteMediation","title":"CompleteMediation","text":"<pre><code>CompleteMediation(\n    name: str | None = None,\n    description: str | None = None,\n    hint: str | None = None,\n    allow_failure: bool = False,\n    passes: Any | None = None,\n    arguments: dict | None = None,\n)\n</code></pre> <p>             Bases: <code>Checker</code></p> <p>Complete mediation check.</p> <p>Parameters:</p> <ul> <li> <code>name</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The checker name.</p> </li> <li> <code>description</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The checker description.</p> </li> <li> <code>hint</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Hint provided for failures.</p> </li> <li> <code>allow_failure</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Still pass if failed or not.</p> </li> <li> <code>passes</code>             (<code>Any | None</code>, default:                 <code>None</code> )         \u2013          <p>Boolean.</p> </li> <li> <code>arguments</code>             (<code>dict | None</code>, default:                 <code>None</code> )         \u2013          <p>Arguments passed to the check method when run.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>check</code>           \u2013            <p>Check if matrix and its mediation matrix are compliant.</p> </li> <li> <code>generate_mediation_matrix</code>           \u2013            <p>Generate the mediation matrix of the given matrix.</p> </li> <li> <code>matrices_compliance</code>           \u2013            <p>Check if matrix and its mediation matrix are compliant.</p> </li> <li> <code>print</code>           \u2013            <p>Print self.</p> </li> <li> <code>print_name</code>           \u2013            <p>Print name with optional indent and end.</p> </li> <li> <code>run</code>           \u2013            <p>Run the check method and format the result for analysis.</p> </li> </ul> Source code in <code>src/archan/plugins/__init__.py</code> <pre><code>def __init__(\n    self,\n    name: str | None = None,\n    description: str | None = None,\n    hint: str | None = None,\n    allow_failure: bool = False,  # noqa: FBT001, FBT002\n    passes: Any | None = None,\n    arguments: dict | None = None,\n):\n    \"\"\"Initialization method.\n\n    Parameters:\n        name: The checker name.\n        description: The checker description.\n        hint: Hint provided for failures.\n        allow_failure: Still pass if failed or not.\n        passes: Boolean.\n        arguments: Arguments passed to the check method when run.\n    \"\"\"\n    if name:\n        self.name = name\n    if description:\n        self.description = description\n    if hint:\n        self.hint = hint\n\n    self.allow_failure = allow_failure\n    self.passes = passes\n    self.arguments = arguments or {}\n    self.result = None\n</code></pre>"},{"location":"reference/archan/plugins/checkers/#archan.plugins.checkers.CompleteMediation.check","title":"check","text":"<pre><code>check(\n    dsm: DesignStructureMatrix\n    | MultipleDomainMatrix\n    | DomainMappingMatrix,\n    **kwargs: Any\n) -&gt; tuple[Any, str]\n</code></pre> <p>Check if matrix and its mediation matrix are compliant.</p> <p>It means that number of dependencies for each (line, column) is either 0 if the mediation matrix (line, column) is 0, or &gt;0 if the mediation matrix (line, column) is 1.</p> <p>Parameters:</p> <ul> <li> <code>dsm</code>             (<code>DesignStructureMatrix | MultipleDomainMatrix | DomainMappingMatrix</code>)         \u2013          <p>The DSM to check.</p> </li> <li> <code>**kwargs</code>             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Optional additional keyword arguments.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple[Any, str]</code>         \u2013          <p>True if compliant, else False.</p> </li> </ul> Source code in <code>src/archan/plugins/checkers.py</code> <pre><code>def check(\n    self,\n    dsm: DesignStructureMatrix | MultipleDomainMatrix | DomainMappingMatrix,\n    **kwargs: Any,  # noqa: ARG002\n) -&gt; tuple[Any, str]:\n    \"\"\"Check if matrix and its mediation matrix are compliant.\n\n    It means that number of dependencies for each (line, column) is either\n    0 if the mediation matrix (line, column) is 0, or &gt;0 if the mediation\n    matrix (line, column) is 1.\n\n    Parameters:\n        dsm: The DSM to check.\n        **kwargs: Optional additional keyword arguments.\n\n    Returns:\n        True if compliant, else False.\n    \"\"\"\n    # generate complete_mediation_matrix according to each category\n    med_matrix = CompleteMediation.generate_mediation_matrix(dsm)\n    return CompleteMediation.matrices_compliance(dsm, med_matrix)\n</code></pre>"},{"location":"reference/archan/plugins/checkers/#archan.plugins.checkers.CompleteMediation.generate_mediation_matrix","title":"generate_mediation_matrix  <code>staticmethod</code>","text":"<pre><code>generate_mediation_matrix(\n    dsm: DesignStructureMatrix\n    | MultipleDomainMatrix\n    | DomainMappingMatrix,\n) -&gt; list[list[int]]\n</code></pre> <p>Generate the mediation matrix of the given matrix.</p> <p>Rules for mediation matrix generation:</p> <ul> <li>Set <code>-1</code> for items NOT to be considered</li> <li>Set <code>0</code> for items which MUST NOT be present</li> <li>Set <code>1</code> for items which MUST be present</li> </ul> <p>Each module has optional dependencies to itself.</p> <ul> <li>Framework has optional dependency to all framework items (-1),   and to nothing else.</li> <li>Core libraries have dependencies to framework.   Dependencies to other core libraries are tolerated.</li> <li>Application libraries have dependencies to framework.   Dependencies to other core or application libraries are tolerated.   No dependencies to application modules.</li> <li>Application modules have dependencies to framework and libraries.   Dependencies to other application modules   should be mediated over a broker.   Dependencies to data are tolerated.</li> <li>Data have no dependencies at all   (but framework/libraries would be tolerated).</li> </ul> <p>Parameters:</p> <ul> <li> <code>dsm</code>             (<code>DesignStructureMatrix | MultipleDomainMatrix | DomainMappingMatrix</code>)         \u2013          <p>The DSM to generate the mediation matrix for.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>DesignStructureMatrixError</code>           \u2013          <p>The mediation matrix could not be generated.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[list[int]]</code>         \u2013          <p>The mediation matrix.</p> </li> </ul> Source code in <code>src/archan/plugins/checkers.py</code> <pre><code>@staticmethod\ndef generate_mediation_matrix(\n    dsm: DesignStructureMatrix | MultipleDomainMatrix | DomainMappingMatrix,\n) -&gt; list[list[int]]:\n    \"\"\"Generate the mediation matrix of the given matrix.\n\n    Rules for mediation matrix generation:\n\n    - Set `-1` for items **NOT** to be considered\n    - Set `0` for items which **MUST NOT** be present\n    - Set `1` for items which **MUST** be present\n\n    Each module has optional dependencies to itself.\n\n    - Framework has optional dependency to all framework items (-1),\n      and to nothing else.\n    - Core libraries have dependencies to framework.\n      Dependencies to other core libraries are tolerated.\n    - Application libraries have dependencies to framework.\n      Dependencies to other core or application libraries are tolerated.\n      No dependencies to application modules.\n    - Application modules have dependencies to framework and libraries.\n      Dependencies to other application modules\n      should be mediated over a broker.\n      Dependencies to data are tolerated.\n    - Data have no dependencies at all\n      (but framework/libraries would be tolerated).\n\n    Parameters:\n        dsm: The DSM to generate the mediation matrix for.\n\n    Raises:\n        DesignStructureMatrixError: The mediation matrix could not be generated.\n\n    Returns:\n        The mediation matrix.\n    \"\"\"\n    cat = dsm.categories\n    ent = dsm.entities\n    size = dsm.size[0]\n\n    if not cat:\n        cat = [\"appmodule\"] * size\n\n    packages = [entity.split(\".\")[0] for entity in ent]\n\n    # define and initialize the mediation matrix\n    mediation_matrix = [[0 for _ in range(size)] for _ in range(size)]\n\n    for i in range(size):\n        for j in range(size):\n            if cat[i] == \"framework\":\n                if cat[j] == \"framework\":\n                    mediation_matrix[i][j] = -1\n                else:\n                    mediation_matrix[i][j] = 0\n            elif cat[i] == \"corelib\":\n                if cat[j] in {\"framework\", \"corelib\"} or ent[i].startswith(packages[j] + \".\") or i == j:\n                    mediation_matrix[i][j] = -1\n                else:\n                    mediation_matrix[i][j] = 0\n            elif cat[i] == \"applib\":\n                if cat[j] in {\"framework\", \"corelib\", \"applib\"} or ent[i].startswith(packages[j] + \".\") or i == j:\n                    mediation_matrix[i][j] = -1\n                else:\n                    mediation_matrix[i][j] = 0\n            elif cat[i] == \"appmodule\":\n                # we cannot force an app module to import things from\n                # the broker if the broker itself did not import anything\n                ignore = (\n                    cat[j] in {\"framework\", \"corelib\", \"applib\", \"broker\", \"data\"}\n                    or ent[i].startswith(packages[j] + \".\")\n                    or i == j\n                )\n                if ignore:\n                    mediation_matrix[i][j] = -1\n                else:\n                    mediation_matrix[i][j] = 0\n            elif cat[i] == \"broker\":\n                # we cannot force the broker to import things from\n                # app modules if there is nothing to be imported.\n                # also broker should be authorized to use third apps\n                ignore = (\n                    cat[j] in {\"appmodule\", \"corelib\", \"framework\"}\n                    or ent[i].startswith(packages[j] + \".\")\n                    or i == j\n                )\n                if ignore:\n                    mediation_matrix[i][j] = -1\n                else:\n                    mediation_matrix[i][j] = 0\n            elif cat[i] == \"data\":\n                if cat[j] == \"framework\" or i == j:\n                    mediation_matrix[i][j] = -1\n                else:\n                    mediation_matrix[i][j] = 0\n            else:\n                # mediation_matrix[i][j] = -2  # errors in the generation\n                raise DesignStructureMatrixError(f\"Mediation matrix value NOT generated for {i}:{j}\")\n\n    return mediation_matrix\n</code></pre>"},{"location":"reference/archan/plugins/checkers/#archan.plugins.checkers.CompleteMediation.matrices_compliance","title":"matrices_compliance  <code>staticmethod</code>","text":"<pre><code>matrices_compliance(\n    dsm: DesignStructureMatrix\n    | MultipleDomainMatrix\n    | DomainMappingMatrix,\n    complete_mediation_matrix: list[list[int]],\n) -&gt; tuple[bool, str]\n</code></pre> <p>Check if matrix and its mediation matrix are compliant.</p> <p>Parameters:</p> <ul> <li> <code>dsm</code>             (<code>DesignStructureMatrix | MultipleDomainMatrix | DomainMappingMatrix</code>)         \u2013          <p>The DSM to check.</p> </li> <li> <code>complete_mediation_matrix</code>             (<code>list[list[int]]</code>)         \u2013          <p>2-dim array.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>DesignStructureMatrixError</code>           \u2013          <p>When the matrices are not compliant.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple[bool, str]</code>         \u2013          <p>True if compliant, else False.</p> </li> </ul> Source code in <code>src/archan/plugins/checkers.py</code> <pre><code>@staticmethod\ndef matrices_compliance(\n    dsm: DesignStructureMatrix | MultipleDomainMatrix | DomainMappingMatrix,\n    complete_mediation_matrix: list[list[int]],\n) -&gt; tuple[bool, str]:\n    \"\"\"Check if matrix and its mediation matrix are compliant.\n\n    Parameters:\n        dsm: The DSM to check.\n        complete_mediation_matrix: 2-dim array.\n\n    Raises:\n        DesignStructureMatrixError: When the matrices are not compliant.\n\n    Returns:\n        True if compliant, else False.\n    \"\"\"\n    matrix = dsm.data\n    rows_dep_matrix = len(matrix)\n    cols_dep_matrix = len(matrix[0])\n    rows_med_matrix = len(complete_mediation_matrix)\n    cols_med_matrix = len(complete_mediation_matrix[0])\n\n    if rows_dep_matrix != rows_med_matrix or cols_dep_matrix != cols_med_matrix:\n        raise DesignStructureMatrixError(\"Matrices are NOT compliant (number of rows/columns not equal)\")\n\n    discrepancy_found = False\n    messages = []\n    for i in range(rows_dep_matrix):\n        for j in range(cols_dep_matrix):\n            discrepancy = (complete_mediation_matrix[i][j] == 0 and matrix[i][j] &gt; 0) or (\n                complete_mediation_matrix[i][j] == 1 and matrix[i][j] &lt; 1\n            )\n            if discrepancy:\n                discrepancy_found = True\n                messages.append(\n                    f\"Untolerated dependency at {i}:{j} ({dsm.entities[i]}:{dsm.entities[j]}): \"\n                    f\"{matrix[i][j]} instead of {complete_mediation_matrix[i][j]}\",\n                )\n\n    message = \"\\n\".join(messages)\n\n    return not discrepancy_found, message\n</code></pre>"},{"location":"reference/archan/plugins/checkers/#archan.plugins.checkers.CompleteMediation.print","title":"print","text":"<pre><code>print() -&gt; None\n</code></pre> <p>Print self.</p> Source code in <code>src/archan/printing.py</code> <pre><code>def print(self) -&gt; None:  # noqa: A003\n    \"\"\"Print self.\"\"\"\n    print(\n        f\"{Style.DIM}Identifier:{Style.RESET_ALL} {Fore.CYAN}{self.identifier}{Style.RESET_ALL}\\n\"\n        f\"{Style.DIM}Name:{Style.RESET_ALL} {self.name}\\n\"\n        f\"{Style.DIM}Description:{Style.RESET_ALL}\\n{pretty_description(self.description, indent=2)}\",\n    )\n\n    if hasattr(self, \"argument_list\") and self.argument_list:\n        print(f\"{Style.DIM}Arguments:{Style.RESET_ALL}\")\n        for argument in self.argument_list:\n            argument.print(indent=2)\n</code></pre>"},{"location":"reference/archan/plugins/checkers/#archan.plugins.checkers.CompleteMediation.print_name","title":"print_name","text":"<pre><code>print_name(indent: int = 0, end: str = '\\n') -&gt; None\n</code></pre> <p>Print name with optional indent and end.</p> <p>Parameters:</p> <ul> <li> <code>indent</code>             (<code>int</code>, default:                 <code>0</code> )         \u2013          <p>Indentation.</p> </li> <li> <code>end</code>             (<code>str</code>, default:                 <code>'\\n'</code> )         \u2013          <p>End of line.</p> </li> </ul> Source code in <code>src/archan/printing.py</code> <pre><code>def print_name(self, indent: int = 0, end: str = \"\\n\") -&gt; None:\n    \"\"\"Print name with optional indent and end.\n\n    Parameters:\n        indent: Indentation.\n        end: End of line.\n    \"\"\"\n    print(Style.BRIGHT + \" \" * indent + self.name, end=end)  # type: ignore[attr-defined]\n</code></pre>"},{"location":"reference/archan/plugins/checkers/#archan.plugins.checkers.CompleteMediation.run","title":"run","text":"<pre><code>run(\n    data: DesignStructureMatrix\n    | MultipleDomainMatrix\n    | DomainMappingMatrix,\n) -&gt; None\n</code></pre> <p>Run the check method and format the result for analysis.</p> <p>Parameters:</p> <ul> <li> <code>data</code>             (<code>DesignStructureMatrix | MultipleDomainMatrix | DomainMappingMatrix</code>)         \u2013          <p>DSM/DMM/MDM instance to check.</p> </li> </ul> Source code in <code>src/archan/plugins/__init__.py</code> <pre><code>def run(self, data: DesignStructureMatrix | MultipleDomainMatrix | DomainMappingMatrix) -&gt; None:\n    \"\"\"Run the check method and format the result for analysis.\n\n    Parameters:\n        data: DSM/DMM/MDM instance to check.\n    \"\"\"\n    result_type = namedtuple(\"Result\", \"code messages\")  # type: ignore[name-match]  # noqa: PYI024\n\n    if self.passes is True:\n        result = result_type(Checker.Code.PASSED, \"\")\n    elif self.passes is False:\n        result = (\n            result_type(Checker.Code.IGNORED, \"\") if self.allow_failure else result_type(Checker.Code.FAILED, \"\")\n        )\n    else:\n        try:\n            result = self.check(data, **self.arguments)  # type: ignore[assignment]\n        except NotImplementedError:\n            result = result_type(Checker.Code.NOT_IMPLEMENTED, \"\")\n        else:\n            messages = \"\"\n            if isinstance(result, tuple):\n                result, messages = result\n\n            if result not in Checker.Code:\n                result = Checker.Code.PASSED if bool(result) else Checker.Code.FAILED  # type: ignore[assignment]\n\n            if result == Checker.Code.FAILED and self.allow_failure:\n                result = Checker.Code.IGNORED  # type: ignore[assignment]\n\n            result = result_type(result, messages)\n    self.result = result  # type: ignore[assignment]\n</code></pre>"},{"location":"reference/archan/plugins/checkers/#archan.plugins.checkers.EconomyOfMechanism","title":"EconomyOfMechanism","text":"<pre><code>EconomyOfMechanism(\n    name: str | None = None,\n    description: str | None = None,\n    hint: str | None = None,\n    allow_failure: bool = False,\n    passes: Any | None = None,\n    arguments: dict | None = None,\n)\n</code></pre> <p>             Bases: <code>Checker</code></p> <p>Economy of mechanism check.</p> <p>Parameters:</p> <ul> <li> <code>name</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The checker name.</p> </li> <li> <code>description</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The checker description.</p> </li> <li> <code>hint</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Hint provided for failures.</p> </li> <li> <code>allow_failure</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Still pass if failed or not.</p> </li> <li> <code>passes</code>             (<code>Any | None</code>, default:                 <code>None</code> )         \u2013          <p>Boolean.</p> </li> <li> <code>arguments</code>             (<code>dict | None</code>, default:                 <code>None</code> )         \u2013          <p>Arguments passed to the check method when run.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>check</code>           \u2013            <p>Check economy of mechanism.</p> </li> <li> <code>print</code>           \u2013            <p>Print self.</p> </li> <li> <code>print_name</code>           \u2013            <p>Print name with optional indent and end.</p> </li> <li> <code>run</code>           \u2013            <p>Run the check method and format the result for analysis.</p> </li> </ul> Source code in <code>src/archan/plugins/__init__.py</code> <pre><code>def __init__(\n    self,\n    name: str | None = None,\n    description: str | None = None,\n    hint: str | None = None,\n    allow_failure: bool = False,  # noqa: FBT001, FBT002\n    passes: Any | None = None,\n    arguments: dict | None = None,\n):\n    \"\"\"Initialization method.\n\n    Parameters:\n        name: The checker name.\n        description: The checker description.\n        hint: Hint provided for failures.\n        allow_failure: Still pass if failed or not.\n        passes: Boolean.\n        arguments: Arguments passed to the check method when run.\n    \"\"\"\n    if name:\n        self.name = name\n    if description:\n        self.description = description\n    if hint:\n        self.hint = hint\n\n    self.allow_failure = allow_failure\n    self.passes = passes\n    self.arguments = arguments or {}\n    self.result = None\n</code></pre>"},{"location":"reference/archan/plugins/checkers/#archan.plugins.checkers.EconomyOfMechanism.check","title":"check","text":"<pre><code>check(\n    dsm: DesignStructureMatrix\n    | MultipleDomainMatrix\n    | DomainMappingMatrix,\n    simplicity_factor: int = 2,\n    **kwargs: Any\n) -&gt; tuple[Any, str]\n</code></pre> <p>Check economy of mechanism.</p> <p>As first abstraction, number of dependencies between two modules &lt; 2 * the number of modules (dependencies to the framework are NOT considered).</p> <p>Parameters:</p> <ul> <li> <code>dsm</code>             (<code>DesignStructureMatrix | MultipleDomainMatrix | DomainMappingMatrix</code>)         \u2013          <p>The DSM to check.</p> </li> <li> <code>simplicity_factor</code>             (<code>int</code>, default:                 <code>2</code> )         \u2013          <p>Simplicity factor.</p> </li> <li> <code>**kwargs</code>             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Optional additional keyword arguments.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple[Any, str]</code>         \u2013          <p>True if economic, else False.</p> </li> </ul> Source code in <code>src/archan/plugins/checkers.py</code> <pre><code>def check(\n    self,\n    dsm: DesignStructureMatrix | MultipleDomainMatrix | DomainMappingMatrix,\n    simplicity_factor: int = 2,\n    **kwargs: Any,  # noqa: ARG002\n) -&gt; tuple[Any, str]:\n    \"\"\"Check economy of mechanism.\n\n    As first abstraction, number of dependencies between two modules\n    &lt; 2 * the number of modules\n    (dependencies to the framework are NOT considered).\n\n    Parameters:\n        dsm: The DSM to check.\n        simplicity_factor: Simplicity factor.\n        **kwargs: Optional additional keyword arguments.\n\n    Returns:\n        True if economic, else False.\n    \"\"\"\n    # economy_of_mechanism\n    economy_of_mechanism = False\n    message = \"\"\n    data = dsm.data\n    categories = dsm.categories\n    dsm_size = dsm.size[0]\n\n    if not categories:\n        categories = [\"appmodule\"] * dsm_size\n\n    dependency_number = 0\n    # evaluate Matrix(data)\n    for i in range(dsm_size):\n        for j in range(dsm_size):\n            count_dependency = (\n                categories[i] not in {\"framework\", \"corelib\"}\n                and categories[j] not in {\"framework\", \"corelib\"}\n                and data[i][j] &gt; 0\n            )\n            if count_dependency:\n                dependency_number += 1\n                # check comparison result\n    if dependency_number &lt; dsm_size * simplicity_factor:\n        economy_of_mechanism = True\n    else:\n        message = \" \".join(\n            [\n                f\"Number of dependencies ({dependency_number})\",\n                f\"&gt; number of rows ({dsm_size})\",\n                f\"* simplicity factor ({simplicity_factor}) = {dsm_size * simplicity_factor}\",\n            ],\n        )\n    return economy_of_mechanism, message\n</code></pre>"},{"location":"reference/archan/plugins/checkers/#archan.plugins.checkers.EconomyOfMechanism.print","title":"print","text":"<pre><code>print() -&gt; None\n</code></pre> <p>Print self.</p> Source code in <code>src/archan/printing.py</code> <pre><code>def print(self) -&gt; None:  # noqa: A003\n    \"\"\"Print self.\"\"\"\n    print(\n        f\"{Style.DIM}Identifier:{Style.RESET_ALL} {Fore.CYAN}{self.identifier}{Style.RESET_ALL}\\n\"\n        f\"{Style.DIM}Name:{Style.RESET_ALL} {self.name}\\n\"\n        f\"{Style.DIM}Description:{Style.RESET_ALL}\\n{pretty_description(self.description, indent=2)}\",\n    )\n\n    if hasattr(self, \"argument_list\") and self.argument_list:\n        print(f\"{Style.DIM}Arguments:{Style.RESET_ALL}\")\n        for argument in self.argument_list:\n            argument.print(indent=2)\n</code></pre>"},{"location":"reference/archan/plugins/checkers/#archan.plugins.checkers.EconomyOfMechanism.print_name","title":"print_name","text":"<pre><code>print_name(indent: int = 0, end: str = '\\n') -&gt; None\n</code></pre> <p>Print name with optional indent and end.</p> <p>Parameters:</p> <ul> <li> <code>indent</code>             (<code>int</code>, default:                 <code>0</code> )         \u2013          <p>Indentation.</p> </li> <li> <code>end</code>             (<code>str</code>, default:                 <code>'\\n'</code> )         \u2013          <p>End of line.</p> </li> </ul> Source code in <code>src/archan/printing.py</code> <pre><code>def print_name(self, indent: int = 0, end: str = \"\\n\") -&gt; None:\n    \"\"\"Print name with optional indent and end.\n\n    Parameters:\n        indent: Indentation.\n        end: End of line.\n    \"\"\"\n    print(Style.BRIGHT + \" \" * indent + self.name, end=end)  # type: ignore[attr-defined]\n</code></pre>"},{"location":"reference/archan/plugins/checkers/#archan.plugins.checkers.EconomyOfMechanism.run","title":"run","text":"<pre><code>run(\n    data: DesignStructureMatrix\n    | MultipleDomainMatrix\n    | DomainMappingMatrix,\n) -&gt; None\n</code></pre> <p>Run the check method and format the result for analysis.</p> <p>Parameters:</p> <ul> <li> <code>data</code>             (<code>DesignStructureMatrix | MultipleDomainMatrix | DomainMappingMatrix</code>)         \u2013          <p>DSM/DMM/MDM instance to check.</p> </li> </ul> Source code in <code>src/archan/plugins/__init__.py</code> <pre><code>def run(self, data: DesignStructureMatrix | MultipleDomainMatrix | DomainMappingMatrix) -&gt; None:\n    \"\"\"Run the check method and format the result for analysis.\n\n    Parameters:\n        data: DSM/DMM/MDM instance to check.\n    \"\"\"\n    result_type = namedtuple(\"Result\", \"code messages\")  # type: ignore[name-match]  # noqa: PYI024\n\n    if self.passes is True:\n        result = result_type(Checker.Code.PASSED, \"\")\n    elif self.passes is False:\n        result = (\n            result_type(Checker.Code.IGNORED, \"\") if self.allow_failure else result_type(Checker.Code.FAILED, \"\")\n        )\n    else:\n        try:\n            result = self.check(data, **self.arguments)  # type: ignore[assignment]\n        except NotImplementedError:\n            result = result_type(Checker.Code.NOT_IMPLEMENTED, \"\")\n        else:\n            messages = \"\"\n            if isinstance(result, tuple):\n                result, messages = result\n\n            if result not in Checker.Code:\n                result = Checker.Code.PASSED if bool(result) else Checker.Code.FAILED  # type: ignore[assignment]\n\n            if result == Checker.Code.FAILED and self.allow_failure:\n                result = Checker.Code.IGNORED  # type: ignore[assignment]\n\n            result = result_type(result, messages)\n    self.result = result  # type: ignore[assignment]\n</code></pre>"},{"location":"reference/archan/plugins/checkers/#archan.plugins.checkers.LayeredArchitecture","title":"LayeredArchitecture","text":"<pre><code>LayeredArchitecture(\n    name: str | None = None,\n    description: str | None = None,\n    hint: str | None = None,\n    allow_failure: bool = False,\n    passes: Any | None = None,\n    arguments: dict | None = None,\n)\n</code></pre> <p>             Bases: <code>Checker</code></p> <p>Layered architecture check.</p> <p>Check that the DSM can be diagonalized (no marks in upper right or lower left corner).</p> <p>Parameters:</p> <ul> <li> <code>name</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The checker name.</p> </li> <li> <code>description</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The checker description.</p> </li> <li> <code>hint</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Hint provided for failures.</p> </li> <li> <code>allow_failure</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Still pass if failed or not.</p> </li> <li> <code>passes</code>             (<code>Any | None</code>, default:                 <code>None</code> )         \u2013          <p>Boolean.</p> </li> <li> <code>arguments</code>             (<code>dict | None</code>, default:                 <code>None</code> )         \u2013          <p>Arguments passed to the check method when run.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>check</code>           \u2013            <p>Check layered architecture.</p> </li> <li> <code>print</code>           \u2013            <p>Print self.</p> </li> <li> <code>print_name</code>           \u2013            <p>Print name with optional indent and end.</p> </li> <li> <code>run</code>           \u2013            <p>Run the check method and format the result for analysis.</p> </li> </ul> Source code in <code>src/archan/plugins/__init__.py</code> <pre><code>def __init__(\n    self,\n    name: str | None = None,\n    description: str | None = None,\n    hint: str | None = None,\n    allow_failure: bool = False,  # noqa: FBT001, FBT002\n    passes: Any | None = None,\n    arguments: dict | None = None,\n):\n    \"\"\"Initialization method.\n\n    Parameters:\n        name: The checker name.\n        description: The checker description.\n        hint: Hint provided for failures.\n        allow_failure: Still pass if failed or not.\n        passes: Boolean.\n        arguments: Arguments passed to the check method when run.\n    \"\"\"\n    if name:\n        self.name = name\n    if description:\n        self.description = description\n    if hint:\n        self.hint = hint\n\n    self.allow_failure = allow_failure\n    self.passes = passes\n    self.arguments = arguments or {}\n    self.result = None\n</code></pre>"},{"location":"reference/archan/plugins/checkers/#archan.plugins.checkers.LayeredArchitecture.check","title":"check","text":"<pre><code>check(\n    dsm: DesignStructureMatrix\n    | MultipleDomainMatrix\n    | DomainMappingMatrix,\n    **kwargs: Any\n) -&gt; tuple[Any, str]\n</code></pre> <p>Check layered architecture.</p> <p>Parameters:</p> <ul> <li> <code>dsm</code>             (<code>DesignStructureMatrix | MultipleDomainMatrix | DomainMappingMatrix</code>)         \u2013          <p>The DSM to check.</p> </li> <li> <code>**kwargs</code>             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Optional additional keyword arguments.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple[Any, str]</code>         \u2013          <p>True if layered architecture else False, messages.</p> </li> </ul> Source code in <code>src/archan/plugins/checkers.py</code> <pre><code>def check(\n    self,\n    dsm: DesignStructureMatrix | MultipleDomainMatrix | DomainMappingMatrix,\n    **kwargs: Any,  # noqa: ARG002\n) -&gt; tuple[Any, str]:\n    \"\"\"Check layered architecture.\n\n    Parameters:\n        dsm: The DSM to check.\n        **kwargs: Optional additional keyword arguments.\n\n    Returns:\n        True if layered architecture else False, messages.\n    \"\"\"\n    layered_architecture = True\n    messages = []\n    categories = dsm.categories\n    dsm_size = dsm.size[0]\n\n    if not categories:\n        categories = [\"appmodule\"] * dsm_size\n\n    for i in range(dsm_size - 1):\n        for j in range(i + 1, dsm_size):\n            check_cell = (\n                categories[i] != \"broker\"\n                and categories[j] != \"broker\"\n                and dsm.entities[i].split(\".\")[0] != dsm.entities[j].split(\".\")[0]\n            )\n            if check_cell and dsm.data[i][j] &gt; 0:\n                layered_architecture = False\n                messages.append(\n                    f\"Dependency from {dsm.entities[i]} to {dsm.entities[j]} breaks the layered architecture.\",\n                )\n\n    return layered_architecture, \"\\n\".join(messages)\n</code></pre>"},{"location":"reference/archan/plugins/checkers/#archan.plugins.checkers.LayeredArchitecture.print","title":"print","text":"<pre><code>print() -&gt; None\n</code></pre> <p>Print self.</p> Source code in <code>src/archan/printing.py</code> <pre><code>def print(self) -&gt; None:  # noqa: A003\n    \"\"\"Print self.\"\"\"\n    print(\n        f\"{Style.DIM}Identifier:{Style.RESET_ALL} {Fore.CYAN}{self.identifier}{Style.RESET_ALL}\\n\"\n        f\"{Style.DIM}Name:{Style.RESET_ALL} {self.name}\\n\"\n        f\"{Style.DIM}Description:{Style.RESET_ALL}\\n{pretty_description(self.description, indent=2)}\",\n    )\n\n    if hasattr(self, \"argument_list\") and self.argument_list:\n        print(f\"{Style.DIM}Arguments:{Style.RESET_ALL}\")\n        for argument in self.argument_list:\n            argument.print(indent=2)\n</code></pre>"},{"location":"reference/archan/plugins/checkers/#archan.plugins.checkers.LayeredArchitecture.print_name","title":"print_name","text":"<pre><code>print_name(indent: int = 0, end: str = '\\n') -&gt; None\n</code></pre> <p>Print name with optional indent and end.</p> <p>Parameters:</p> <ul> <li> <code>indent</code>             (<code>int</code>, default:                 <code>0</code> )         \u2013          <p>Indentation.</p> </li> <li> <code>end</code>             (<code>str</code>, default:                 <code>'\\n'</code> )         \u2013          <p>End of line.</p> </li> </ul> Source code in <code>src/archan/printing.py</code> <pre><code>def print_name(self, indent: int = 0, end: str = \"\\n\") -&gt; None:\n    \"\"\"Print name with optional indent and end.\n\n    Parameters:\n        indent: Indentation.\n        end: End of line.\n    \"\"\"\n    print(Style.BRIGHT + \" \" * indent + self.name, end=end)  # type: ignore[attr-defined]\n</code></pre>"},{"location":"reference/archan/plugins/checkers/#archan.plugins.checkers.LayeredArchitecture.run","title":"run","text":"<pre><code>run(\n    data: DesignStructureMatrix\n    | MultipleDomainMatrix\n    | DomainMappingMatrix,\n) -&gt; None\n</code></pre> <p>Run the check method and format the result for analysis.</p> <p>Parameters:</p> <ul> <li> <code>data</code>             (<code>DesignStructureMatrix | MultipleDomainMatrix | DomainMappingMatrix</code>)         \u2013          <p>DSM/DMM/MDM instance to check.</p> </li> </ul> Source code in <code>src/archan/plugins/__init__.py</code> <pre><code>def run(self, data: DesignStructureMatrix | MultipleDomainMatrix | DomainMappingMatrix) -&gt; None:\n    \"\"\"Run the check method and format the result for analysis.\n\n    Parameters:\n        data: DSM/DMM/MDM instance to check.\n    \"\"\"\n    result_type = namedtuple(\"Result\", \"code messages\")  # type: ignore[name-match]  # noqa: PYI024\n\n    if self.passes is True:\n        result = result_type(Checker.Code.PASSED, \"\")\n    elif self.passes is False:\n        result = (\n            result_type(Checker.Code.IGNORED, \"\") if self.allow_failure else result_type(Checker.Code.FAILED, \"\")\n        )\n    else:\n        try:\n            result = self.check(data, **self.arguments)  # type: ignore[assignment]\n        except NotImplementedError:\n            result = result_type(Checker.Code.NOT_IMPLEMENTED, \"\")\n        else:\n            messages = \"\"\n            if isinstance(result, tuple):\n                result, messages = result\n\n            if result not in Checker.Code:\n                result = Checker.Code.PASSED if bool(result) else Checker.Code.FAILED  # type: ignore[assignment]\n\n            if result == Checker.Code.FAILED and self.allow_failure:\n                result = Checker.Code.IGNORED  # type: ignore[assignment]\n\n            result = result_type(result, messages)\n    self.result = result  # type: ignore[assignment]\n</code></pre>"},{"location":"reference/archan/plugins/checkers/#archan.plugins.checkers.LeastCommonMechanism","title":"LeastCommonMechanism","text":"<pre><code>LeastCommonMechanism(\n    name: str | None = None,\n    description: str | None = None,\n    hint: str | None = None,\n    allow_failure: bool = False,\n    passes: Any | None = None,\n    arguments: dict | None = None,\n)\n</code></pre> <p>             Bases: <code>Checker</code></p> <p>Least common mechanism check.</p> <p>Parameters:</p> <ul> <li> <code>name</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The checker name.</p> </li> <li> <code>description</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The checker description.</p> </li> <li> <code>hint</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Hint provided for failures.</p> </li> <li> <code>allow_failure</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Still pass if failed or not.</p> </li> <li> <code>passes</code>             (<code>Any | None</code>, default:                 <code>None</code> )         \u2013          <p>Boolean.</p> </li> <li> <code>arguments</code>             (<code>dict | None</code>, default:                 <code>None</code> )         \u2013          <p>Arguments passed to the check method when run.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>check</code>           \u2013            <p>Check least common mechanism.</p> </li> <li> <code>print</code>           \u2013            <p>Print self.</p> </li> <li> <code>print_name</code>           \u2013            <p>Print name with optional indent and end.</p> </li> <li> <code>run</code>           \u2013            <p>Run the check method and format the result for analysis.</p> </li> </ul> Source code in <code>src/archan/plugins/__init__.py</code> <pre><code>def __init__(\n    self,\n    name: str | None = None,\n    description: str | None = None,\n    hint: str | None = None,\n    allow_failure: bool = False,  # noqa: FBT001, FBT002\n    passes: Any | None = None,\n    arguments: dict | None = None,\n):\n    \"\"\"Initialization method.\n\n    Parameters:\n        name: The checker name.\n        description: The checker description.\n        hint: Hint provided for failures.\n        allow_failure: Still pass if failed or not.\n        passes: Boolean.\n        arguments: Arguments passed to the check method when run.\n    \"\"\"\n    if name:\n        self.name = name\n    if description:\n        self.description = description\n    if hint:\n        self.hint = hint\n\n    self.allow_failure = allow_failure\n    self.passes = passes\n    self.arguments = arguments or {}\n    self.result = None\n</code></pre>"},{"location":"reference/archan/plugins/checkers/#archan.plugins.checkers.LeastCommonMechanism.check","title":"check","text":"<pre><code>check(\n    dsm: DesignStructureMatrix\n    | MultipleDomainMatrix\n    | DomainMappingMatrix,\n    independence_factor: int = 5,\n    **kwargs: Any\n) -&gt; tuple[Any, str]\n</code></pre> <p>Check least common mechanism.</p> <p>Parameters:</p> <ul> <li> <code>dsm</code>             (<code>DesignStructureMatrix | MultipleDomainMatrix | DomainMappingMatrix</code>)         \u2013          <p>The DSM to check.</p> </li> <li> <code>independence_factor</code>             (<code>int</code>, default:                 <code>5</code> )         \u2013          <p>If the maximum dependencies for one module is inferior or equal to the DSM size divided by the independence factor, then this criterion is verified.</p> </li> <li> <code>**kwargs</code>             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Optional additional keyword arguments.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple[Any, str]</code>         \u2013          <p>True if least common mechanism, else False.</p> </li> </ul> Source code in <code>src/archan/plugins/checkers.py</code> <pre><code>def check(\n    self,\n    dsm: DesignStructureMatrix | MultipleDomainMatrix | DomainMappingMatrix,\n    independence_factor: int = 5,\n    **kwargs: Any,  # noqa: ARG002\n) -&gt; tuple[Any, str]:\n    \"\"\"Check least common mechanism.\n\n    Parameters:\n        dsm: The DSM to check.\n        independence_factor: If the maximum dependencies for one\n            module is inferior or equal to the DSM size divided by the\n            independence factor, then this criterion is verified.\n        **kwargs: Optional additional keyword arguments.\n\n    Returns:\n        True if least common mechanism, else False.\n    \"\"\"\n    # leastCommonMechanismMatrix\n    least_common_mechanism = False\n    message = \"\"\n    # get the list of dependent modules for each module\n    data = dsm.data\n    categories = dsm.categories\n    dsm_size = dsm.size[0]\n\n    if not categories:\n        categories = [\"appmodule\"] * dsm_size\n\n    dependent_module_number = []\n    # evaluate Matrix(data)\n    for j in range(dsm_size):\n        dependent_module_number.append(0)\n        for i in range(dsm_size):\n            if categories[i] != \"framework\" and categories[j] != \"framework\" and data[i][j] &gt; 0:\n                dependent_module_number[j] += 1\n    # except for the broker if any  and libs, check that threshold is not\n    # overlapped\n    #  index of brokers\n    #  and app_libs are set to 0\n    for index, item in enumerate(dsm.categories):\n        if item in {\"broker\", \"applib\"}:\n            dependent_module_number[index] = 0\n    if max(dependent_module_number) &lt;= dsm_size / independence_factor:\n        least_common_mechanism = True\n    else:\n        maximum = max(dependent_module_number)\n        module = dsm.entities[dependent_module_number.index(maximum)]\n        message = (\n            f\"Dependencies to {module} ({maximum}) &gt; matrix size ({dsm_size}) / \"\n            \"independence factor ({independence_factor}) = {dsm_size / independence_factor\"\n        )\n\n    return least_common_mechanism, message\n</code></pre>"},{"location":"reference/archan/plugins/checkers/#archan.plugins.checkers.LeastCommonMechanism.print","title":"print","text":"<pre><code>print() -&gt; None\n</code></pre> <p>Print self.</p> Source code in <code>src/archan/printing.py</code> <pre><code>def print(self) -&gt; None:  # noqa: A003\n    \"\"\"Print self.\"\"\"\n    print(\n        f\"{Style.DIM}Identifier:{Style.RESET_ALL} {Fore.CYAN}{self.identifier}{Style.RESET_ALL}\\n\"\n        f\"{Style.DIM}Name:{Style.RESET_ALL} {self.name}\\n\"\n        f\"{Style.DIM}Description:{Style.RESET_ALL}\\n{pretty_description(self.description, indent=2)}\",\n    )\n\n    if hasattr(self, \"argument_list\") and self.argument_list:\n        print(f\"{Style.DIM}Arguments:{Style.RESET_ALL}\")\n        for argument in self.argument_list:\n            argument.print(indent=2)\n</code></pre>"},{"location":"reference/archan/plugins/checkers/#archan.plugins.checkers.LeastCommonMechanism.print_name","title":"print_name","text":"<pre><code>print_name(indent: int = 0, end: str = '\\n') -&gt; None\n</code></pre> <p>Print name with optional indent and end.</p> <p>Parameters:</p> <ul> <li> <code>indent</code>             (<code>int</code>, default:                 <code>0</code> )         \u2013          <p>Indentation.</p> </li> <li> <code>end</code>             (<code>str</code>, default:                 <code>'\\n'</code> )         \u2013          <p>End of line.</p> </li> </ul> Source code in <code>src/archan/printing.py</code> <pre><code>def print_name(self, indent: int = 0, end: str = \"\\n\") -&gt; None:\n    \"\"\"Print name with optional indent and end.\n\n    Parameters:\n        indent: Indentation.\n        end: End of line.\n    \"\"\"\n    print(Style.BRIGHT + \" \" * indent + self.name, end=end)  # type: ignore[attr-defined]\n</code></pre>"},{"location":"reference/archan/plugins/checkers/#archan.plugins.checkers.LeastCommonMechanism.run","title":"run","text":"<pre><code>run(\n    data: DesignStructureMatrix\n    | MultipleDomainMatrix\n    | DomainMappingMatrix,\n) -&gt; None\n</code></pre> <p>Run the check method and format the result for analysis.</p> <p>Parameters:</p> <ul> <li> <code>data</code>             (<code>DesignStructureMatrix | MultipleDomainMatrix | DomainMappingMatrix</code>)         \u2013          <p>DSM/DMM/MDM instance to check.</p> </li> </ul> Source code in <code>src/archan/plugins/__init__.py</code> <pre><code>def run(self, data: DesignStructureMatrix | MultipleDomainMatrix | DomainMappingMatrix) -&gt; None:\n    \"\"\"Run the check method and format the result for analysis.\n\n    Parameters:\n        data: DSM/DMM/MDM instance to check.\n    \"\"\"\n    result_type = namedtuple(\"Result\", \"code messages\")  # type: ignore[name-match]  # noqa: PYI024\n\n    if self.passes is True:\n        result = result_type(Checker.Code.PASSED, \"\")\n    elif self.passes is False:\n        result = (\n            result_type(Checker.Code.IGNORED, \"\") if self.allow_failure else result_type(Checker.Code.FAILED, \"\")\n        )\n    else:\n        try:\n            result = self.check(data, **self.arguments)  # type: ignore[assignment]\n        except NotImplementedError:\n            result = result_type(Checker.Code.NOT_IMPLEMENTED, \"\")\n        else:\n            messages = \"\"\n            if isinstance(result, tuple):\n                result, messages = result\n\n            if result not in Checker.Code:\n                result = Checker.Code.PASSED if bool(result) else Checker.Code.FAILED  # type: ignore[assignment]\n\n            if result == Checker.Code.FAILED and self.allow_failure:\n                result = Checker.Code.IGNORED  # type: ignore[assignment]\n\n            result = result_type(result, messages)\n    self.result = result  # type: ignore[assignment]\n</code></pre>"},{"location":"reference/archan/plugins/checkers/#archan.plugins.checkers.LeastPrivileges","title":"LeastPrivileges","text":"<pre><code>LeastPrivileges(\n    name: str | None = None,\n    description: str | None = None,\n    hint: str | None = None,\n    allow_failure: bool = False,\n    passes: Any | None = None,\n    arguments: dict | None = None,\n)\n</code></pre> <p>             Bases: <code>Checker</code></p> <p>Least privileges check.</p> <p>Parameters:</p> <ul> <li> <code>name</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The checker name.</p> </li> <li> <code>description</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The checker description.</p> </li> <li> <code>hint</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Hint provided for failures.</p> </li> <li> <code>allow_failure</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Still pass if failed or not.</p> </li> <li> <code>passes</code>             (<code>Any | None</code>, default:                 <code>None</code> )         \u2013          <p>Boolean.</p> </li> <li> <code>arguments</code>             (<code>dict | None</code>, default:                 <code>None</code> )         \u2013          <p>Arguments passed to the check method when run.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>check</code>           \u2013            <p>Todo</p> <p>To implement.</p> </li> <li> <code>print</code>           \u2013            <p>Print self.</p> </li> <li> <code>print_name</code>           \u2013            <p>Print name with optional indent and end.</p> </li> <li> <code>run</code>           \u2013            <p>Run the check method and format the result for analysis.</p> </li> </ul> Source code in <code>src/archan/plugins/__init__.py</code> <pre><code>def __init__(\n    self,\n    name: str | None = None,\n    description: str | None = None,\n    hint: str | None = None,\n    allow_failure: bool = False,  # noqa: FBT001, FBT002\n    passes: Any | None = None,\n    arguments: dict | None = None,\n):\n    \"\"\"Initialization method.\n\n    Parameters:\n        name: The checker name.\n        description: The checker description.\n        hint: Hint provided for failures.\n        allow_failure: Still pass if failed or not.\n        passes: Boolean.\n        arguments: Arguments passed to the check method when run.\n    \"\"\"\n    if name:\n        self.name = name\n    if description:\n        self.description = description\n    if hint:\n        self.hint = hint\n\n    self.allow_failure = allow_failure\n    self.passes = passes\n    self.arguments = arguments or {}\n    self.result = None\n</code></pre>"},{"location":"reference/archan/plugins/checkers/#archan.plugins.checkers.LeastPrivileges.check","title":"check","text":"<pre><code>check(\n    dsm: DesignStructureMatrix\n    | MultipleDomainMatrix\n    | DomainMappingMatrix,\n    **kwargs: Any\n) -&gt; tuple[Any, str]\n</code></pre> <p>Todo</p> <p>To implement.</p> Source code in <code>src/archan/plugins/checkers.py</code> <pre><code>def check(\n    self,\n    dsm: DesignStructureMatrix | MultipleDomainMatrix | DomainMappingMatrix,\n    **kwargs: Any,\n) -&gt; tuple[Any, str]:\n    \"\"\"TODO: To implement.\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/archan/plugins/checkers/#archan.plugins.checkers.LeastPrivileges.print","title":"print","text":"<pre><code>print() -&gt; None\n</code></pre> <p>Print self.</p> Source code in <code>src/archan/printing.py</code> <pre><code>def print(self) -&gt; None:  # noqa: A003\n    \"\"\"Print self.\"\"\"\n    print(\n        f\"{Style.DIM}Identifier:{Style.RESET_ALL} {Fore.CYAN}{self.identifier}{Style.RESET_ALL}\\n\"\n        f\"{Style.DIM}Name:{Style.RESET_ALL} {self.name}\\n\"\n        f\"{Style.DIM}Description:{Style.RESET_ALL}\\n{pretty_description(self.description, indent=2)}\",\n    )\n\n    if hasattr(self, \"argument_list\") and self.argument_list:\n        print(f\"{Style.DIM}Arguments:{Style.RESET_ALL}\")\n        for argument in self.argument_list:\n            argument.print(indent=2)\n</code></pre>"},{"location":"reference/archan/plugins/checkers/#archan.plugins.checkers.LeastPrivileges.print_name","title":"print_name","text":"<pre><code>print_name(indent: int = 0, end: str = '\\n') -&gt; None\n</code></pre> <p>Print name with optional indent and end.</p> <p>Parameters:</p> <ul> <li> <code>indent</code>             (<code>int</code>, default:                 <code>0</code> )         \u2013          <p>Indentation.</p> </li> <li> <code>end</code>             (<code>str</code>, default:                 <code>'\\n'</code> )         \u2013          <p>End of line.</p> </li> </ul> Source code in <code>src/archan/printing.py</code> <pre><code>def print_name(self, indent: int = 0, end: str = \"\\n\") -&gt; None:\n    \"\"\"Print name with optional indent and end.\n\n    Parameters:\n        indent: Indentation.\n        end: End of line.\n    \"\"\"\n    print(Style.BRIGHT + \" \" * indent + self.name, end=end)  # type: ignore[attr-defined]\n</code></pre>"},{"location":"reference/archan/plugins/checkers/#archan.plugins.checkers.LeastPrivileges.run","title":"run","text":"<pre><code>run(\n    data: DesignStructureMatrix\n    | MultipleDomainMatrix\n    | DomainMappingMatrix,\n) -&gt; None\n</code></pre> <p>Run the check method and format the result for analysis.</p> <p>Parameters:</p> <ul> <li> <code>data</code>             (<code>DesignStructureMatrix | MultipleDomainMatrix | DomainMappingMatrix</code>)         \u2013          <p>DSM/DMM/MDM instance to check.</p> </li> </ul> Source code in <code>src/archan/plugins/__init__.py</code> <pre><code>def run(self, data: DesignStructureMatrix | MultipleDomainMatrix | DomainMappingMatrix) -&gt; None:\n    \"\"\"Run the check method and format the result for analysis.\n\n    Parameters:\n        data: DSM/DMM/MDM instance to check.\n    \"\"\"\n    result_type = namedtuple(\"Result\", \"code messages\")  # type: ignore[name-match]  # noqa: PYI024\n\n    if self.passes is True:\n        result = result_type(Checker.Code.PASSED, \"\")\n    elif self.passes is False:\n        result = (\n            result_type(Checker.Code.IGNORED, \"\") if self.allow_failure else result_type(Checker.Code.FAILED, \"\")\n        )\n    else:\n        try:\n            result = self.check(data, **self.arguments)  # type: ignore[assignment]\n        except NotImplementedError:\n            result = result_type(Checker.Code.NOT_IMPLEMENTED, \"\")\n        else:\n            messages = \"\"\n            if isinstance(result, tuple):\n                result, messages = result\n\n            if result not in Checker.Code:\n                result = Checker.Code.PASSED if bool(result) else Checker.Code.FAILED  # type: ignore[assignment]\n\n            if result == Checker.Code.FAILED and self.allow_failure:\n                result = Checker.Code.IGNORED  # type: ignore[assignment]\n\n            result = result_type(result, messages)\n    self.result = result  # type: ignore[assignment]\n</code></pre>"},{"location":"reference/archan/plugins/checkers/#archan.plugins.checkers.SeparationOfPrivileges","title":"SeparationOfPrivileges","text":"<pre><code>SeparationOfPrivileges(\n    name: str | None = None,\n    description: str | None = None,\n    hint: str | None = None,\n    allow_failure: bool = False,\n    passes: Any | None = None,\n    arguments: dict | None = None,\n)\n</code></pre> <p>             Bases: <code>Checker</code></p> <p>Separation of privileges check.</p> <p>Parameters:</p> <ul> <li> <code>name</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The checker name.</p> </li> <li> <code>description</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The checker description.</p> </li> <li> <code>hint</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Hint provided for failures.</p> </li> <li> <code>allow_failure</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Still pass if failed or not.</p> </li> <li> <code>passes</code>             (<code>Any | None</code>, default:                 <code>None</code> )         \u2013          <p>Boolean.</p> </li> <li> <code>arguments</code>             (<code>dict | None</code>, default:                 <code>None</code> )         \u2013          <p>Arguments passed to the check method when run.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>check</code>           \u2013            <p>Todo</p> <p>To implement.</p> </li> <li> <code>print</code>           \u2013            <p>Print self.</p> </li> <li> <code>print_name</code>           \u2013            <p>Print name with optional indent and end.</p> </li> <li> <code>run</code>           \u2013            <p>Run the check method and format the result for analysis.</p> </li> </ul> Source code in <code>src/archan/plugins/__init__.py</code> <pre><code>def __init__(\n    self,\n    name: str | None = None,\n    description: str | None = None,\n    hint: str | None = None,\n    allow_failure: bool = False,  # noqa: FBT001, FBT002\n    passes: Any | None = None,\n    arguments: dict | None = None,\n):\n    \"\"\"Initialization method.\n\n    Parameters:\n        name: The checker name.\n        description: The checker description.\n        hint: Hint provided for failures.\n        allow_failure: Still pass if failed or not.\n        passes: Boolean.\n        arguments: Arguments passed to the check method when run.\n    \"\"\"\n    if name:\n        self.name = name\n    if description:\n        self.description = description\n    if hint:\n        self.hint = hint\n\n    self.allow_failure = allow_failure\n    self.passes = passes\n    self.arguments = arguments or {}\n    self.result = None\n</code></pre>"},{"location":"reference/archan/plugins/checkers/#archan.plugins.checkers.SeparationOfPrivileges.check","title":"check","text":"<pre><code>check(\n    dsm: DesignStructureMatrix\n    | MultipleDomainMatrix\n    | DomainMappingMatrix,\n    **kwargs: Any\n) -&gt; tuple[Any, str]\n</code></pre> <p>Todo</p> <p>To implement.</p> Source code in <code>src/archan/plugins/checkers.py</code> <pre><code>def check(\n    self,\n    dsm: DesignStructureMatrix | MultipleDomainMatrix | DomainMappingMatrix,\n    **kwargs: Any,\n) -&gt; tuple[Any, str]:\n    \"\"\"TODO: To implement.\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/archan/plugins/checkers/#archan.plugins.checkers.SeparationOfPrivileges.print","title":"print","text":"<pre><code>print() -&gt; None\n</code></pre> <p>Print self.</p> Source code in <code>src/archan/printing.py</code> <pre><code>def print(self) -&gt; None:  # noqa: A003\n    \"\"\"Print self.\"\"\"\n    print(\n        f\"{Style.DIM}Identifier:{Style.RESET_ALL} {Fore.CYAN}{self.identifier}{Style.RESET_ALL}\\n\"\n        f\"{Style.DIM}Name:{Style.RESET_ALL} {self.name}\\n\"\n        f\"{Style.DIM}Description:{Style.RESET_ALL}\\n{pretty_description(self.description, indent=2)}\",\n    )\n\n    if hasattr(self, \"argument_list\") and self.argument_list:\n        print(f\"{Style.DIM}Arguments:{Style.RESET_ALL}\")\n        for argument in self.argument_list:\n            argument.print(indent=2)\n</code></pre>"},{"location":"reference/archan/plugins/checkers/#archan.plugins.checkers.SeparationOfPrivileges.print_name","title":"print_name","text":"<pre><code>print_name(indent: int = 0, end: str = '\\n') -&gt; None\n</code></pre> <p>Print name with optional indent and end.</p> <p>Parameters:</p> <ul> <li> <code>indent</code>             (<code>int</code>, default:                 <code>0</code> )         \u2013          <p>Indentation.</p> </li> <li> <code>end</code>             (<code>str</code>, default:                 <code>'\\n'</code> )         \u2013          <p>End of line.</p> </li> </ul> Source code in <code>src/archan/printing.py</code> <pre><code>def print_name(self, indent: int = 0, end: str = \"\\n\") -&gt; None:\n    \"\"\"Print name with optional indent and end.\n\n    Parameters:\n        indent: Indentation.\n        end: End of line.\n    \"\"\"\n    print(Style.BRIGHT + \" \" * indent + self.name, end=end)  # type: ignore[attr-defined]\n</code></pre>"},{"location":"reference/archan/plugins/checkers/#archan.plugins.checkers.SeparationOfPrivileges.run","title":"run","text":"<pre><code>run(\n    data: DesignStructureMatrix\n    | MultipleDomainMatrix\n    | DomainMappingMatrix,\n) -&gt; None\n</code></pre> <p>Run the check method and format the result for analysis.</p> <p>Parameters:</p> <ul> <li> <code>data</code>             (<code>DesignStructureMatrix | MultipleDomainMatrix | DomainMappingMatrix</code>)         \u2013          <p>DSM/DMM/MDM instance to check.</p> </li> </ul> Source code in <code>src/archan/plugins/__init__.py</code> <pre><code>def run(self, data: DesignStructureMatrix | MultipleDomainMatrix | DomainMappingMatrix) -&gt; None:\n    \"\"\"Run the check method and format the result for analysis.\n\n    Parameters:\n        data: DSM/DMM/MDM instance to check.\n    \"\"\"\n    result_type = namedtuple(\"Result\", \"code messages\")  # type: ignore[name-match]  # noqa: PYI024\n\n    if self.passes is True:\n        result = result_type(Checker.Code.PASSED, \"\")\n    elif self.passes is False:\n        result = (\n            result_type(Checker.Code.IGNORED, \"\") if self.allow_failure else result_type(Checker.Code.FAILED, \"\")\n        )\n    else:\n        try:\n            result = self.check(data, **self.arguments)  # type: ignore[assignment]\n        except NotImplementedError:\n            result = result_type(Checker.Code.NOT_IMPLEMENTED, \"\")\n        else:\n            messages = \"\"\n            if isinstance(result, tuple):\n                result, messages = result\n\n            if result not in Checker.Code:\n                result = Checker.Code.PASSED if bool(result) else Checker.Code.FAILED  # type: ignore[assignment]\n\n            if result == Checker.Code.FAILED and self.allow_failure:\n                result = Checker.Code.IGNORED  # type: ignore[assignment]\n\n            result = result_type(result, messages)\n    self.result = result  # type: ignore[assignment]\n</code></pre>"},{"location":"reference/archan/plugins/providers/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> providers","text":""},{"location":"reference/archan/plugins/providers/#archan.plugins.providers","title":"providers","text":"<p>Provider module.</p> <p>Classes:</p> <ul> <li> <code>CSVInput</code>         \u2013          <p>Provider to read DSM from CSV data.</p> </li> </ul>"},{"location":"reference/archan/plugins/providers/#archan.plugins.providers.CSVInput","title":"CSVInput","text":"<pre><code>CSVInput(\n    name: str | None = None,\n    description: str | None = None,\n    arguments: dict | None = None,\n)\n</code></pre> <p>             Bases: <code>Provider</code></p> <p>Provider to read DSM from CSV data.</p> <p>Parameters:</p> <ul> <li> <code>name</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The provider name.</p> </li> <li> <code>description</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The provider description.</p> </li> <li> <code>arguments</code>             (<code>dict | None</code>, default:                 <code>None</code> )         \u2013          <p>Arguments that will be used for <code>get_data</code> method.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>get_data</code>           \u2013            <p>Implement get_dsm method from Provider class.</p> </li> <li> <code>print</code>           \u2013            <p>Print self.</p> </li> <li> <code>print_name</code>           \u2013            <p>Print name with optional indent and end.</p> </li> <li> <code>run</code>           \u2013            <p>Run the get_data method with run arguments, store the result.</p> </li> </ul> Source code in <code>src/archan/plugins/__init__.py</code> <pre><code>def __init__(\n    self,\n    name: str | None = None,\n    description: str | None = None,\n    arguments: dict | None = None,\n) -&gt; None:\n    \"\"\"Initialization method.\n\n    Parameters:\n        name: The provider name.\n        description: The provider description.\n        arguments: Arguments that will be used for `get_data` method.\n    \"\"\"\n    if name:\n        self.name = name\n    if description:\n        self.description = description\n\n    self.arguments = arguments or {}\n    self.data = None\n</code></pre>"},{"location":"reference/archan/plugins/providers/#archan.plugins.providers.CSVInput.get_data","title":"get_data","text":"<pre><code>get_data(\n    file_path: str | None = None,\n    delimiter: str = \",\",\n    categories_delimiter: str | None = None,\n    **kwargs: Any\n) -&gt; DesignStructureMatrix\n</code></pre> <p>Implement get_dsm method from Provider class.</p> <p>Parse CSV to return an instance of DSM.</p> <p>Parameters:</p> <ul> <li> <code>file_path</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>String path or None. If None, uses sys.stdin.</p> </li> <li> <code>delimiter</code>             (<code>str</code>, default:                 <code>','</code> )         \u2013          <p>Character(s) used as delimiter for columns.</p> </li> <li> <code>categories_delimiter</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Character(s) used as delimiter for categories and keys (first column).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DSM</code> (            <code>DesignStructureMatrix</code> )        \u2013          <p>instance of DSM.</p> </li> </ul> Source code in <code>src/archan/plugins/providers.py</code> <pre><code>def get_data(\n    self,\n    file_path: str | None = None,\n    delimiter: str = \",\",\n    categories_delimiter: str | None = None,\n    **kwargs: Any,  # noqa: ARG002\n) -&gt; DesignStructureMatrix:\n    \"\"\"Implement get_dsm method from Provider class.\n\n    Parse CSV to return an instance of DSM.\n\n    Parameters:\n        file_path: String path or None. If None, uses sys.stdin.\n        delimiter: Character(s) used as delimiter for columns.\n        categories_delimiter:\n            Character(s) used as delimiter for categories and keys\n            (first column).\n\n    Returns:\n        DSM: instance of DSM.\n    \"\"\"\n    if file_path is None:\n        logger.info(\"Read data from standard input\")\n        lines = [line.replace(\"\\n\", \"\") for line in sys.stdin]\n    else:\n        logger.info(f\"Read data from file {file_path}\")\n        with open(file_path) as file:\n            lines = list(file)\n    columns = lines[0].rstrip(\"\\n\").split(delimiter)[1:]\n    categories = None\n    if categories_delimiter:\n        columns, categories = zip(*[column.split(categories_delimiter, 1) for column in columns])  # type: ignore[assignment]\n    size = len(columns)\n    data = [list(map(int, line.split(delimiter)[1:])) for line in lines[1 : size + 1]]\n    return DesignStructureMatrix(data, columns, categories)  # type: ignore[arg-type]\n</code></pre>"},{"location":"reference/archan/plugins/providers/#archan.plugins.providers.CSVInput.print","title":"print","text":"<pre><code>print() -&gt; None\n</code></pre> <p>Print self.</p> Source code in <code>src/archan/printing.py</code> <pre><code>def print(self) -&gt; None:  # noqa: A003\n    \"\"\"Print self.\"\"\"\n    print(\n        f\"{Style.DIM}Identifier:{Style.RESET_ALL} {Fore.CYAN}{self.identifier}{Style.RESET_ALL}\\n\"\n        f\"{Style.DIM}Name:{Style.RESET_ALL} {self.name}\\n\"\n        f\"{Style.DIM}Description:{Style.RESET_ALL}\\n{pretty_description(self.description, indent=2)}\",\n    )\n\n    if hasattr(self, \"argument_list\") and self.argument_list:\n        print(f\"{Style.DIM}Arguments:{Style.RESET_ALL}\")\n        for argument in self.argument_list:\n            argument.print(indent=2)\n</code></pre>"},{"location":"reference/archan/plugins/providers/#archan.plugins.providers.CSVInput.print_name","title":"print_name","text":"<pre><code>print_name(indent: int = 0, end: str = '\\n') -&gt; None\n</code></pre> <p>Print name with optional indent and end.</p> <p>Parameters:</p> <ul> <li> <code>indent</code>             (<code>int</code>, default:                 <code>0</code> )         \u2013          <p>Indentation.</p> </li> <li> <code>end</code>             (<code>str</code>, default:                 <code>'\\n'</code> )         \u2013          <p>End of line.</p> </li> </ul> Source code in <code>src/archan/printing.py</code> <pre><code>def print_name(self, indent: int = 0, end: str = \"\\n\") -&gt; None:\n    \"\"\"Print name with optional indent and end.\n\n    Parameters:\n        indent: Indentation.\n        end: End of line.\n    \"\"\"\n    print(Style.BRIGHT + \" \" * indent + self.name, end=end)  # type: ignore[attr-defined]\n</code></pre>"},{"location":"reference/archan/plugins/providers/#archan.plugins.providers.CSVInput.run","title":"run","text":"<pre><code>run() -&gt; None\n</code></pre> <p>Run the get_data method with run arguments, store the result.</p> Source code in <code>src/archan/plugins/__init__.py</code> <pre><code>def run(self) -&gt; None:\n    \"\"\"Run the get_data method with run arguments, store the result.\"\"\"\n    self.data = self.get_data(**self.arguments)\n</code></pre>"},{"location":"coverage/","title":"Coverage report","text":""}]}